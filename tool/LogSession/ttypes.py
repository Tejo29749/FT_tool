#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes

from thrift.transport import TTransport
all_structs = []


class IndexType(object):
    PROTOCOL_INDEX = 0
    SESSION_INDEX = 1
    DATA_VIEW_INDEX = 2

    _VALUES_TO_NAMES = {
        0: "PROTOCOL_INDEX",
        1: "SESSION_INDEX",
        2: "DATA_VIEW_INDEX",
    }

    _NAMES_TO_VALUES = {
        "PROTOCOL_INDEX": 0,
        "SESSION_INDEX": 1,
        "DATA_VIEW_INDEX": 2,
    }


class DataViewServiceEvent(object):
    INITIALIZE = 0
    SAVE_ITEMS_BY_VIEW_INDEX = 1
    PERCENT_OF_TOTAL_PACKETS_PROCESSED = 2
    TIMESTAMP_SORTING_PROGRESS = 3

    _VALUES_TO_NAMES = {
        0: "INITIALIZE",
        1: "SAVE_ITEMS_BY_VIEW_INDEX",
        2: "PERCENT_OF_TOTAL_PACKETS_PROCESSED",
        3: "TIMESTAMP_SORTING_PROGRESS",
    }

    _NAMES_TO_VALUES = {
        "INITIALIZE": 0,
        "SAVE_ITEMS_BY_VIEW_INDEX": 1,
        "PERCENT_OF_TOTAL_PACKETS_PROCESSED": 2,
        "TIMESTAMP_SORTING_PROGRESS": 3,
    }


class ViewConfigurationUpdate(object):
    ADD_NEW_CONFIG_ITEMS = 0
    REPLACE_CURRENT_CONFIG_ITEMS = 1
    REMOVE_SELECTED_CONFIG_ITEMS = 2

    _VALUES_TO_NAMES = {
        0: "ADD_NEW_CONFIG_ITEMS",
        1: "REPLACE_CURRENT_CONFIG_ITEMS",
        2: "REMOVE_SELECTED_CONFIG_ITEMS",
    }

    _NAMES_TO_VALUES = {
        "ADD_NEW_CONFIG_ITEMS": 0,
        "REPLACE_CURRENT_CONFIG_ITEMS": 1,
        "REMOVE_SELECTED_CONFIG_ITEMS": 2,
    }


class ExtractTypes(object):
    TYPE_JSON = 0
    TYPE_CSV = 1
    TYPE_PERFETTO = 2
    TYPE_HDF = 3

    _VALUES_TO_NAMES = {
        0: "TYPE_JSON",
        1: "TYPE_CSV",
        2: "TYPE_PERFETTO",
        3: "TYPE_HDF",
    }

    _NAMES_TO_VALUES = {
        "TYPE_JSON": 0,
        "TYPE_CSV": 1,
        "TYPE_PERFETTO": 2,
        "TYPE_HDF": 3,
    }


class PacketRange(object):
    """
    Attributes:
     - indexType
     - beginIndex
     - endIndex
     - count
     - dataViewIndexes
     - beginReceiveTimeData
     - endReceiveTimeData

    """


    def __init__(self, indexType=None, beginIndex=None, endIndex=None, count=None, dataViewIndexes=None, beginReceiveTimeData=None, endReceiveTimeData=None,):
        self.indexType = indexType
        self.beginIndex = beginIndex
        self.endIndex = endIndex
        self.count = count
        self.dataViewIndexes = dataViewIndexes
        self.beginReceiveTimeData = beginReceiveTimeData
        self.endReceiveTimeData = endReceiveTimeData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.indexType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.beginIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.endIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.dataViewIndexes = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI64()
                        self.dataViewIndexes.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.beginReceiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.endReceiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PacketRange')
        if self.indexType is not None:
            oprot.writeFieldBegin('indexType', TType.I32, 1)
            oprot.writeI32(self.indexType)
            oprot.writeFieldEnd()
        if self.beginIndex is not None:
            oprot.writeFieldBegin('beginIndex', TType.I64, 2)
            oprot.writeI64(self.beginIndex)
            oprot.writeFieldEnd()
        if self.endIndex is not None:
            oprot.writeFieldBegin('endIndex', TType.I64, 3)
            oprot.writeI64(self.endIndex)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I64, 4)
            oprot.writeI64(self.count)
            oprot.writeFieldEnd()
        if self.dataViewIndexes is not None:
            oprot.writeFieldBegin('dataViewIndexes', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.dataViewIndexes))
            for iter6 in self.dataViewIndexes:
                oprot.writeI64(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.beginReceiveTimeData is not None:
            oprot.writeFieldBegin('beginReceiveTimeData', TType.I64, 6)
            oprot.writeI64(self.beginReceiveTimeData)
            oprot.writeFieldEnd()
        if self.endReceiveTimeData is not None:
            oprot.writeFieldBegin('endReceiveTimeData', TType.I64, 7)
            oprot.writeI64(self.endReceiveTimeData)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataPacketFilter(object):
    """
    Attributes:
     - protocolHandleList
     - protocolRange
     - diagFilter
     - qmiFilter
     - adbFilter
     - saharaFilter
     - fastbootFilter
     - nmeaFilter
     - annotationsFilter
     - qdssFilter
     - registerMaskToDevice
     - dunFilter
     - eudFilter
     - protoBufFilter
     - telnetFilter
     - qspsFilter
     - serialFilter

    """


    def __init__(self, protocolHandleList=None, protocolRange=None, diagFilter=None, qmiFilter=None, adbFilter=None, saharaFilter=None, fastbootFilter=None, nmeaFilter=None, annotationsFilter=None, qdssFilter=None, registerMaskToDevice=None, dunFilter=None, eudFilter=None, protoBufFilter=None, telnetFilter=None, qspsFilter=None, serialFilter=None,):
        self.protocolHandleList = protocolHandleList
        self.protocolRange = protocolRange
        self.diagFilter = diagFilter
        self.qmiFilter = qmiFilter
        self.adbFilter = adbFilter
        self.saharaFilter = saharaFilter
        self.fastbootFilter = fastbootFilter
        self.nmeaFilter = nmeaFilter
        self.annotationsFilter = annotationsFilter
        self.qdssFilter = qdssFilter
        self.registerMaskToDevice = registerMaskToDevice
        self.dunFilter = dunFilter
        self.eudFilter = eudFilter
        self.protoBufFilter = protoBufFilter
        self.telnetFilter = telnetFilter
        self.qspsFilter = qspsFilter
        self.serialFilter = serialFilter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.protocolHandleList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI64()
                        self.protocolHandleList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.protocolRange = {}
                    (_ktype14, _vtype15, _size13) = iprot.readMapBegin()
                    for _i17 in range(_size13):
                        _key18 = iprot.readI64()
                        _val19 = PacketRange()
                        _val19.read(iprot)
                        self.protocolRange[_key18] = _val19
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.diagFilter = Common.ttypes.DiagPacketFilter()
                    self.diagFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.qmiFilter = Common.ttypes.QmiPacketFilter()
                    self.qmiFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.adbFilter = Common.ttypes.AdbPacketFilter()
                    self.adbFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.saharaFilter = Common.ttypes.SaharaPacketFilter()
                    self.saharaFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.fastbootFilter = Common.ttypes.FastbootPacketFilter()
                    self.fastbootFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.nmeaFilter = Common.ttypes.NmeaPacketFilter()
                    self.nmeaFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.annotationsFilter = Common.ttypes.AnnotationPacketFilter()
                    self.annotationsFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.qdssFilter = Common.ttypes.QdssPacketFilter()
                    self.qdssFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.registerMaskToDevice = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.dunFilter = Common.ttypes.DunPacketFilter()
                    self.dunFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.eudFilter = Common.ttypes.EudPacketFilter()
                    self.eudFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.protoBufFilter = Common.ttypes.ProtoBufPacketFilter()
                    self.protoBufFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.telnetFilter = Common.ttypes.TelnetPacketFilter()
                    self.telnetFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.qspsFilter = Common.ttypes.QspsPacketFilter()
                    self.qspsFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.serialFilter = Common.ttypes.SerialPacketFilter()
                    self.serialFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataPacketFilter')
        if self.protocolHandleList is not None:
            oprot.writeFieldBegin('protocolHandleList', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.protocolHandleList))
            for iter20 in self.protocolHandleList:
                oprot.writeI64(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.protocolRange is not None:
            oprot.writeFieldBegin('protocolRange', TType.MAP, 2)
            oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.protocolRange))
            for kiter21, viter22 in self.protocolRange.items():
                oprot.writeI64(kiter21)
                viter22.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.diagFilter is not None:
            oprot.writeFieldBegin('diagFilter', TType.STRUCT, 3)
            self.diagFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.qmiFilter is not None:
            oprot.writeFieldBegin('qmiFilter', TType.STRUCT, 4)
            self.qmiFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.adbFilter is not None:
            oprot.writeFieldBegin('adbFilter', TType.STRUCT, 5)
            self.adbFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.saharaFilter is not None:
            oprot.writeFieldBegin('saharaFilter', TType.STRUCT, 6)
            self.saharaFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.fastbootFilter is not None:
            oprot.writeFieldBegin('fastbootFilter', TType.STRUCT, 7)
            self.fastbootFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.nmeaFilter is not None:
            oprot.writeFieldBegin('nmeaFilter', TType.STRUCT, 8)
            self.nmeaFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.annotationsFilter is not None:
            oprot.writeFieldBegin('annotationsFilter', TType.STRUCT, 9)
            self.annotationsFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.qdssFilter is not None:
            oprot.writeFieldBegin('qdssFilter', TType.STRUCT, 10)
            self.qdssFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.registerMaskToDevice is not None:
            oprot.writeFieldBegin('registerMaskToDevice', TType.BOOL, 11)
            oprot.writeBool(self.registerMaskToDevice)
            oprot.writeFieldEnd()
        if self.dunFilter is not None:
            oprot.writeFieldBegin('dunFilter', TType.STRUCT, 12)
            self.dunFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.eudFilter is not None:
            oprot.writeFieldBegin('eudFilter', TType.STRUCT, 13)
            self.eudFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.protoBufFilter is not None:
            oprot.writeFieldBegin('protoBufFilter', TType.STRUCT, 14)
            self.protoBufFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.telnetFilter is not None:
            oprot.writeFieldBegin('telnetFilter', TType.STRUCT, 15)
            self.telnetFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.qspsFilter is not None:
            oprot.writeFieldBegin('qspsFilter', TType.STRUCT, 16)
            self.qspsFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.serialFilter is not None:
            oprot.writeFieldBegin('serialFilter', TType.STRUCT, 17)
            self.serialFilter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataPacket(object):
    """
    Attributes:
     - protocolHandle
     - diagPacket
     - qmiPacket
     - adbPacket
     - saharaPacket
     - fastbootPacket
     - adplPacket
     - nmeaPacket
     - annotationPacket
     - qdssPacket
     - dunPacket
     - eudPacket
     - protoBufPacket
     - telnetPacket
     - qspsPacket
     - serialPacket

    """


    def __init__(self, protocolHandle=None, diagPacket=None, qmiPacket=None, adbPacket=None, saharaPacket=None, fastbootPacket=None, adplPacket=None, nmeaPacket=None, annotationPacket=None, qdssPacket=None, dunPacket=None, eudPacket=None, protoBufPacket=None, telnetPacket=None, qspsPacket=None, serialPacket=None,):
        self.protocolHandle = protocolHandle
        self.diagPacket = diagPacket
        self.qmiPacket = qmiPacket
        self.adbPacket = adbPacket
        self.saharaPacket = saharaPacket
        self.fastbootPacket = fastbootPacket
        self.adplPacket = adplPacket
        self.nmeaPacket = nmeaPacket
        self.annotationPacket = annotationPacket
        self.qdssPacket = qdssPacket
        self.dunPacket = dunPacket
        self.eudPacket = eudPacket
        self.protoBufPacket = protoBufPacket
        self.telnetPacket = telnetPacket
        self.qspsPacket = qspsPacket
        self.serialPacket = serialPacket

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.diagPacket = Common.ttypes.DiagPacket()
                    self.diagPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.qmiPacket = Common.ttypes.QmiPacket()
                    self.qmiPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.adbPacket = Common.ttypes.AdbPacket()
                    self.adbPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.saharaPacket = Common.ttypes.SaharaPacket()
                    self.saharaPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.fastbootPacket = Common.ttypes.FastbootPacket()
                    self.fastbootPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.adplPacket = Common.ttypes.AdplPacket()
                    self.adplPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.nmeaPacket = Common.ttypes.NmeaPacket()
                    self.nmeaPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.annotationPacket = Common.ttypes.AnnotationPacket()
                    self.annotationPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.qdssPacket = Common.ttypes.QdssPacket()
                    self.qdssPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.dunPacket = Common.ttypes.DunPacket()
                    self.dunPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.eudPacket = Common.ttypes.EudPacket()
                    self.eudPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.protoBufPacket = Common.ttypes.ProtoBufPacket()
                    self.protoBufPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.telnetPacket = Common.ttypes.TelnetPacket()
                    self.telnetPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.qspsPacket = Common.ttypes.QspsPacket()
                    self.qspsPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.serialPacket = Common.ttypes.SerialPacket()
                    self.serialPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataPacket')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.diagPacket is not None:
            oprot.writeFieldBegin('diagPacket', TType.STRUCT, 2)
            self.diagPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.qmiPacket is not None:
            oprot.writeFieldBegin('qmiPacket', TType.STRUCT, 3)
            self.qmiPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.adbPacket is not None:
            oprot.writeFieldBegin('adbPacket', TType.STRUCT, 4)
            self.adbPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.saharaPacket is not None:
            oprot.writeFieldBegin('saharaPacket', TType.STRUCT, 5)
            self.saharaPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.fastbootPacket is not None:
            oprot.writeFieldBegin('fastbootPacket', TType.STRUCT, 6)
            self.fastbootPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.adplPacket is not None:
            oprot.writeFieldBegin('adplPacket', TType.STRUCT, 7)
            self.adplPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.nmeaPacket is not None:
            oprot.writeFieldBegin('nmeaPacket', TType.STRUCT, 8)
            self.nmeaPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.annotationPacket is not None:
            oprot.writeFieldBegin('annotationPacket', TType.STRUCT, 9)
            self.annotationPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.qdssPacket is not None:
            oprot.writeFieldBegin('qdssPacket', TType.STRUCT, 10)
            self.qdssPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.dunPacket is not None:
            oprot.writeFieldBegin('dunPacket', TType.STRUCT, 11)
            self.dunPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.eudPacket is not None:
            oprot.writeFieldBegin('eudPacket', TType.STRUCT, 12)
            self.eudPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.protoBufPacket is not None:
            oprot.writeFieldBegin('protoBufPacket', TType.STRUCT, 13)
            self.protoBufPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.telnetPacket is not None:
            oprot.writeFieldBegin('telnetPacket', TType.STRUCT, 14)
            self.telnetPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.qspsPacket is not None:
            oprot.writeFieldBegin('qspsPacket', TType.STRUCT, 15)
            self.qspsPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.serialPacket is not None:
            oprot.writeFieldBegin('serialPacket', TType.STRUCT, 16)
            self.serialPacket.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PacketReturnConfig(object):
    """
    Attributes:
     - diagConfig
     - qmiConfig
     - adbConfig
     - saharaConfig
     - fastbootConfig
     - adplConfig
     - nmeaConfig
     - qdssConfig
     - dunConfig
     - eudConfig
     - protoBufConfig
     - telnetConfig
     - qspsConfig
     - serialConfig

    """


    def __init__(self, diagConfig=None, qmiConfig=None, adbConfig=None, saharaConfig=None, fastbootConfig=None, adplConfig=None, nmeaConfig=None, qdssConfig=None, dunConfig=None, eudConfig=None, protoBufConfig=None, telnetConfig=None, qspsConfig=None, serialConfig=None,):
        self.diagConfig = diagConfig
        self.qmiConfig = qmiConfig
        self.adbConfig = adbConfig
        self.saharaConfig = saharaConfig
        self.fastbootConfig = fastbootConfig
        self.adplConfig = adplConfig
        self.nmeaConfig = nmeaConfig
        self.qdssConfig = qdssConfig
        self.dunConfig = dunConfig
        self.eudConfig = eudConfig
        self.protoBufConfig = protoBufConfig
        self.telnetConfig = telnetConfig
        self.qspsConfig = qspsConfig
        self.serialConfig = serialConfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.diagConfig = Common.ttypes.DiagReturnConfig()
                    self.diagConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.qmiConfig = Common.ttypes.QmiReturnConfig()
                    self.qmiConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.adbConfig = Common.ttypes.AdbReturnConfig()
                    self.adbConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.saharaConfig = Common.ttypes.SaharaReturnConfig()
                    self.saharaConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.fastbootConfig = Common.ttypes.FastbootReturnConfig()
                    self.fastbootConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.adplConfig = Common.ttypes.AdplReturnConfig()
                    self.adplConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.nmeaConfig = Common.ttypes.NmeaReturnConfig()
                    self.nmeaConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.qdssConfig = Common.ttypes.QdssReturnConfig()
                    self.qdssConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.dunConfig = Common.ttypes.DunReturnConfig()
                    self.dunConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.eudConfig = Common.ttypes.EudReturnConfig()
                    self.eudConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.protoBufConfig = Common.ttypes.ProtoBufReturnConfig()
                    self.protoBufConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.telnetConfig = Common.ttypes.TelnetReturnConfig()
                    self.telnetConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.qspsConfig = Common.ttypes.QspsReturnConfig()
                    self.qspsConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.serialConfig = Common.ttypes.SerialReturnConfig()
                    self.serialConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PacketReturnConfig')
        if self.diagConfig is not None:
            oprot.writeFieldBegin('diagConfig', TType.STRUCT, 1)
            self.diagConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.qmiConfig is not None:
            oprot.writeFieldBegin('qmiConfig', TType.STRUCT, 2)
            self.qmiConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.adbConfig is not None:
            oprot.writeFieldBegin('adbConfig', TType.STRUCT, 3)
            self.adbConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.saharaConfig is not None:
            oprot.writeFieldBegin('saharaConfig', TType.STRUCT, 4)
            self.saharaConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.fastbootConfig is not None:
            oprot.writeFieldBegin('fastbootConfig', TType.STRUCT, 5)
            self.fastbootConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.adplConfig is not None:
            oprot.writeFieldBegin('adplConfig', TType.STRUCT, 6)
            self.adplConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.nmeaConfig is not None:
            oprot.writeFieldBegin('nmeaConfig', TType.STRUCT, 7)
            self.nmeaConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.qdssConfig is not None:
            oprot.writeFieldBegin('qdssConfig', TType.STRUCT, 8)
            self.qdssConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.dunConfig is not None:
            oprot.writeFieldBegin('dunConfig', TType.STRUCT, 9)
            self.dunConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.eudConfig is not None:
            oprot.writeFieldBegin('eudConfig', TType.STRUCT, 10)
            self.eudConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.protoBufConfig is not None:
            oprot.writeFieldBegin('protoBufConfig', TType.STRUCT, 11)
            self.protoBufConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.telnetConfig is not None:
            oprot.writeFieldBegin('telnetConfig', TType.STRUCT, 12)
            self.telnetConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.qspsConfig is not None:
            oprot.writeFieldBegin('qspsConfig', TType.STRUCT, 13)
            self.qspsConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.serialConfig is not None:
            oprot.writeFieldBegin('serialConfig', TType.STRUCT, 14)
            self.serialConfig.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClientSessionInfo(object):
    """
    Attributes:
     - clientId
     - sessionName

    """


    def __init__(self, clientId=None, sessionName=None,):
        self.clientId = clientId
        self.sessionName = sessionName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.clientId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sessionName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClientSessionInfo')
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.I32, 1)
            oprot.writeI32(self.clientId)
            oprot.writeFieldEnd()
        if self.sessionName is not None:
            oprot.writeFieldBegin('sessionName', TType.STRING, 2)
            oprot.writeString(self.sessionName.encode('utf-8') if sys.version_info[0] == 2 else self.sessionName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OclaLogSessionInformation(object):
    """
    Attributes:
     - oclaDataLossPacketCount
     - oclaFramingErrorCount

    """


    def __init__(self, oclaDataLossPacketCount=None, oclaFramingErrorCount=None,):
        self.oclaDataLossPacketCount = oclaDataLossPacketCount
        self.oclaFramingErrorCount = oclaFramingErrorCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.oclaDataLossPacketCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.oclaFramingErrorCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OclaLogSessionInformation')
        if self.oclaDataLossPacketCount is not None:
            oprot.writeFieldBegin('oclaDataLossPacketCount', TType.I32, 1)
            oprot.writeI32(self.oclaDataLossPacketCount)
            oprot.writeFieldEnd()
        if self.oclaFramingErrorCount is not None:
            oprot.writeFieldBegin('oclaFramingErrorCount', TType.I32, 2)
            oprot.writeI32(self.oclaFramingErrorCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssLogSessionInformation(object):
    """
    Attributes:
     - atIds
     - oclaLogSessionInformation

    """


    def __init__(self, atIds=None, oclaLogSessionInformation=None,):
        self.atIds = atIds
        self.oclaLogSessionInformation = oclaLogSessionInformation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.atIds = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = iprot.readI32()
                        self.atIds.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.oclaLogSessionInformation = OclaLogSessionInformation()
                    self.oclaLogSessionInformation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssLogSessionInformation')
        if self.atIds is not None:
            oprot.writeFieldBegin('atIds', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.atIds))
            for iter29 in self.atIds:
                oprot.writeI32(iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.oclaLogSessionInformation is not None:
            oprot.writeFieldBegin('oclaLogSessionInformation', TType.STRUCT, 2)
            self.oclaLogSessionInformation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagLogSessionInformation(object):
    """
    Attributes:
     - packetId
     - subscriptionId
     - miscellaneousId
     - variantIdPacketIdMap
     - bIncludeAnnotation

    """


    def __init__(self, packetId=None, subscriptionId=None, miscellaneousId=None, variantIdPacketIdMap=None, bIncludeAnnotation=None,):
        self.packetId = packetId
        self.subscriptionId = subscriptionId
        self.miscellaneousId = miscellaneousId
        self.variantIdPacketIdMap = variantIdPacketIdMap
        self.bIncludeAnnotation = bIncludeAnnotation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.packetId = {}
                    (_ktype31, _vtype32, _size30) = iprot.readMapBegin()
                    for _i34 in range(_size30):
                        _key35 = iprot.readI32()
                        _val36 = []
                        (_etype40, _size37) = iprot.readListBegin()
                        for _i41 in range(_size37):
                            _elem42 = Common.ttypes.DiagIdFilterItem()
                            _elem42.read(iprot)
                            _val36.append(_elem42)
                        iprot.readListEnd()
                        self.packetId[_key35] = _val36
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.subscriptionId = []
                    (_etype46, _size43) = iprot.readListBegin()
                    for _i47 in range(_size43):
                        _elem48 = iprot.readI32()
                        self.subscriptionId.append(_elem48)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.miscellaneousId = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readI32()
                        self.miscellaneousId.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.variantIdPacketIdMap = {}
                    (_ktype56, _vtype57, _size55) = iprot.readMapBegin()
                    for _i59 in range(_size55):
                        _key60 = iprot.readI32()
                        _val61 = set()
                        (_etype65, _size62) = iprot.readSetBegin()
                        for _i66 in range(_size62):
                            _elem67 = iprot.readI64()
                            _val61.add(_elem67)
                        iprot.readSetEnd()
                        self.variantIdPacketIdMap[_key60] = _val61
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.bIncludeAnnotation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagLogSessionInformation')
        if self.packetId is not None:
            oprot.writeFieldBegin('packetId', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.packetId))
            for kiter68, viter69 in self.packetId.items():
                oprot.writeI32(kiter68)
                oprot.writeListBegin(TType.STRUCT, len(viter69))
                for iter70 in viter69:
                    iter70.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.subscriptionId))
            for iter71 in self.subscriptionId:
                oprot.writeI32(iter71)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.miscellaneousId is not None:
            oprot.writeFieldBegin('miscellaneousId', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.miscellaneousId))
            for iter72 in self.miscellaneousId:
                oprot.writeI32(iter72)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.variantIdPacketIdMap is not None:
            oprot.writeFieldBegin('variantIdPacketIdMap', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.SET, len(self.variantIdPacketIdMap))
            for kiter73, viter74 in self.variantIdPacketIdMap.items():
                oprot.writeI32(kiter73)
                oprot.writeSetBegin(TType.I64, len(viter74))
                for iter75 in viter74:
                    oprot.writeI64(iter75)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.bIncludeAnnotation is not None:
            oprot.writeFieldBegin('bIncludeAnnotation', TType.BOOL, 5)
            oprot.writeBool(self.bIncludeAnnotation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LogSessionInformation(object):
    """
    Attributes:
     - diagLogSessionInformation
     - qdssLogSessionInformation

    """


    def __init__(self, diagLogSessionInformation=None, qdssLogSessionInformation=None,):
        self.diagLogSessionInformation = diagLogSessionInformation
        self.qdssLogSessionInformation = qdssLogSessionInformation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.diagLogSessionInformation = DiagLogSessionInformation()
                    self.diagLogSessionInformation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.qdssLogSessionInformation = QdssLogSessionInformation()
                    self.qdssLogSessionInformation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LogSessionInformation')
        if self.diagLogSessionInformation is not None:
            oprot.writeFieldBegin('diagLogSessionInformation', TType.STRUCT, 1)
            self.diagLogSessionInformation.write(oprot)
            oprot.writeFieldEnd()
        if self.qdssLogSessionInformation is not None:
            oprot.writeFieldBegin('qdssLogSessionInformation', TType.STRUCT, 2)
            self.qdssLogSessionInformation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataViewInfo(object):
    """
    Attributes:
     - viewName
     - filter
     - returnConfig

    """


    def __init__(self, viewName=None, filter=None, returnConfig=None,):
        self.viewName = viewName
        self.filter = filter
        self.returnConfig = returnConfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.viewName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.filter = DataPacketFilter()
                    self.filter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.returnConfig = PacketReturnConfig()
                    self.returnConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataViewInfo')
        if self.viewName is not None:
            oprot.writeFieldBegin('viewName', TType.STRING, 1)
            oprot.writeString(self.viewName.encode('utf-8') if sys.version_info[0] == 2 else self.viewName)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.STRUCT, 2)
            self.filter.write(oprot)
            oprot.writeFieldEnd()
        if self.returnConfig is not None:
            oprot.writeFieldBegin('returnConfig', TType.STRUCT, 3)
            self.returnConfig.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SaveDataViewSettings(object):
    """
    Attributes:
     - saveOptions
     - viewName
     - packets
     - extractTypes

    """


    def __init__(self, saveOptions=None, viewName=None, packets=None, extractTypes=None,):
        self.saveOptions = saveOptions
        self.viewName = viewName
        self.packets = packets
        self.extractTypes = extractTypes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.saveOptions = Common.ttypes.SaveOptions()
                    self.saveOptions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.viewName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.packets = PacketRange()
                    self.packets.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.extractTypes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SaveDataViewSettings')
        if self.saveOptions is not None:
            oprot.writeFieldBegin('saveOptions', TType.STRUCT, 1)
            self.saveOptions.write(oprot)
            oprot.writeFieldEnd()
        if self.viewName is not None:
            oprot.writeFieldBegin('viewName', TType.STRING, 2)
            oprot.writeString(self.viewName.encode('utf-8') if sys.version_info[0] == 2 else self.viewName)
            oprot.writeFieldEnd()
        if self.packets is not None:
            oprot.writeFieldBegin('packets', TType.STRUCT, 3)
            self.packets.write(oprot)
            oprot.writeFieldEnd()
        if self.extractTypes is not None:
            oprot.writeFieldBegin('extractTypes', TType.I32, 4)
            oprot.writeI32(self.extractTypes)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(PacketRange)
PacketRange.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'indexType', None, None, ),  # 1
    (2, TType.I64, 'beginIndex', None, None, ),  # 2
    (3, TType.I64, 'endIndex', None, None, ),  # 3
    (4, TType.I64, 'count', None, None, ),  # 4
    (5, TType.LIST, 'dataViewIndexes', (TType.I64, None, False), None, ),  # 5
    (6, TType.I64, 'beginReceiveTimeData', None, None, ),  # 6
    (7, TType.I64, 'endReceiveTimeData', None, None, ),  # 7
)
all_structs.append(DataPacketFilter)
DataPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'protocolHandleList', (TType.I64, None, False), None, ),  # 1
    (2, TType.MAP, 'protocolRange', (TType.I64, None, TType.STRUCT, [PacketRange, None], False), None, ),  # 2
    (3, TType.STRUCT, 'diagFilter', [Common.ttypes.DiagPacketFilter, None], None, ),  # 3
    (4, TType.STRUCT, 'qmiFilter', [Common.ttypes.QmiPacketFilter, None], None, ),  # 4
    (5, TType.STRUCT, 'adbFilter', [Common.ttypes.AdbPacketFilter, None], None, ),  # 5
    (6, TType.STRUCT, 'saharaFilter', [Common.ttypes.SaharaPacketFilter, None], None, ),  # 6
    (7, TType.STRUCT, 'fastbootFilter', [Common.ttypes.FastbootPacketFilter, None], None, ),  # 7
    (8, TType.STRUCT, 'nmeaFilter', [Common.ttypes.NmeaPacketFilter, None], None, ),  # 8
    (9, TType.STRUCT, 'annotationsFilter', [Common.ttypes.AnnotationPacketFilter, None], None, ),  # 9
    (10, TType.STRUCT, 'qdssFilter', [Common.ttypes.QdssPacketFilter, None], None, ),  # 10
    (11, TType.BOOL, 'registerMaskToDevice', None, None, ),  # 11
    (12, TType.STRUCT, 'dunFilter', [Common.ttypes.DunPacketFilter, None], None, ),  # 12
    (13, TType.STRUCT, 'eudFilter', [Common.ttypes.EudPacketFilter, None], None, ),  # 13
    (14, TType.STRUCT, 'protoBufFilter', [Common.ttypes.ProtoBufPacketFilter, None], None, ),  # 14
    (15, TType.STRUCT, 'telnetFilter', [Common.ttypes.TelnetPacketFilter, None], None, ),  # 15
    (16, TType.STRUCT, 'qspsFilter', [Common.ttypes.QspsPacketFilter, None], None, ),  # 16
    (17, TType.STRUCT, 'serialFilter', [Common.ttypes.SerialPacketFilter, None], None, ),  # 17
)
all_structs.append(DataPacket)
DataPacket.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
    (2, TType.STRUCT, 'diagPacket', [Common.ttypes.DiagPacket, None], None, ),  # 2
    (3, TType.STRUCT, 'qmiPacket', [Common.ttypes.QmiPacket, None], None, ),  # 3
    (4, TType.STRUCT, 'adbPacket', [Common.ttypes.AdbPacket, None], None, ),  # 4
    (5, TType.STRUCT, 'saharaPacket', [Common.ttypes.SaharaPacket, None], None, ),  # 5
    (6, TType.STRUCT, 'fastbootPacket', [Common.ttypes.FastbootPacket, None], None, ),  # 6
    (7, TType.STRUCT, 'adplPacket', [Common.ttypes.AdplPacket, None], None, ),  # 7
    (8, TType.STRUCT, 'nmeaPacket', [Common.ttypes.NmeaPacket, None], None, ),  # 8
    (9, TType.STRUCT, 'annotationPacket', [Common.ttypes.AnnotationPacket, None], None, ),  # 9
    (10, TType.STRUCT, 'qdssPacket', [Common.ttypes.QdssPacket, None], None, ),  # 10
    (11, TType.STRUCT, 'dunPacket', [Common.ttypes.DunPacket, None], None, ),  # 11
    (12, TType.STRUCT, 'eudPacket', [Common.ttypes.EudPacket, None], None, ),  # 12
    (13, TType.STRUCT, 'protoBufPacket', [Common.ttypes.ProtoBufPacket, None], None, ),  # 13
    (14, TType.STRUCT, 'telnetPacket', [Common.ttypes.TelnetPacket, None], None, ),  # 14
    (15, TType.STRUCT, 'qspsPacket', [Common.ttypes.QspsPacket, None], None, ),  # 15
    (16, TType.STRUCT, 'serialPacket', [Common.ttypes.SerialPacket, None], None, ),  # 16
)
all_structs.append(PacketReturnConfig)
PacketReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'diagConfig', [Common.ttypes.DiagReturnConfig, None], None, ),  # 1
    (2, TType.STRUCT, 'qmiConfig', [Common.ttypes.QmiReturnConfig, None], None, ),  # 2
    (3, TType.STRUCT, 'adbConfig', [Common.ttypes.AdbReturnConfig, None], None, ),  # 3
    (4, TType.STRUCT, 'saharaConfig', [Common.ttypes.SaharaReturnConfig, None], None, ),  # 4
    (5, TType.STRUCT, 'fastbootConfig', [Common.ttypes.FastbootReturnConfig, None], None, ),  # 5
    (6, TType.STRUCT, 'adplConfig', [Common.ttypes.AdplReturnConfig, None], None, ),  # 6
    (7, TType.STRUCT, 'nmeaConfig', [Common.ttypes.NmeaReturnConfig, None], None, ),  # 7
    (8, TType.STRUCT, 'qdssConfig', [Common.ttypes.QdssReturnConfig, None], None, ),  # 8
    (9, TType.STRUCT, 'dunConfig', [Common.ttypes.DunReturnConfig, None], None, ),  # 9
    (10, TType.STRUCT, 'eudConfig', [Common.ttypes.EudReturnConfig, None], None, ),  # 10
    (11, TType.STRUCT, 'protoBufConfig', [Common.ttypes.ProtoBufReturnConfig, None], None, ),  # 11
    (12, TType.STRUCT, 'telnetConfig', [Common.ttypes.TelnetReturnConfig, None], None, ),  # 12
    (13, TType.STRUCT, 'qspsConfig', [Common.ttypes.QspsReturnConfig, None], None, ),  # 13
    (14, TType.STRUCT, 'serialConfig', [Common.ttypes.SerialReturnConfig, None], None, ),  # 14
)
all_structs.append(ClientSessionInfo)
ClientSessionInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'clientId', None, None, ),  # 1
    (2, TType.STRING, 'sessionName', 'UTF8', None, ),  # 2
)
all_structs.append(OclaLogSessionInformation)
OclaLogSessionInformation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'oclaDataLossPacketCount', None, None, ),  # 1
    (2, TType.I32, 'oclaFramingErrorCount', None, None, ),  # 2
)
all_structs.append(QdssLogSessionInformation)
QdssLogSessionInformation.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'atIds', (TType.I32, None, False), None, ),  # 1
    (2, TType.STRUCT, 'oclaLogSessionInformation', [OclaLogSessionInformation, None], None, ),  # 2
)
all_structs.append(DiagLogSessionInformation)
DiagLogSessionInformation.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'packetId', (TType.I32, None, TType.LIST, (TType.STRUCT, [Common.ttypes.DiagIdFilterItem, None], False), False), None, ),  # 1
    (2, TType.LIST, 'subscriptionId', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'miscellaneousId', (TType.I32, None, False), None, ),  # 3
    (4, TType.MAP, 'variantIdPacketIdMap', (TType.I32, None, TType.SET, (TType.I64, None, False), False), None, ),  # 4
    (5, TType.BOOL, 'bIncludeAnnotation', None, None, ),  # 5
)
all_structs.append(LogSessionInformation)
LogSessionInformation.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'diagLogSessionInformation', [DiagLogSessionInformation, None], None, ),  # 1
    (2, TType.STRUCT, 'qdssLogSessionInformation', [QdssLogSessionInformation, None], None, ),  # 2
)
all_structs.append(DataViewInfo)
DataViewInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'viewName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'filter', [DataPacketFilter, None], None, ),  # 2
    (3, TType.STRUCT, 'returnConfig', [PacketReturnConfig, None], None, ),  # 3
)
all_structs.append(SaveDataViewSettings)
SaveDataViewSettings.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'saveOptions', [Common.ttypes.SaveOptions, None], None, ),  # 1
    (2, TType.STRING, 'viewName', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'packets', [PacketRange, None], None, ),  # 3
    (4, TType.I32, 'extractTypes', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
