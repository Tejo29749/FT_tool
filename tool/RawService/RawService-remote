#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from RawService import RawService
from RawService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ErrorType getLastError()')
    print('  i64 getDevice()')
    print('  ErrorCode initializeService(i64 protocolHandle, OpenProp access, OpenProp share)')
    print('  ErrorCode initializeServiceQmi(i64 protocolHandle, i32 serviceId, OpenProp access, OpenProp share)')
    print('  ErrorCode initializeServiceWithOptions(i64 protocolHandle, OpenProp access, OpenProp share, ConnectionOptions connectionOptions)')
    print('  ErrorCode destroyService()')
    print('  string sendRequest(string request, i32 timeout)')
    print('  i64 sendRequestAsync(string request)')
    print('  string getResponseAsync(i64 transactionId, i32 timeout)')
    print('   getAllResponsesAsync(i64 transactionId, i32 timeout)')
    print('  bool isAsyncResponseFinished(i64 transactionId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = RawService.Client(protocol)
transport.open()

if cmd == 'getLastError':
    if len(args) != 0:
        print('getLastError requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastError())

elif cmd == 'getDevice':
    if len(args) != 0:
        print('getDevice requires 0 args')
        sys.exit(1)
    pp.pprint(client.getDevice())

elif cmd == 'initializeService':
    if len(args) != 3:
        print('initializeService requires 3 args')
        sys.exit(1)
    pp.pprint(client.initializeService(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'initializeServiceQmi':
    if len(args) != 4:
        print('initializeServiceQmi requires 4 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceQmi(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'initializeServiceWithOptions':
    if len(args) != 4:
        print('initializeServiceWithOptions requires 4 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceWithOptions(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'destroyService':
    if len(args) != 0:
        print('destroyService requires 0 args')
        sys.exit(1)
    pp.pprint(client.destroyService())

elif cmd == 'sendRequest':
    if len(args) != 2:
        print('sendRequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendRequest(args[0], eval(args[1]),))

elif cmd == 'sendRequestAsync':
    if len(args) != 1:
        print('sendRequestAsync requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendRequestAsync(args[0],))

elif cmd == 'getResponseAsync':
    if len(args) != 2:
        print('getResponseAsync requires 2 args')
        sys.exit(1)
    pp.pprint(client.getResponseAsync(eval(args[0]), eval(args[1]),))

elif cmd == 'getAllResponsesAsync':
    if len(args) != 2:
        print('getAllResponsesAsync requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAllResponsesAsync(eval(args[0]), eval(args[1]),))

elif cmd == 'isAsyncResponseFinished':
    if len(args) != 1:
        print('isAsyncResponseFinished requires 1 args')
        sys.exit(1)
    pp.pprint(client.isAsyncResponseFinished(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
