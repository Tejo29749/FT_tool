#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes

from thrift.transport import TTransport
all_structs = []


class QdssConfiguration(object):
    """
    Attributes:
     - stpv2Atids
     - stmAtids
     - diagEntityId

    """


    def __init__(self, stpv2Atids=None, stmAtids=None, diagEntityId=None,):
        self.stpv2Atids = stpv2Atids
        self.stmAtids = stmAtids
        self.diagEntityId = diagEntityId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.stpv2Atids = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI16()
                        self.stpv2Atids.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.stmAtids = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI16()
                        self.stmAtids.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.diagEntityId = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readI16()
                        self.diagEntityId.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssConfiguration')
        if self.stpv2Atids is not None:
            oprot.writeFieldBegin('stpv2Atids', TType.LIST, 1)
            oprot.writeListBegin(TType.I16, len(self.stpv2Atids))
            for iter18 in self.stpv2Atids:
                oprot.writeI16(iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stmAtids is not None:
            oprot.writeFieldBegin('stmAtids', TType.LIST, 2)
            oprot.writeListBegin(TType.I16, len(self.stmAtids))
            for iter19 in self.stmAtids:
                oprot.writeI16(iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.diagEntityId is not None:
            oprot.writeFieldBegin('diagEntityId', TType.LIST, 3)
            oprot.writeListBegin(TType.I16, len(self.diagEntityId))
            for iter20 in self.diagEntityId:
                oprot.writeI16(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdplConfiguration(object):
    """
    Attributes:
     - generateAdplHdf

    """


    def __init__(self, generateAdplHdf=None,):
        self.generateAdplHdf = generateAdplHdf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.generateAdplHdf = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdplConfiguration')
        if self.generateAdplHdf is not None:
            oprot.writeFieldBegin('generateAdplHdf', TType.BOOL, 1)
            oprot.writeBool(self.generateAdplHdf)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConnectionOptions(object):
    """
    Attributes:
     - qdssConfiguration
     - adplConfiguration

    """


    def __init__(self, qdssConfiguration=None, adplConfiguration=None,):
        self.qdssConfiguration = qdssConfiguration
        self.adplConfiguration = adplConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.qdssConfiguration = QdssConfiguration()
                    self.qdssConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.adplConfiguration = AdplConfiguration()
                    self.adplConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ConnectionOptions')
        if self.qdssConfiguration is not None:
            oprot.writeFieldBegin('qdssConfiguration', TType.STRUCT, 1)
            self.qdssConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.adplConfiguration is not None:
            oprot.writeFieldBegin('adplConfiguration', TType.STRUCT, 2)
            self.adplConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(QdssConfiguration)
QdssConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'stpv2Atids', (TType.I16, None, False), None, ),  # 1
    (2, TType.LIST, 'stmAtids', (TType.I16, None, False), None, ),  # 2
    (3, TType.LIST, 'diagEntityId', (TType.I16, None, False), None, ),  # 3
)
all_structs.append(AdplConfiguration)
AdplConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'generateAdplHdf', None, None, ),  # 1
)
all_structs.append(ConnectionOptions)
ConnectionOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'qdssConfiguration', [QdssConfiguration, None], None, ),  # 1
    (2, TType.STRUCT, 'adplConfiguration', [AdplConfiguration, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
