#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes

from thrift.transport import TTransport
all_structs = []


class SysmonAverageMetric(object):
    """
    Attributes:
     - metricID
     - avgValue
     - maxValue

    """


    def __init__(self, metricID=None, avgValue=None, maxValue=None,):
        self.metricID = metricID
        self.avgValue = avgValue
        self.maxValue = maxValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.metricID = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.avgValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.maxValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SysmonAverageMetric')
        if self.metricID is not None:
            oprot.writeFieldBegin('metricID', TType.I64, 1)
            oprot.writeI64(self.metricID)
            oprot.writeFieldEnd()
        if self.avgValue is not None:
            oprot.writeFieldBegin('avgValue', TType.DOUBLE, 2)
            oprot.writeDouble(self.avgValue)
            oprot.writeFieldEnd()
        if self.maxValue is not None:
            oprot.writeFieldBegin('maxValue', TType.DOUBLE, 3)
            oprot.writeDouble(self.maxValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SysmonAverageProfilePacket(object):
    """
    Attributes:
     - totalPackets
     - Q6Core
     - startTime
     - endTime
     - totalTimeMs
     - activeTimeMs
     - idleTimeMs
     - powerCollapseTimeMs
     - totalMetrics
     - sysmonAverageMetricList

    """


    def __init__(self, totalPackets=None, Q6Core=None, startTime=None, endTime=None, totalTimeMs=None, activeTimeMs=None, idleTimeMs=None, powerCollapseTimeMs=None, totalMetrics=None, sysmonAverageMetricList=None,):
        self.totalPackets = totalPackets
        self.Q6Core = Q6Core
        self.startTime = startTime
        self.endTime = endTime
        self.totalTimeMs = totalTimeMs
        self.activeTimeMs = activeTimeMs
        self.idleTimeMs = idleTimeMs
        self.powerCollapseTimeMs = powerCollapseTimeMs
        self.totalMetrics = totalMetrics
        self.sysmonAverageMetricList = sysmonAverageMetricList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalPackets = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Q6Core = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.startTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.endTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.totalTimeMs = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.activeTimeMs = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.idleTimeMs = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.powerCollapseTimeMs = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.totalMetrics = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.sysmonAverageMetricList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = SysmonAverageMetric()
                        _elem5.read(iprot)
                        self.sysmonAverageMetricList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SysmonAverageProfilePacket')
        if self.totalPackets is not None:
            oprot.writeFieldBegin('totalPackets', TType.I64, 1)
            oprot.writeI64(self.totalPackets)
            oprot.writeFieldEnd()
        if self.Q6Core is not None:
            oprot.writeFieldBegin('Q6Core', TType.I32, 2)
            oprot.writeI32(self.Q6Core)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.DOUBLE, 3)
            oprot.writeDouble(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.DOUBLE, 4)
            oprot.writeDouble(self.endTime)
            oprot.writeFieldEnd()
        if self.totalTimeMs is not None:
            oprot.writeFieldBegin('totalTimeMs', TType.DOUBLE, 5)
            oprot.writeDouble(self.totalTimeMs)
            oprot.writeFieldEnd()
        if self.activeTimeMs is not None:
            oprot.writeFieldBegin('activeTimeMs', TType.DOUBLE, 6)
            oprot.writeDouble(self.activeTimeMs)
            oprot.writeFieldEnd()
        if self.idleTimeMs is not None:
            oprot.writeFieldBegin('idleTimeMs', TType.DOUBLE, 7)
            oprot.writeDouble(self.idleTimeMs)
            oprot.writeFieldEnd()
        if self.powerCollapseTimeMs is not None:
            oprot.writeFieldBegin('powerCollapseTimeMs', TType.DOUBLE, 8)
            oprot.writeDouble(self.powerCollapseTimeMs)
            oprot.writeFieldEnd()
        if self.totalMetrics is not None:
            oprot.writeFieldBegin('totalMetrics', TType.I64, 9)
            oprot.writeI64(self.totalMetrics)
            oprot.writeFieldEnd()
        if self.sysmonAverageMetricList is not None:
            oprot.writeFieldBegin('sysmonAverageMetricList', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.sysmonAverageMetricList))
            for iter6 in self.sysmonAverageMetricList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SysmonAverageProfileInput(object):
    """
    Attributes:
     - transactionId

    """


    def __init__(self, transactionId=None,):
        self.transactionId = transactionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.transactionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SysmonAverageProfileInput')
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.I32, 1)
            oprot.writeI32(self.transactionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingPacket(object):
    """
    Attributes:
     - protoBufPacket
     - qspsPacket

    """


    def __init__(self, protoBufPacket=None, qspsPacket=None,):
        self.protoBufPacket = protoBufPacket
        self.qspsPacket = qspsPacket

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.protoBufPacket = Common.ttypes.ProtoBufPacket()
                    self.protoBufPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.qspsPacket = Common.ttypes.QspsPacket()
                    self.qspsPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingPacket')
        if self.protoBufPacket is not None:
            oprot.writeFieldBegin('protoBufPacket', TType.STRUCT, 1)
            self.protoBufPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.qspsPacket is not None:
            oprot.writeFieldBegin('qspsPacket', TType.STRUCT, 2)
            self.qspsPacket.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingPacketFilter(object):
    """
    Attributes:
     - protoBufPacketFilter
     - qspsPacketFilter

    """


    def __init__(self, protoBufPacketFilter=None, qspsPacketFilter=None,):
        self.protoBufPacketFilter = protoBufPacketFilter
        self.qspsPacketFilter = qspsPacketFilter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.protoBufPacketFilter = Common.ttypes.ProtoBufPacketFilter()
                    self.protoBufPacketFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.qspsPacketFilter = Common.ttypes.QspsPacketFilter()
                    self.qspsPacketFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingPacketFilter')
        if self.protoBufPacketFilter is not None:
            oprot.writeFieldBegin('protoBufPacketFilter', TType.STRUCT, 1)
            self.protoBufPacketFilter.write(oprot)
            oprot.writeFieldEnd()
        if self.qspsPacketFilter is not None:
            oprot.writeFieldBegin('qspsPacketFilter', TType.STRUCT, 2)
            self.qspsPacketFilter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingReturnConfig(object):
    """
    Attributes:
     - protoBufReturnConfig
     - qspsReturnConfig

    """


    def __init__(self, protoBufReturnConfig=None, qspsReturnConfig=None,):
        self.protoBufReturnConfig = protoBufReturnConfig
        self.qspsReturnConfig = qspsReturnConfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.protoBufReturnConfig = Common.ttypes.ProtoBufReturnConfig()
                    self.protoBufReturnConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.qspsReturnConfig = Common.ttypes.QspsReturnConfig()
                    self.qspsReturnConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingReturnConfig')
        if self.protoBufReturnConfig is not None:
            oprot.writeFieldBegin('protoBufReturnConfig', TType.STRUCT, 1)
            self.protoBufReturnConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.qspsReturnConfig is not None:
            oprot.writeFieldBegin('qspsReturnConfig', TType.STRUCT, 2)
            self.qspsReturnConfig.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SysmonAverageMetric)
SysmonAverageMetric.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'metricID', None, None, ),  # 1
    (2, TType.DOUBLE, 'avgValue', None, None, ),  # 2
    (3, TType.DOUBLE, 'maxValue', None, None, ),  # 3
)
all_structs.append(SysmonAverageProfilePacket)
SysmonAverageProfilePacket.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalPackets', None, None, ),  # 1
    (2, TType.I32, 'Q6Core', None, None, ),  # 2
    (3, TType.DOUBLE, 'startTime', None, None, ),  # 3
    (4, TType.DOUBLE, 'endTime', None, None, ),  # 4
    (5, TType.DOUBLE, 'totalTimeMs', None, None, ),  # 5
    (6, TType.DOUBLE, 'activeTimeMs', None, None, ),  # 6
    (7, TType.DOUBLE, 'idleTimeMs', None, None, ),  # 7
    (8, TType.DOUBLE, 'powerCollapseTimeMs', None, None, ),  # 8
    (9, TType.I64, 'totalMetrics', None, None, ),  # 9
    (10, TType.LIST, 'sysmonAverageMetricList', (TType.STRUCT, [SysmonAverageMetric, None], False), None, ),  # 10
)
all_structs.append(SysmonAverageProfileInput)
SysmonAverageProfileInput.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'transactionId', None, None, ),  # 1
)
all_structs.append(ProfilingPacket)
ProfilingPacket.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'protoBufPacket', [Common.ttypes.ProtoBufPacket, None], None, ),  # 1
    (2, TType.STRUCT, 'qspsPacket', [Common.ttypes.QspsPacket, None], None, ),  # 2
)
all_structs.append(ProfilingPacketFilter)
ProfilingPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'protoBufPacketFilter', [Common.ttypes.ProtoBufPacketFilter, None], None, ),  # 1
    (2, TType.STRUCT, 'qspsPacketFilter', [Common.ttypes.QspsPacketFilter, None], None, ),  # 2
)
all_structs.append(ProfilingReturnConfig)
ProfilingReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'protoBufReturnConfig', [Common.ttypes.ProtoBufReturnConfig, None], None, ),  # 1
    (2, TType.STRUCT, 'qspsReturnConfig', [Common.ttypes.QspsReturnConfig, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
