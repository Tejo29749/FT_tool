#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from DeviceManager import DeviceManager
from DeviceManager.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ErrorType getLastError()')
    print('   getServicesList()')
    print('   getDevicesForService(string serviceName)')
    print('   getServicesForDevice(i64 deviceHandle)')
    print('  string createService(string serviceName, i64 deviceHandle)')
    print('  string createLogSessionService(string serviceName, string logSession, i64 deviceHandle)')
    print('   getDeviceList()')
    print('  i64 getDeviceHandleFromProtocol(i64 protocolHandle)')
    print('  ErrorCode mergeDevice(i64 sourceDeviceHandle, i64 destinationDeviceHandle)')
    print('  BuildInfo getDeviceBuildId(i64 deviceHandle)')
    print('   getDeviceImageInfoByProtocol(i64 protocolHandle)')
    print('  string getChipName(i64 deviceHandle, i64 protocolHandle)')
    print('  DeviceMode getDeviceMode(i64 deviceHandle)')
    print('   getProtocolList(i64 deviceHandle)')
    print('  string getActiveLogSession()')
    print('  ErrorCode removeDevice(i64 deviceHandle)')
    print('  ErrorCode overrideUnknownProtocol(i64 protocolHandle, ProtocolType newType)')
    print('  ProtocolInfo addTcpConnection(i64 deviceHandle, ProtocolType protocolType, bool bIsClient, string description, string host, i32 port)')
    print('  ProtocolInfo addTcpConnectionWithOptions(string host, i32 port, TcpOptions options)')
    print('  ErrorCode removeTcpConnection(i64 protocolHandle)')
    print('  ErrorCode startTcpServer(ProtocolType protocolType, i32 port)')
    print('  ErrorCode startTcpServerWithOptions(i32 port, TcpOptions options)')
    print('  ErrorCode stopTcpServer(i32 port)')
    print('   getTcpServerList()')
    print('  ErrorCode startLogging()')
    print('  ErrorCode resetLogFiles()')
    print('   saveLogFiles(string saveFolder)')
    print('   saveLogFilesWithFilenames( logNameConfig)')
    print('   saveLogFilesWithSettings( saveLogFileSettings)')
    print('  i64 getCurrentLogFileSize(i64 protocolHandle)')
    print('  string openLogSession( logFiles)')
    print('  string openLogSessionWithAdvanceOptions( logFiles, OpenFileOptions openFileOptions)')
    print('  string openLogSessionWithOptions(OpenFileOptionsCustom openFileOptions)')
    print('  ErrorCode mergeLogFiles( logFiles, string destinationFolder, string saveFileName, bool bUseDiagTimestamp)')
    print('  string attachToLogSession(i32 clientId, string logSession)')
    print('  ErrorCode logAnnotation(string annotation, i64 messageId, i64 protocolHandle)')
    print('  ErrorCode resetPhone(i64 deviceHandle, i32 resetTimeout)')
    print('  ErrorCode resetPhoneByProtocol(i64 deviceHandle, i64 protocolHandle, i32 resetTimeout)')
    print('  ErrorCode restartQmiReadyScan(i64 protocolHandle)')
    print('  ErrorCode setOperatingMode(i64 deviceHandle, i64 protocolHandle, OperatingMode mode)')
    print('  RxTxInfo getThroughputStatistics(i64 protocolHandle)')
    print('  i32 getEsn(i64 deviceHandle, i64 protocolHandle)')
    print('  ErrorCode setEsn(i64 deviceHandle, i64 protocolHandle, i32 esn)')
    print('  string getImei(i64 deviceHandle, i64 protocolHandle, i32 subscriptionId)')
    print('  ErrorCode setImei(i64 deviceHandle, i64 protocolHandle, string imei, i32 subscriptionId)')
    print('  i64 getMeid(i64 deviceHandle, i64 protocolHandle, i32 subscriptionId)')
    print('  ErrorCode setMeid(i64 deviceHandle, i64 protocolHandle, i64 meid, i32 subscriptionId)')
    print('  SpcStatus checkSpc(i64 deviceHandle, i64 protocolHandle, string spc)')
    print('  OperatingModeInfo getOperatingMode(i64 deviceHandle, i64 protocolHandle)')
    print('  ErrorCode transferImageBhi(string programmerPath)')
    print('  TransferFileResult transferFileToDevice(string hostPath, string devicePath, TransferFileOptions options)')
    print('  TransferFileResult transferFileToHost(string devicePath, string hostPath, TransferFileOptions options)')
    print('   getFileListFromDevice(string devicePath, TransferFileOptions options)')
    print('  LockStatus getProtocolLockStatus(i64 protocolHandle)')
    print('  UsageIndicators getDeviceUsageIndicators(i64 deviceHandle)')
    print('  ErrorCode enableFunctionLog(i64 deviceHandle,  areas, LogOptions options)')
    print('  ErrorCode disableFunctionLog(i64 deviceHandle,  areas)')
    print('  ErrorCode enableProtocolLog(i64 protocolHandle, LogOptions options)')
    print('  ErrorCode disableProtocolLog(i64 protocolHandle)')
    print('  ErrorCode configureProtocol(ProtocolConfiguration protocolConfiguration)')
    print('  ProtocolConfigurationResult getProtocolConfiguration(i64 protocolHandle)')
    print('  ErrorCode enableProtocolDataMonitoring( protocolHandleList, bool enable)')
    print('  ErrorCode enableDeviceDataMonitoring( deviceHandleList, bool enable)')
    print('  ErrorCode enableDevicePriority( deviceHandleList, bool enable)')
    print('  ErrorCode configParameter(string name, string value)')
    print('  i32 getRegistrationPort()')
    print('  ErrorCode exitQutsApplication()')
    print('  ErrorCode lockService(ServiceLockInfo lockInfo)')
    print('  ErrorCode unlockService(ServiceLockInfo lockInfo)')
    print('   getServiceLockInfo(ServiceLockInfo lockInfo)')
    print('  ErrorCode configLogOptions(bool status, LogOptions logOptions)')
    print('  DeviceQdssConfiguration getDeviceQdssConfiguration(QueryQdssConfiguration queryQdssInformation)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = DeviceManager.Client(protocol)
transport.open()

if cmd == 'getLastError':
    if len(args) != 0:
        print('getLastError requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastError())

elif cmd == 'getServicesList':
    if len(args) != 0:
        print('getServicesList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getServicesList())

elif cmd == 'getDevicesForService':
    if len(args) != 1:
        print('getDevicesForService requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDevicesForService(args[0],))

elif cmd == 'getServicesForDevice':
    if len(args) != 1:
        print('getServicesForDevice requires 1 args')
        sys.exit(1)
    pp.pprint(client.getServicesForDevice(eval(args[0]),))

elif cmd == 'createService':
    if len(args) != 2:
        print('createService requires 2 args')
        sys.exit(1)
    pp.pprint(client.createService(args[0], eval(args[1]),))

elif cmd == 'createLogSessionService':
    if len(args) != 3:
        print('createLogSessionService requires 3 args')
        sys.exit(1)
    pp.pprint(client.createLogSessionService(args[0], args[1], eval(args[2]),))

elif cmd == 'getDeviceList':
    if len(args) != 0:
        print('getDeviceList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getDeviceList())

elif cmd == 'getDeviceHandleFromProtocol':
    if len(args) != 1:
        print('getDeviceHandleFromProtocol requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDeviceHandleFromProtocol(eval(args[0]),))

elif cmd == 'mergeDevice':
    if len(args) != 2:
        print('mergeDevice requires 2 args')
        sys.exit(1)
    pp.pprint(client.mergeDevice(eval(args[0]), eval(args[1]),))

elif cmd == 'getDeviceBuildId':
    if len(args) != 1:
        print('getDeviceBuildId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDeviceBuildId(eval(args[0]),))

elif cmd == 'getDeviceImageInfoByProtocol':
    if len(args) != 1:
        print('getDeviceImageInfoByProtocol requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDeviceImageInfoByProtocol(eval(args[0]),))

elif cmd == 'getChipName':
    if len(args) != 2:
        print('getChipName requires 2 args')
        sys.exit(1)
    pp.pprint(client.getChipName(eval(args[0]), eval(args[1]),))

elif cmd == 'getDeviceMode':
    if len(args) != 1:
        print('getDeviceMode requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDeviceMode(eval(args[0]),))

elif cmd == 'getProtocolList':
    if len(args) != 1:
        print('getProtocolList requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProtocolList(eval(args[0]),))

elif cmd == 'getActiveLogSession':
    if len(args) != 0:
        print('getActiveLogSession requires 0 args')
        sys.exit(1)
    pp.pprint(client.getActiveLogSession())

elif cmd == 'removeDevice':
    if len(args) != 1:
        print('removeDevice requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeDevice(eval(args[0]),))

elif cmd == 'overrideUnknownProtocol':
    if len(args) != 2:
        print('overrideUnknownProtocol requires 2 args')
        sys.exit(1)
    pp.pprint(client.overrideUnknownProtocol(eval(args[0]), eval(args[1]),))

elif cmd == 'addTcpConnection':
    if len(args) != 6:
        print('addTcpConnection requires 6 args')
        sys.exit(1)
    pp.pprint(client.addTcpConnection(eval(args[0]), eval(args[1]), eval(args[2]), args[3], args[4], eval(args[5]),))

elif cmd == 'addTcpConnectionWithOptions':
    if len(args) != 3:
        print('addTcpConnectionWithOptions requires 3 args')
        sys.exit(1)
    pp.pprint(client.addTcpConnectionWithOptions(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'removeTcpConnection':
    if len(args) != 1:
        print('removeTcpConnection requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeTcpConnection(eval(args[0]),))

elif cmd == 'startTcpServer':
    if len(args) != 2:
        print('startTcpServer requires 2 args')
        sys.exit(1)
    pp.pprint(client.startTcpServer(eval(args[0]), eval(args[1]),))

elif cmd == 'startTcpServerWithOptions':
    if len(args) != 2:
        print('startTcpServerWithOptions requires 2 args')
        sys.exit(1)
    pp.pprint(client.startTcpServerWithOptions(eval(args[0]), eval(args[1]),))

elif cmd == 'stopTcpServer':
    if len(args) != 1:
        print('stopTcpServer requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopTcpServer(eval(args[0]),))

elif cmd == 'getTcpServerList':
    if len(args) != 0:
        print('getTcpServerList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getTcpServerList())

elif cmd == 'startLogging':
    if len(args) != 0:
        print('startLogging requires 0 args')
        sys.exit(1)
    pp.pprint(client.startLogging())

elif cmd == 'resetLogFiles':
    if len(args) != 0:
        print('resetLogFiles requires 0 args')
        sys.exit(1)
    pp.pprint(client.resetLogFiles())

elif cmd == 'saveLogFiles':
    if len(args) != 1:
        print('saveLogFiles requires 1 args')
        sys.exit(1)
    pp.pprint(client.saveLogFiles(args[0],))

elif cmd == 'saveLogFilesWithFilenames':
    if len(args) != 1:
        print('saveLogFilesWithFilenames requires 1 args')
        sys.exit(1)
    pp.pprint(client.saveLogFilesWithFilenames(eval(args[0]),))

elif cmd == 'saveLogFilesWithSettings':
    if len(args) != 1:
        print('saveLogFilesWithSettings requires 1 args')
        sys.exit(1)
    pp.pprint(client.saveLogFilesWithSettings(eval(args[0]),))

elif cmd == 'getCurrentLogFileSize':
    if len(args) != 1:
        print('getCurrentLogFileSize requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCurrentLogFileSize(eval(args[0]),))

elif cmd == 'openLogSession':
    if len(args) != 1:
        print('openLogSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.openLogSession(eval(args[0]),))

elif cmd == 'openLogSessionWithAdvanceOptions':
    if len(args) != 2:
        print('openLogSessionWithAdvanceOptions requires 2 args')
        sys.exit(1)
    pp.pprint(client.openLogSessionWithAdvanceOptions(eval(args[0]), eval(args[1]),))

elif cmd == 'openLogSessionWithOptions':
    if len(args) != 1:
        print('openLogSessionWithOptions requires 1 args')
        sys.exit(1)
    pp.pprint(client.openLogSessionWithOptions(eval(args[0]),))

elif cmd == 'mergeLogFiles':
    if len(args) != 4:
        print('mergeLogFiles requires 4 args')
        sys.exit(1)
    pp.pprint(client.mergeLogFiles(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'attachToLogSession':
    if len(args) != 2:
        print('attachToLogSession requires 2 args')
        sys.exit(1)
    pp.pprint(client.attachToLogSession(eval(args[0]), args[1],))

elif cmd == 'logAnnotation':
    if len(args) != 3:
        print('logAnnotation requires 3 args')
        sys.exit(1)
    pp.pprint(client.logAnnotation(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'resetPhone':
    if len(args) != 2:
        print('resetPhone requires 2 args')
        sys.exit(1)
    pp.pprint(client.resetPhone(eval(args[0]), eval(args[1]),))

elif cmd == 'resetPhoneByProtocol':
    if len(args) != 3:
        print('resetPhoneByProtocol requires 3 args')
        sys.exit(1)
    pp.pprint(client.resetPhoneByProtocol(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'restartQmiReadyScan':
    if len(args) != 1:
        print('restartQmiReadyScan requires 1 args')
        sys.exit(1)
    pp.pprint(client.restartQmiReadyScan(eval(args[0]),))

elif cmd == 'setOperatingMode':
    if len(args) != 3:
        print('setOperatingMode requires 3 args')
        sys.exit(1)
    pp.pprint(client.setOperatingMode(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getThroughputStatistics':
    if len(args) != 1:
        print('getThroughputStatistics requires 1 args')
        sys.exit(1)
    pp.pprint(client.getThroughputStatistics(eval(args[0]),))

elif cmd == 'getEsn':
    if len(args) != 2:
        print('getEsn requires 2 args')
        sys.exit(1)
    pp.pprint(client.getEsn(eval(args[0]), eval(args[1]),))

elif cmd == 'setEsn':
    if len(args) != 3:
        print('setEsn requires 3 args')
        sys.exit(1)
    pp.pprint(client.setEsn(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getImei':
    if len(args) != 3:
        print('getImei requires 3 args')
        sys.exit(1)
    pp.pprint(client.getImei(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'setImei':
    if len(args) != 4:
        print('setImei requires 4 args')
        sys.exit(1)
    pp.pprint(client.setImei(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'getMeid':
    if len(args) != 3:
        print('getMeid requires 3 args')
        sys.exit(1)
    pp.pprint(client.getMeid(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'setMeid':
    if len(args) != 4:
        print('setMeid requires 4 args')
        sys.exit(1)
    pp.pprint(client.setMeid(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'checkSpc':
    if len(args) != 3:
        print('checkSpc requires 3 args')
        sys.exit(1)
    pp.pprint(client.checkSpc(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getOperatingMode':
    if len(args) != 2:
        print('getOperatingMode requires 2 args')
        sys.exit(1)
    pp.pprint(client.getOperatingMode(eval(args[0]), eval(args[1]),))

elif cmd == 'transferImageBhi':
    if len(args) != 1:
        print('transferImageBhi requires 1 args')
        sys.exit(1)
    pp.pprint(client.transferImageBhi(args[0],))

elif cmd == 'transferFileToDevice':
    if len(args) != 3:
        print('transferFileToDevice requires 3 args')
        sys.exit(1)
    pp.pprint(client.transferFileToDevice(args[0], args[1], eval(args[2]),))

elif cmd == 'transferFileToHost':
    if len(args) != 3:
        print('transferFileToHost requires 3 args')
        sys.exit(1)
    pp.pprint(client.transferFileToHost(args[0], args[1], eval(args[2]),))

elif cmd == 'getFileListFromDevice':
    if len(args) != 2:
        print('getFileListFromDevice requires 2 args')
        sys.exit(1)
    pp.pprint(client.getFileListFromDevice(args[0], eval(args[1]),))

elif cmd == 'getProtocolLockStatus':
    if len(args) != 1:
        print('getProtocolLockStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProtocolLockStatus(eval(args[0]),))

elif cmd == 'getDeviceUsageIndicators':
    if len(args) != 1:
        print('getDeviceUsageIndicators requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDeviceUsageIndicators(eval(args[0]),))

elif cmd == 'enableFunctionLog':
    if len(args) != 3:
        print('enableFunctionLog requires 3 args')
        sys.exit(1)
    pp.pprint(client.enableFunctionLog(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'disableFunctionLog':
    if len(args) != 2:
        print('disableFunctionLog requires 2 args')
        sys.exit(1)
    pp.pprint(client.disableFunctionLog(eval(args[0]), eval(args[1]),))

elif cmd == 'enableProtocolLog':
    if len(args) != 2:
        print('enableProtocolLog requires 2 args')
        sys.exit(1)
    pp.pprint(client.enableProtocolLog(eval(args[0]), eval(args[1]),))

elif cmd == 'disableProtocolLog':
    if len(args) != 1:
        print('disableProtocolLog requires 1 args')
        sys.exit(1)
    pp.pprint(client.disableProtocolLog(eval(args[0]),))

elif cmd == 'configureProtocol':
    if len(args) != 1:
        print('configureProtocol requires 1 args')
        sys.exit(1)
    pp.pprint(client.configureProtocol(eval(args[0]),))

elif cmd == 'getProtocolConfiguration':
    if len(args) != 1:
        print('getProtocolConfiguration requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProtocolConfiguration(eval(args[0]),))

elif cmd == 'enableProtocolDataMonitoring':
    if len(args) != 2:
        print('enableProtocolDataMonitoring requires 2 args')
        sys.exit(1)
    pp.pprint(client.enableProtocolDataMonitoring(eval(args[0]), eval(args[1]),))

elif cmd == 'enableDeviceDataMonitoring':
    if len(args) != 2:
        print('enableDeviceDataMonitoring requires 2 args')
        sys.exit(1)
    pp.pprint(client.enableDeviceDataMonitoring(eval(args[0]), eval(args[1]),))

elif cmd == 'enableDevicePriority':
    if len(args) != 2:
        print('enableDevicePriority requires 2 args')
        sys.exit(1)
    pp.pprint(client.enableDevicePriority(eval(args[0]), eval(args[1]),))

elif cmd == 'configParameter':
    if len(args) != 2:
        print('configParameter requires 2 args')
        sys.exit(1)
    pp.pprint(client.configParameter(args[0], args[1],))

elif cmd == 'getRegistrationPort':
    if len(args) != 0:
        print('getRegistrationPort requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRegistrationPort())

elif cmd == 'exitQutsApplication':
    if len(args) != 0:
        print('exitQutsApplication requires 0 args')
        sys.exit(1)
    pp.pprint(client.exitQutsApplication())

elif cmd == 'lockService':
    if len(args) != 1:
        print('lockService requires 1 args')
        sys.exit(1)
    pp.pprint(client.lockService(eval(args[0]),))

elif cmd == 'unlockService':
    if len(args) != 1:
        print('unlockService requires 1 args')
        sys.exit(1)
    pp.pprint(client.unlockService(eval(args[0]),))

elif cmd == 'getServiceLockInfo':
    if len(args) != 1:
        print('getServiceLockInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getServiceLockInfo(eval(args[0]),))

elif cmd == 'configLogOptions':
    if len(args) != 2:
        print('configLogOptions requires 2 args')
        sys.exit(1)
    pp.pprint(client.configLogOptions(eval(args[0]), eval(args[1]),))

elif cmd == 'getDeviceQdssConfiguration':
    if len(args) != 1:
        print('getDeviceQdssConfiguration requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDeviceQdssConfiguration(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
