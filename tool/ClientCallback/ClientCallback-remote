#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ClientCallback import ClientCallback
from ClientCallback.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void onMessage(MessageLevel level, string location, string title, string description)')
    print('  void onDeviceConnected(DeviceInfo deviceInfo)')
    print('  void onDeviceDisconnected(DeviceInfo deviceInfo)')
    print('  void onDeviceModeChange(i64 deviceHandle, DeviceMode newMode)')
    print('  void onProtocolAdded(DeviceInfo deviceInfo, ProtocolInfo protocolInfo)')
    print('  void onProtocolRemoved(DeviceInfo deviceInfo, ProtocolInfo protocolInfo)')
    print('  void onProtocolStateChange(i64 protocolHandle, ProtocolState newState)')
    print('  void onProtocolFlowControlStatusChange(i64 protocolHandle, Direction dir, FlowControlStatus newStatus)')
    print('  void onProtocolLockStatusChange(i64 protocolHandle, LockStatus newStatus)')
    print('  void onProtocolMbnDownloadStatusChange(i64 protocolHandle, MbnDownloadStatus newStatus)')
    print('  void onClientCloseRequest(ClientCloseReason closeReason)')
    print('  void onMissingQShrinkHashFile(i64 protocolHandle, string missingFileGuid)')
    print('  void onLogSessionMissingQShrinkHashFile(string logSessionInstance, i64 protocolHandle, string missingFileGuid)')
    print('  void onAsyncResponse(i64 protocolHandle, i64 transactionId)')
    print('  void onDataQueueUpdated(string queueName, i32 queueSize)')
    print('  void onDataViewUpdated(string viewName, i32 viewSize, bool finished)')
    print('  void onServiceAvailable(string serviceName, i64 deviceHandle)')
    print('  void onServiceEnded(string serviceName, i64 deviceHandle)')
    print('  void onServiceEvent(string serviceName, i64 eventId, string eventDescription)')
    print('  void onImageManagementServiceEvent(string serviceName, i64 deviceHandle, i64 protocolHandle, i64 eventId, string eventDescription)')
    print('  void onDeviceConfigServiceEvent(string serviceName, i64 deviceHandle, i64 protocolHandle, i64 eventId, string eventDescription)')
    print('  void onQShrinkStateUpdated(i64 protocolHandle, QShrink4DownloadState newState)')
    print('  void onDecryptionKeyStatusUpdate(i64 protocolHandle, KeyInfo keyInfo)')
    print('  void onLogSessionDecryptionKeyStatusUpdate(string logSesssionInstance, i64 protocolHandle, KeyInfo keyInfo)')
    print('  void onServiceLockUpdate(ServiceLockInfo lockInfo, ServiceLockState lockState)')
    print('  void onRestrictedLogLicenseStatusUpdate(RestrictedLogLicenseInfo restrictedLogLicenseInfo)')
    print('  void onQspsMessage(ProfilerMessage profilerMessage)')
    print('  void onHyperVisorDataChanged(i64 protocolHandle, HypervisorConfiguration hyperVisorConfiguration)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ClientCallback.Client(protocol)
transport.open()

if cmd == 'onMessage':
    if len(args) != 4:
        print('onMessage requires 4 args')
        sys.exit(1)
    pp.pprint(client.onMessage(eval(args[0]), args[1], args[2], args[3],))

elif cmd == 'onDeviceConnected':
    if len(args) != 1:
        print('onDeviceConnected requires 1 args')
        sys.exit(1)
    pp.pprint(client.onDeviceConnected(eval(args[0]),))

elif cmd == 'onDeviceDisconnected':
    if len(args) != 1:
        print('onDeviceDisconnected requires 1 args')
        sys.exit(1)
    pp.pprint(client.onDeviceDisconnected(eval(args[0]),))

elif cmd == 'onDeviceModeChange':
    if len(args) != 2:
        print('onDeviceModeChange requires 2 args')
        sys.exit(1)
    pp.pprint(client.onDeviceModeChange(eval(args[0]), eval(args[1]),))

elif cmd == 'onProtocolAdded':
    if len(args) != 2:
        print('onProtocolAdded requires 2 args')
        sys.exit(1)
    pp.pprint(client.onProtocolAdded(eval(args[0]), eval(args[1]),))

elif cmd == 'onProtocolRemoved':
    if len(args) != 2:
        print('onProtocolRemoved requires 2 args')
        sys.exit(1)
    pp.pprint(client.onProtocolRemoved(eval(args[0]), eval(args[1]),))

elif cmd == 'onProtocolStateChange':
    if len(args) != 2:
        print('onProtocolStateChange requires 2 args')
        sys.exit(1)
    pp.pprint(client.onProtocolStateChange(eval(args[0]), eval(args[1]),))

elif cmd == 'onProtocolFlowControlStatusChange':
    if len(args) != 3:
        print('onProtocolFlowControlStatusChange requires 3 args')
        sys.exit(1)
    pp.pprint(client.onProtocolFlowControlStatusChange(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'onProtocolLockStatusChange':
    if len(args) != 2:
        print('onProtocolLockStatusChange requires 2 args')
        sys.exit(1)
    pp.pprint(client.onProtocolLockStatusChange(eval(args[0]), eval(args[1]),))

elif cmd == 'onProtocolMbnDownloadStatusChange':
    if len(args) != 2:
        print('onProtocolMbnDownloadStatusChange requires 2 args')
        sys.exit(1)
    pp.pprint(client.onProtocolMbnDownloadStatusChange(eval(args[0]), eval(args[1]),))

elif cmd == 'onClientCloseRequest':
    if len(args) != 1:
        print('onClientCloseRequest requires 1 args')
        sys.exit(1)
    pp.pprint(client.onClientCloseRequest(eval(args[0]),))

elif cmd == 'onMissingQShrinkHashFile':
    if len(args) != 2:
        print('onMissingQShrinkHashFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.onMissingQShrinkHashFile(eval(args[0]), args[1],))

elif cmd == 'onLogSessionMissingQShrinkHashFile':
    if len(args) != 3:
        print('onLogSessionMissingQShrinkHashFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.onLogSessionMissingQShrinkHashFile(args[0], eval(args[1]), args[2],))

elif cmd == 'onAsyncResponse':
    if len(args) != 2:
        print('onAsyncResponse requires 2 args')
        sys.exit(1)
    pp.pprint(client.onAsyncResponse(eval(args[0]), eval(args[1]),))

elif cmd == 'onDataQueueUpdated':
    if len(args) != 2:
        print('onDataQueueUpdated requires 2 args')
        sys.exit(1)
    pp.pprint(client.onDataQueueUpdated(args[0], eval(args[1]),))

elif cmd == 'onDataViewUpdated':
    if len(args) != 3:
        print('onDataViewUpdated requires 3 args')
        sys.exit(1)
    pp.pprint(client.onDataViewUpdated(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'onServiceAvailable':
    if len(args) != 2:
        print('onServiceAvailable requires 2 args')
        sys.exit(1)
    pp.pprint(client.onServiceAvailable(args[0], eval(args[1]),))

elif cmd == 'onServiceEnded':
    if len(args) != 2:
        print('onServiceEnded requires 2 args')
        sys.exit(1)
    pp.pprint(client.onServiceEnded(args[0], eval(args[1]),))

elif cmd == 'onServiceEvent':
    if len(args) != 3:
        print('onServiceEvent requires 3 args')
        sys.exit(1)
    pp.pprint(client.onServiceEvent(args[0], eval(args[1]), args[2],))

elif cmd == 'onImageManagementServiceEvent':
    if len(args) != 5:
        print('onImageManagementServiceEvent requires 5 args')
        sys.exit(1)
    pp.pprint(client.onImageManagementServiceEvent(args[0], eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'onDeviceConfigServiceEvent':
    if len(args) != 5:
        print('onDeviceConfigServiceEvent requires 5 args')
        sys.exit(1)
    pp.pprint(client.onDeviceConfigServiceEvent(args[0], eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'onQShrinkStateUpdated':
    if len(args) != 2:
        print('onQShrinkStateUpdated requires 2 args')
        sys.exit(1)
    pp.pprint(client.onQShrinkStateUpdated(eval(args[0]), eval(args[1]),))

elif cmd == 'onDecryptionKeyStatusUpdate':
    if len(args) != 2:
        print('onDecryptionKeyStatusUpdate requires 2 args')
        sys.exit(1)
    pp.pprint(client.onDecryptionKeyStatusUpdate(eval(args[0]), eval(args[1]),))

elif cmd == 'onLogSessionDecryptionKeyStatusUpdate':
    if len(args) != 3:
        print('onLogSessionDecryptionKeyStatusUpdate requires 3 args')
        sys.exit(1)
    pp.pprint(client.onLogSessionDecryptionKeyStatusUpdate(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'onServiceLockUpdate':
    if len(args) != 2:
        print('onServiceLockUpdate requires 2 args')
        sys.exit(1)
    pp.pprint(client.onServiceLockUpdate(eval(args[0]), eval(args[1]),))

elif cmd == 'onRestrictedLogLicenseStatusUpdate':
    if len(args) != 1:
        print('onRestrictedLogLicenseStatusUpdate requires 1 args')
        sys.exit(1)
    pp.pprint(client.onRestrictedLogLicenseStatusUpdate(eval(args[0]),))

elif cmd == 'onQspsMessage':
    if len(args) != 1:
        print('onQspsMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.onQspsMessage(eval(args[0]),))

elif cmd == 'onHyperVisorDataChanged':
    if len(args) != 2:
        print('onHyperVisorDataChanged requires 2 args')
        sys.exit(1)
    pp.pprint(client.onHyperVisorDataChanged(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
