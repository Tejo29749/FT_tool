#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from QmiService import QmiService
from QmiService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ErrorType getLastError()')
    print('  i64 getDevice()')
    print('  ErrorCode initializeService(string qmiServiceIdOrName)')
    print('  ErrorCode initializeServiceByProtocol(i64 qmiProtocolHandle, string qmiServiceIdOrName)')
    print('  ErrorCode destroyService()')
    print('  i32 getQmiServiceId()')
    print('  QmiPacket sendRequest(string messageIdOrName, string xmlDefinition, QmiReturns returnConfig, i32 timeout)')
    print('  i64 sendRequestAsync(string messageIdOrName, string xmlDefinition)')
    print('  QmiPacket sendRawRequest(string request, QmiReturns returnConfig, i32 timeout)')
    print('  i64 sendRawRequestAsync(string request)')
    print('  QmiPacket getResponseAsync(i64 transactionId, QmiReturns returnConfig, i32 timeout)')
    print('  ErrorCode createIndicationQueue(string queueName, QmiPacketFilter filter, QmiReturnConfig returnConfig)')
    print('  ErrorCode removeIndicationQueue(string queueName)')
    print('  ErrorCode clearIndicationQueue(string queueName)')
    print('   getIndications(string queueName, i32 count, i32 timeout)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = QmiService.Client(protocol)
transport.open()

if cmd == 'getLastError':
    if len(args) != 0:
        print('getLastError requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastError())

elif cmd == 'getDevice':
    if len(args) != 0:
        print('getDevice requires 0 args')
        sys.exit(1)
    pp.pprint(client.getDevice())

elif cmd == 'initializeService':
    if len(args) != 1:
        print('initializeService requires 1 args')
        sys.exit(1)
    pp.pprint(client.initializeService(args[0],))

elif cmd == 'initializeServiceByProtocol':
    if len(args) != 2:
        print('initializeServiceByProtocol requires 2 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceByProtocol(eval(args[0]), args[1],))

elif cmd == 'destroyService':
    if len(args) != 0:
        print('destroyService requires 0 args')
        sys.exit(1)
    pp.pprint(client.destroyService())

elif cmd == 'getQmiServiceId':
    if len(args) != 0:
        print('getQmiServiceId requires 0 args')
        sys.exit(1)
    pp.pprint(client.getQmiServiceId())

elif cmd == 'sendRequest':
    if len(args) != 4:
        print('sendRequest requires 4 args')
        sys.exit(1)
    pp.pprint(client.sendRequest(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'sendRequestAsync':
    if len(args) != 2:
        print('sendRequestAsync requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendRequestAsync(args[0], args[1],))

elif cmd == 'sendRawRequest':
    if len(args) != 3:
        print('sendRawRequest requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendRawRequest(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'sendRawRequestAsync':
    if len(args) != 1:
        print('sendRawRequestAsync requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendRawRequestAsync(args[0],))

elif cmd == 'getResponseAsync':
    if len(args) != 3:
        print('getResponseAsync requires 3 args')
        sys.exit(1)
    pp.pprint(client.getResponseAsync(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'createIndicationQueue':
    if len(args) != 3:
        print('createIndicationQueue requires 3 args')
        sys.exit(1)
    pp.pprint(client.createIndicationQueue(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'removeIndicationQueue':
    if len(args) != 1:
        print('removeIndicationQueue requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeIndicationQueue(args[0],))

elif cmd == 'clearIndicationQueue':
    if len(args) != 1:
        print('clearIndicationQueue requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearIndicationQueue(args[0],))

elif cmd == 'getIndications':
    if len(args) != 3:
        print('getIndications requires 3 args')
        sys.exit(1)
    pp.pprint(client.getIndications(args[0], eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
