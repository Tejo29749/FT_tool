#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes

from thrift.transport import TTransport
all_structs = []


class OperatingMode(object):
    MODE_NONE = -1
    OFFLINE_ANALOG = 0
    OFFLINE_DIGITAL = 1
    OFFLINE_FACTORY_TEST = 3
    ONLINE = 4
    LOW_POWER = 5
    POWER_OFF = 6
    OFFLINE = 7
    RESET = 8
    NET_TEST_GW = 9
    OFFLINE_IF_NOT_FTM = 10
    ONLINE_TX_DISABLED = 11

    _VALUES_TO_NAMES = {
        -1: "MODE_NONE",
        0: "OFFLINE_ANALOG",
        1: "OFFLINE_DIGITAL",
        3: "OFFLINE_FACTORY_TEST",
        4: "ONLINE",
        5: "LOW_POWER",
        6: "POWER_OFF",
        7: "OFFLINE",
        8: "RESET",
        9: "NET_TEST_GW",
        10: "OFFLINE_IF_NOT_FTM",
        11: "ONLINE_TX_DISABLED",
    }

    _NAMES_TO_VALUES = {
        "MODE_NONE": -1,
        "OFFLINE_ANALOG": 0,
        "OFFLINE_DIGITAL": 1,
        "OFFLINE_FACTORY_TEST": 3,
        "ONLINE": 4,
        "LOW_POWER": 5,
        "POWER_OFF": 6,
        "OFFLINE": 7,
        "RESET": 8,
        "NET_TEST_GW": 9,
        "OFFLINE_IF_NOT_FTM": 10,
        "ONLINE_TX_DISABLED": 11,
    }


class OperatingModeInfo(object):
    """
    Attributes:
     - errorType
     - operatingMode

    """


    def __init__(self, errorType=None, operatingMode=None,):
        self.errorType = errorType
        self.operatingMode = operatingMode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.operatingMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OperatingModeInfo')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.operatingMode is not None:
            oprot.writeFieldBegin('operatingMode', TType.I32, 2)
            oprot.writeI32(self.operatingMode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SpcStatus(object):
    """
    Attributes:
     - errorType
     - status

    """


    def __init__(self, errorType=None, status=None,):
        self.errorType = errorType
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SpcStatus')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 2)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SaveLogFileSettings(object):
    """
    Attributes:
     - targetFilePath
     - protocolHandle
     - protocolDescription

    """


    def __init__(self, targetFilePath=None, protocolHandle=None, protocolDescription=None,):
        self.targetFilePath = targetFilePath
        self.protocolHandle = protocolHandle
        self.protocolDescription = protocolDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.targetFilePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.protocolDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SaveLogFileSettings')
        if self.targetFilePath is not None:
            oprot.writeFieldBegin('targetFilePath', TType.STRING, 1)
            oprot.writeString(self.targetFilePath.encode('utf-8') if sys.version_info[0] == 2 else self.targetFilePath)
            oprot.writeFieldEnd()
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 2)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.protocolDescription is not None:
            oprot.writeFieldBegin('protocolDescription', TType.STRING, 3)
            oprot.writeString(self.protocolDescription.encode('utf-8') if sys.version_info[0] == 2 else self.protocolDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FtraceConfiguration(object):
    """
    Attributes:
     - formatDefinition

    """


    def __init__(self, formatDefinition=None,):
        self.formatDefinition = formatDefinition

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.formatDefinition = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FtraceConfiguration')
        if self.formatDefinition is not None:
            oprot.writeFieldBegin('formatDefinition', TType.STRING, 1)
            oprot.writeString(self.formatDefinition.encode('utf-8') if sys.version_info[0] == 2 else self.formatDefinition)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssOpenFileOptions(object):
    """
    Attributes:
     - generateDiagHDF
     - generateQdssHDF
     - waitForSyncPacket
     - atIdConfigurationJson
     - eventConfigurationJson
     - ftraceConfiguration

    """


    def __init__(self, generateDiagHDF=None, generateQdssHDF=None, waitForSyncPacket=None, atIdConfigurationJson=None, eventConfigurationJson=None, ftraceConfiguration=None,):
        self.generateDiagHDF = generateDiagHDF
        self.generateQdssHDF = generateQdssHDF
        self.waitForSyncPacket = waitForSyncPacket
        self.atIdConfigurationJson = atIdConfigurationJson
        self.eventConfigurationJson = eventConfigurationJson
        self.ftraceConfiguration = ftraceConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.generateDiagHDF = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.generateQdssHDF = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.waitForSyncPacket = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.atIdConfigurationJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.eventConfigurationJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.ftraceConfiguration = FtraceConfiguration()
                    self.ftraceConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssOpenFileOptions')
        if self.generateDiagHDF is not None:
            oprot.writeFieldBegin('generateDiagHDF', TType.BOOL, 1)
            oprot.writeBool(self.generateDiagHDF)
            oprot.writeFieldEnd()
        if self.generateQdssHDF is not None:
            oprot.writeFieldBegin('generateQdssHDF', TType.BOOL, 2)
            oprot.writeBool(self.generateQdssHDF)
            oprot.writeFieldEnd()
        if self.waitForSyncPacket is not None:
            oprot.writeFieldBegin('waitForSyncPacket', TType.BOOL, 3)
            oprot.writeBool(self.waitForSyncPacket)
            oprot.writeFieldEnd()
        if self.atIdConfigurationJson is not None:
            oprot.writeFieldBegin('atIdConfigurationJson', TType.STRING, 4)
            oprot.writeString(self.atIdConfigurationJson.encode('utf-8') if sys.version_info[0] == 2 else self.atIdConfigurationJson)
            oprot.writeFieldEnd()
        if self.eventConfigurationJson is not None:
            oprot.writeFieldBegin('eventConfigurationJson', TType.STRING, 5)
            oprot.writeString(self.eventConfigurationJson.encode('utf-8') if sys.version_info[0] == 2 else self.eventConfigurationJson)
            oprot.writeFieldEnd()
        if self.ftraceConfiguration is not None:
            oprot.writeFieldBegin('ftraceConfiguration', TType.STRUCT, 6)
            self.ftraceConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdplOpenFileOptions(object):
    """
    Attributes:
     - generateDiagHDF
     - generateAdplHDF

    """


    def __init__(self, generateDiagHDF=None, generateAdplHDF=None,):
        self.generateDiagHDF = generateDiagHDF
        self.generateAdplHDF = generateAdplHDF

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.generateDiagHDF = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.generateAdplHDF = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdplOpenFileOptions')
        if self.generateDiagHDF is not None:
            oprot.writeFieldBegin('generateDiagHDF', TType.BOOL, 1)
            oprot.writeBool(self.generateDiagHDF)
            oprot.writeFieldEnd()
        if self.generateAdplHDF is not None:
            oprot.writeFieldBegin('generateAdplHDF', TType.BOOL, 2)
            oprot.writeBool(self.generateAdplHDF)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QspsQpbinOpenFileOptions(object):
    """
    Attributes:
     - capabilityName
     - profilingAnalysisType
     - rooflineCategory
     - applicationPath
     - applicationArguments
     - filePath

    """


    def __init__(self, capabilityName=None, profilingAnalysisType=None, rooflineCategory=None, applicationPath=None, applicationArguments=None, filePath=None,):
        self.capabilityName = capabilityName
        self.profilingAnalysisType = profilingAnalysisType
        self.rooflineCategory = rooflineCategory
        self.applicationPath = applicationPath
        self.applicationArguments = applicationArguments
        self.filePath = filePath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.profilingAnalysisType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.rooflineCategory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.applicationPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.applicationArguments = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.filePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QspsQpbinOpenFileOptions')
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 1)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.profilingAnalysisType is not None:
            oprot.writeFieldBegin('profilingAnalysisType', TType.I32, 2)
            oprot.writeI32(self.profilingAnalysisType)
            oprot.writeFieldEnd()
        if self.rooflineCategory is not None:
            oprot.writeFieldBegin('rooflineCategory', TType.I32, 3)
            oprot.writeI32(self.rooflineCategory)
            oprot.writeFieldEnd()
        if self.applicationPath is not None:
            oprot.writeFieldBegin('applicationPath', TType.STRING, 4)
            oprot.writeString(self.applicationPath.encode('utf-8') if sys.version_info[0] == 2 else self.applicationPath)
            oprot.writeFieldEnd()
        if self.applicationArguments is not None:
            oprot.writeFieldBegin('applicationArguments', TType.STRING, 5)
            oprot.writeString(self.applicationArguments.encode('utf-8') if sys.version_info[0] == 2 else self.applicationArguments)
            oprot.writeFieldEnd()
        if self.filePath is not None:
            oprot.writeFieldBegin('filePath', TType.STRING, 6)
            oprot.writeString(self.filePath.encode('utf-8') if sys.version_info[0] == 2 else self.filePath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FileTypeOpenOptions(object):
    """
    Attributes:
     - adplOpenFileOptions
     - qdssOpenFileOptions
     - qspsQpbinOpenFileOptions

    """


    def __init__(self, adplOpenFileOptions=None, qdssOpenFileOptions=None, qspsQpbinOpenFileOptions=None,):
        self.adplOpenFileOptions = adplOpenFileOptions
        self.qdssOpenFileOptions = qdssOpenFileOptions
        self.qspsQpbinOpenFileOptions = qspsQpbinOpenFileOptions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.adplOpenFileOptions = AdplOpenFileOptions()
                    self.adplOpenFileOptions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.qdssOpenFileOptions = QdssOpenFileOptions()
                    self.qdssOpenFileOptions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.qspsQpbinOpenFileOptions = QspsQpbinOpenFileOptions()
                    self.qspsQpbinOpenFileOptions.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FileTypeOpenOptions')
        if self.adplOpenFileOptions is not None:
            oprot.writeFieldBegin('adplOpenFileOptions', TType.STRUCT, 1)
            self.adplOpenFileOptions.write(oprot)
            oprot.writeFieldEnd()
        if self.qdssOpenFileOptions is not None:
            oprot.writeFieldBegin('qdssOpenFileOptions', TType.STRUCT, 2)
            self.qdssOpenFileOptions.write(oprot)
            oprot.writeFieldEnd()
        if self.qspsQpbinOpenFileOptions is not None:
            oprot.writeFieldBegin('qspsQpbinOpenFileOptions', TType.STRUCT, 3)
            self.qspsQpbinOpenFileOptions.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OpenFileOptions(object):
    """
    Attributes:
     - fileTypeOpenOptions

    """


    def __init__(self, fileTypeOpenOptions=None,):
        self.fileTypeOpenOptions = fileTypeOpenOptions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.fileTypeOpenOptions = FileTypeOpenOptions()
                    self.fileTypeOpenOptions.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpenFileOptions')
        if self.fileTypeOpenOptions is not None:
            oprot.writeFieldBegin('fileTypeOpenOptions', TType.STRUCT, 1)
            self.fileTypeOpenOptions.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OpenFileOptionsCustom(object):
    """
    Attributes:
     - qspsQpbinOpenFileOptionsList
     - combineQspsFiles

    """


    def __init__(self, qspsQpbinOpenFileOptionsList=None, combineQspsFiles=None,):
        self.qspsQpbinOpenFileOptionsList = qspsQpbinOpenFileOptionsList
        self.combineQspsFiles = combineQspsFiles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.qspsQpbinOpenFileOptionsList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = QspsQpbinOpenFileOptions()
                        _elem5.read(iprot)
                        self.qspsQpbinOpenFileOptionsList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.combineQspsFiles = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpenFileOptionsCustom')
        if self.qspsQpbinOpenFileOptionsList is not None:
            oprot.writeFieldBegin('qspsQpbinOpenFileOptionsList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.qspsQpbinOpenFileOptionsList))
            for iter6 in self.qspsQpbinOpenFileOptionsList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.combineQspsFiles is not None:
            oprot.writeFieldBegin('combineQspsFiles', TType.BOOL, 2)
            oprot.writeBool(self.combineQspsFiles)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HardwareAccelerationQdssConfiguration(object):
    """
    Attributes:
     - atbDiagIdEnabled
     - stmDiagIdMask
     - stmDiagIdEnabled
     - processorsStreamingDiagOverATB
     - processorsStreamingDiagOverSTM

    """


    def __init__(self, atbDiagIdEnabled=None, stmDiagIdMask=None, stmDiagIdEnabled=None, processorsStreamingDiagOverATB=None, processorsStreamingDiagOverSTM=None,):
        self.atbDiagIdEnabled = atbDiagIdEnabled
        self.stmDiagIdMask = stmDiagIdMask
        self.stmDiagIdEnabled = stmDiagIdEnabled
        self.processorsStreamingDiagOverATB = processorsStreamingDiagOverATB
        self.processorsStreamingDiagOverSTM = processorsStreamingDiagOverSTM

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.atbDiagIdEnabled = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.stmDiagIdMask = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.stmDiagIdEnabled = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.processorsStreamingDiagOverATB = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.processorsStreamingDiagOverATB.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.processorsStreamingDiagOverSTM = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.processorsStreamingDiagOverSTM.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HardwareAccelerationQdssConfiguration')
        if self.atbDiagIdEnabled is not None:
            oprot.writeFieldBegin('atbDiagIdEnabled', TType.I32, 1)
            oprot.writeI32(self.atbDiagIdEnabled)
            oprot.writeFieldEnd()
        if self.stmDiagIdMask is not None:
            oprot.writeFieldBegin('stmDiagIdMask', TType.I32, 2)
            oprot.writeI32(self.stmDiagIdMask)
            oprot.writeFieldEnd()
        if self.stmDiagIdEnabled is not None:
            oprot.writeFieldBegin('stmDiagIdEnabled', TType.I32, 3)
            oprot.writeI32(self.stmDiagIdEnabled)
            oprot.writeFieldEnd()
        if self.processorsStreamingDiagOverATB is not None:
            oprot.writeFieldBegin('processorsStreamingDiagOverATB', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.processorsStreamingDiagOverATB))
            for iter19 in self.processorsStreamingDiagOverATB:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.processorsStreamingDiagOverSTM is not None:
            oprot.writeFieldBegin('processorsStreamingDiagOverSTM', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.processorsStreamingDiagOverSTM))
            for iter20 in self.processorsStreamingDiagOverSTM:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LegacyQdssConfiguration(object):
    """
    Attributes:
     - stmSupportedMask
     - stmStatusMask
     - qdssDiagVersion
     - processorsStreamingDiagOverSTM

    """


    def __init__(self, stmSupportedMask=None, stmStatusMask=None, qdssDiagVersion=None, processorsStreamingDiagOverSTM=None,):
        self.stmSupportedMask = stmSupportedMask
        self.stmStatusMask = stmStatusMask
        self.qdssDiagVersion = qdssDiagVersion
        self.processorsStreamingDiagOverSTM = processorsStreamingDiagOverSTM

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.stmSupportedMask = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.stmStatusMask = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.qdssDiagVersion = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.processorsStreamingDiagOverSTM = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.processorsStreamingDiagOverSTM.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LegacyQdssConfiguration')
        if self.stmSupportedMask is not None:
            oprot.writeFieldBegin('stmSupportedMask', TType.I32, 1)
            oprot.writeI32(self.stmSupportedMask)
            oprot.writeFieldEnd()
        if self.stmStatusMask is not None:
            oprot.writeFieldBegin('stmStatusMask', TType.I32, 2)
            oprot.writeI32(self.stmStatusMask)
            oprot.writeFieldEnd()
        if self.qdssDiagVersion is not None:
            oprot.writeFieldBegin('qdssDiagVersion', TType.BYTE, 3)
            oprot.writeByte(self.qdssDiagVersion)
            oprot.writeFieldEnd()
        if self.processorsStreamingDiagOverSTM is not None:
            oprot.writeFieldBegin('processorsStreamingDiagOverSTM', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.processorsStreamingDiagOverSTM))
            for iter27 in self.processorsStreamingDiagOverSTM:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagOverQdssConfiguration(object):
    """
    Attributes:
     - protocolHandle
     - hardwareAccelerationEnabled
     - legacyQdssEnabled
     - traceSink
     - hardwareAccelerationQdssConfiguration
     - legacyQdssConfiguration
     - diagDescription
     - qdssDescription

    """


    def __init__(self, protocolHandle=None, hardwareAccelerationEnabled=None, legacyQdssEnabled=None, traceSink=None, hardwareAccelerationQdssConfiguration=None, legacyQdssConfiguration=None, diagDescription=None, qdssDescription=None,):
        self.protocolHandle = protocolHandle
        self.hardwareAccelerationEnabled = hardwareAccelerationEnabled
        self.legacyQdssEnabled = legacyQdssEnabled
        self.traceSink = traceSink
        self.hardwareAccelerationQdssConfiguration = hardwareAccelerationQdssConfiguration
        self.legacyQdssConfiguration = legacyQdssConfiguration
        self.diagDescription = diagDescription
        self.qdssDescription = qdssDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hardwareAccelerationEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.legacyQdssEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.traceSink = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.hardwareAccelerationQdssConfiguration = HardwareAccelerationQdssConfiguration()
                    self.hardwareAccelerationQdssConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.legacyQdssConfiguration = LegacyQdssConfiguration()
                    self.legacyQdssConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.diagDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.qdssDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagOverQdssConfiguration')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.hardwareAccelerationEnabled is not None:
            oprot.writeFieldBegin('hardwareAccelerationEnabled', TType.BOOL, 2)
            oprot.writeBool(self.hardwareAccelerationEnabled)
            oprot.writeFieldEnd()
        if self.legacyQdssEnabled is not None:
            oprot.writeFieldBegin('legacyQdssEnabled', TType.BOOL, 3)
            oprot.writeBool(self.legacyQdssEnabled)
            oprot.writeFieldEnd()
        if self.traceSink is not None:
            oprot.writeFieldBegin('traceSink', TType.BYTE, 4)
            oprot.writeByte(self.traceSink)
            oprot.writeFieldEnd()
        if self.hardwareAccelerationQdssConfiguration is not None:
            oprot.writeFieldBegin('hardwareAccelerationQdssConfiguration', TType.STRUCT, 5)
            self.hardwareAccelerationQdssConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.legacyQdssConfiguration is not None:
            oprot.writeFieldBegin('legacyQdssConfiguration', TType.STRUCT, 6)
            self.legacyQdssConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.diagDescription is not None:
            oprot.writeFieldBegin('diagDescription', TType.STRING, 7)
            oprot.writeString(self.diagDescription.encode('utf-8') if sys.version_info[0] == 2 else self.diagDescription)
            oprot.writeFieldEnd()
        if self.qdssDescription is not None:
            oprot.writeFieldBegin('qdssDescription', TType.STRING, 8)
            oprot.writeString(self.qdssDescription.encode('utf-8') if sys.version_info[0] == 2 else self.qdssDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeviceQdssConfiguration(object):
    """
    Attributes:
     - diagOverQdssConfiguration

    """


    def __init__(self, diagOverQdssConfiguration=None,):
        self.diagOverQdssConfiguration = diagOverQdssConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.diagOverQdssConfiguration = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = DiagOverQdssConfiguration()
                        _elem33.read(iprot)
                        self.diagOverQdssConfiguration.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeviceQdssConfiguration')
        if self.diagOverQdssConfiguration is not None:
            oprot.writeFieldBegin('diagOverQdssConfiguration', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.diagOverQdssConfiguration))
            for iter34 in self.diagOverQdssConfiguration:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryQdssConfiguration(object):
    """
    Attributes:
     - protocolHandle
     - deviceHandle

    """


    def __init__(self, protocolHandle=None, deviceHandle=None,):
        self.protocolHandle = protocolHandle
        self.deviceHandle = deviceHandle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.deviceHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QueryQdssConfiguration')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.deviceHandle is not None:
            oprot.writeFieldBegin('deviceHandle', TType.I64, 2)
            oprot.writeI64(self.deviceHandle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(OperatingModeInfo)
OperatingModeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'errorType', [Common.ttypes.ErrorType, None], None, ),  # 1
    (2, TType.I32, 'operatingMode', None, None, ),  # 2
)
all_structs.append(SpcStatus)
SpcStatus.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'errorType', [Common.ttypes.ErrorType, None], None, ),  # 1
    (2, TType.BOOL, 'status', None, None, ),  # 2
)
all_structs.append(SaveLogFileSettings)
SaveLogFileSettings.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'targetFilePath', 'UTF8', None, ),  # 1
    (2, TType.I64, 'protocolHandle', None, None, ),  # 2
    (3, TType.STRING, 'protocolDescription', 'UTF8', None, ),  # 3
)
all_structs.append(FtraceConfiguration)
FtraceConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'formatDefinition', 'UTF8', None, ),  # 1
)
all_structs.append(QdssOpenFileOptions)
QdssOpenFileOptions.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'generateDiagHDF', None, None, ),  # 1
    (2, TType.BOOL, 'generateQdssHDF', None, None, ),  # 2
    (3, TType.BOOL, 'waitForSyncPacket', None, None, ),  # 3
    (4, TType.STRING, 'atIdConfigurationJson', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'eventConfigurationJson', 'UTF8', None, ),  # 5
    (6, TType.STRUCT, 'ftraceConfiguration', [FtraceConfiguration, None], None, ),  # 6
)
all_structs.append(AdplOpenFileOptions)
AdplOpenFileOptions.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'generateDiagHDF', None, None, ),  # 1
    (2, TType.BOOL, 'generateAdplHDF', None, None, ),  # 2
)
all_structs.append(QspsQpbinOpenFileOptions)
QspsQpbinOpenFileOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'profilingAnalysisType', None, None, ),  # 2
    (3, TType.I32, 'rooflineCategory', None, None, ),  # 3
    (4, TType.STRING, 'applicationPath', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'applicationArguments', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'filePath', 'UTF8', None, ),  # 6
)
all_structs.append(FileTypeOpenOptions)
FileTypeOpenOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'adplOpenFileOptions', [AdplOpenFileOptions, None], None, ),  # 1
    (2, TType.STRUCT, 'qdssOpenFileOptions', [QdssOpenFileOptions, None], None, ),  # 2
    (3, TType.STRUCT, 'qspsQpbinOpenFileOptions', [QspsQpbinOpenFileOptions, None], None, ),  # 3
)
all_structs.append(OpenFileOptions)
OpenFileOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'fileTypeOpenOptions', [FileTypeOpenOptions, None], None, ),  # 1
)
all_structs.append(OpenFileOptionsCustom)
OpenFileOptionsCustom.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'qspsQpbinOpenFileOptionsList', (TType.STRUCT, [QspsQpbinOpenFileOptions, None], False), None, ),  # 1
    (2, TType.BOOL, 'combineQspsFiles', None, None, ),  # 2
)
all_structs.append(HardwareAccelerationQdssConfiguration)
HardwareAccelerationQdssConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'atbDiagIdEnabled', None, None, ),  # 1
    (2, TType.I32, 'stmDiagIdMask', None, None, ),  # 2
    (3, TType.I32, 'stmDiagIdEnabled', None, None, ),  # 3
    (4, TType.LIST, 'processorsStreamingDiagOverATB', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'processorsStreamingDiagOverSTM', (TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(LegacyQdssConfiguration)
LegacyQdssConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'stmSupportedMask', None, None, ),  # 1
    (2, TType.I32, 'stmStatusMask', None, None, ),  # 2
    (3, TType.BYTE, 'qdssDiagVersion', None, None, ),  # 3
    (4, TType.LIST, 'processorsStreamingDiagOverSTM', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(DiagOverQdssConfiguration)
DiagOverQdssConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
    (2, TType.BOOL, 'hardwareAccelerationEnabled', None, None, ),  # 2
    (3, TType.BOOL, 'legacyQdssEnabled', None, None, ),  # 3
    (4, TType.BYTE, 'traceSink', None, None, ),  # 4
    (5, TType.STRUCT, 'hardwareAccelerationQdssConfiguration', [HardwareAccelerationQdssConfiguration, None], None, ),  # 5
    (6, TType.STRUCT, 'legacyQdssConfiguration', [LegacyQdssConfiguration, None], None, ),  # 6
    (7, TType.STRING, 'diagDescription', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'qdssDescription', 'UTF8', None, ),  # 8
)
all_structs.append(DeviceQdssConfiguration)
DeviceQdssConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'diagOverQdssConfiguration', (TType.STRUCT, [DiagOverQdssConfiguration, None], False), None, ),  # 1
)
all_structs.append(QueryQdssConfiguration)
QueryQdssConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
    (2, TType.I64, 'deviceHandle', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
