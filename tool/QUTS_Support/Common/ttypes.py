#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ErrorCode(object):
    DEVICE_NO_ERROR = 0
    DEVICE_UNKNOWN_ERROR = 1
    DEVICE_INVALID_PARAMETERS = 2
    DEVICE_PERMISSIONS_ERROR = 3
    DEVICE_INVALID_DEVICE_HANDLE = 4
    DEVICE_INVALID_PROTOCOL_HANDLE = 5
    DEVICE_INVALID_CONNECTION_HANDLE = 6
    DEVICE_CONNECTION_LOCKED = 7
    DEVICE_DISCONNECTED = 8
    DEVICE_PROTOCOL_INVALID = 9
    DEVICE_PROTOCOL_DISCONNECTED = 10
    DEVICE_PROTOCOL_UNRESPONSIVE = 11
    DEVICE_TX_CANCELLED = 12
    DEVICE_TIMEOUT = 13
    DEVICE_INVALID_PROCESSOR = 14
    DEVICE_INVALID_PACKET = 15
    DEVICE_RESPONSE_ERROR = 16
    DEVICE_INVALID_LOG_SESSION = 17
    DEVICE_SERVICE_NOT_INITIALIZED = 18
    DEVICE_TCP_PORT_FAILURE = 19
    DEVICE_SERVICE_ALREADY_INITIALIZED = 20
    DEVICE_LICENSE_ERROR = 21
    DEVICE_OTP_PROGRAMED = 22
    DEVICE_DECRYPTION_FAILED = 23
    DEVICE_SERVICE_LOCKED = 24

    _VALUES_TO_NAMES = {
        0: "DEVICE_NO_ERROR",
        1: "DEVICE_UNKNOWN_ERROR",
        2: "DEVICE_INVALID_PARAMETERS",
        3: "DEVICE_PERMISSIONS_ERROR",
        4: "DEVICE_INVALID_DEVICE_HANDLE",
        5: "DEVICE_INVALID_PROTOCOL_HANDLE",
        6: "DEVICE_INVALID_CONNECTION_HANDLE",
        7: "DEVICE_CONNECTION_LOCKED",
        8: "DEVICE_DISCONNECTED",
        9: "DEVICE_PROTOCOL_INVALID",
        10: "DEVICE_PROTOCOL_DISCONNECTED",
        11: "DEVICE_PROTOCOL_UNRESPONSIVE",
        12: "DEVICE_TX_CANCELLED",
        13: "DEVICE_TIMEOUT",
        14: "DEVICE_INVALID_PROCESSOR",
        15: "DEVICE_INVALID_PACKET",
        16: "DEVICE_RESPONSE_ERROR",
        17: "DEVICE_INVALID_LOG_SESSION",
        18: "DEVICE_SERVICE_NOT_INITIALIZED",
        19: "DEVICE_TCP_PORT_FAILURE",
        20: "DEVICE_SERVICE_ALREADY_INITIALIZED",
        21: "DEVICE_LICENSE_ERROR",
        22: "DEVICE_OTP_PROGRAMED",
        23: "DEVICE_DECRYPTION_FAILED",
        24: "DEVICE_SERVICE_LOCKED",
    }

    _NAMES_TO_VALUES = {
        "DEVICE_NO_ERROR": 0,
        "DEVICE_UNKNOWN_ERROR": 1,
        "DEVICE_INVALID_PARAMETERS": 2,
        "DEVICE_PERMISSIONS_ERROR": 3,
        "DEVICE_INVALID_DEVICE_HANDLE": 4,
        "DEVICE_INVALID_PROTOCOL_HANDLE": 5,
        "DEVICE_INVALID_CONNECTION_HANDLE": 6,
        "DEVICE_CONNECTION_LOCKED": 7,
        "DEVICE_DISCONNECTED": 8,
        "DEVICE_PROTOCOL_INVALID": 9,
        "DEVICE_PROTOCOL_DISCONNECTED": 10,
        "DEVICE_PROTOCOL_UNRESPONSIVE": 11,
        "DEVICE_TX_CANCELLED": 12,
        "DEVICE_TIMEOUT": 13,
        "DEVICE_INVALID_PROCESSOR": 14,
        "DEVICE_INVALID_PACKET": 15,
        "DEVICE_RESPONSE_ERROR": 16,
        "DEVICE_INVALID_LOG_SESSION": 17,
        "DEVICE_SERVICE_NOT_INITIALIZED": 18,
        "DEVICE_TCP_PORT_FAILURE": 19,
        "DEVICE_SERVICE_ALREADY_INITIALIZED": 20,
        "DEVICE_LICENSE_ERROR": 21,
        "DEVICE_OTP_PROGRAMED": 22,
        "DEVICE_DECRYPTION_FAILED": 23,
        "DEVICE_SERVICE_LOCKED": 24,
    }


class QutsOperatingMode(object):
    DEVICE_DISCOVERY = 0
    POST_PROCESSING = 1

    _VALUES_TO_NAMES = {
        0: "DEVICE_DISCOVERY",
        1: "POST_PROCESSING",
    }

    _NAMES_TO_VALUES = {
        "DEVICE_DISCOVERY": 0,
        "POST_PROCESSING": 1,
    }


class OpenProp(object):
    OPEN_NONE = 0
    OPEN_READ = 1
    OPEN_WRITE = 2
    OPEN_READ_WRITE = 3

    _VALUES_TO_NAMES = {
        0: "OPEN_NONE",
        1: "OPEN_READ",
        2: "OPEN_WRITE",
        3: "OPEN_READ_WRITE",
    }

    _NAMES_TO_VALUES = {
        "OPEN_NONE": 0,
        "OPEN_READ": 1,
        "OPEN_WRITE": 2,
        "OPEN_READ_WRITE": 3,
    }


class ProtocolType(object):
    PROT_UNKNOWN = -1
    PROT_DIAG = 0
    PROT_QMI = 1
    PROT_ADB = 2
    PROT_SAHARA = 3
    PROT_FIREHOSE = 4
    PROT_QDSS = 5
    PROT_ADPL = 6
    PROT_FASTBOOT = 7
    PROT_NMEA = 8
    PROT_DUN = 9
    PROT_RMNET = 10
    PROT_RNDIS = 11
    PROT_MBIM = 12
    PROT_PROTOBUF = 13
    PROT_TAC = 14
    PROT_EPM = 15
    PROT_TELNET = 16
    PROT_FTP = 17
    PROT_EUD = 18
    PROT_QSPS = 19
    PROT_SERIAL = 20
    PROT_MAX = 21

    _VALUES_TO_NAMES = {
        -1: "PROT_UNKNOWN",
        0: "PROT_DIAG",
        1: "PROT_QMI",
        2: "PROT_ADB",
        3: "PROT_SAHARA",
        4: "PROT_FIREHOSE",
        5: "PROT_QDSS",
        6: "PROT_ADPL",
        7: "PROT_FASTBOOT",
        8: "PROT_NMEA",
        9: "PROT_DUN",
        10: "PROT_RMNET",
        11: "PROT_RNDIS",
        12: "PROT_MBIM",
        13: "PROT_PROTOBUF",
        14: "PROT_TAC",
        15: "PROT_EPM",
        16: "PROT_TELNET",
        17: "PROT_FTP",
        18: "PROT_EUD",
        19: "PROT_QSPS",
        20: "PROT_SERIAL",
        21: "PROT_MAX",
    }

    _NAMES_TO_VALUES = {
        "PROT_UNKNOWN": -1,
        "PROT_DIAG": 0,
        "PROT_QMI": 1,
        "PROT_ADB": 2,
        "PROT_SAHARA": 3,
        "PROT_FIREHOSE": 4,
        "PROT_QDSS": 5,
        "PROT_ADPL": 6,
        "PROT_FASTBOOT": 7,
        "PROT_NMEA": 8,
        "PROT_DUN": 9,
        "PROT_RMNET": 10,
        "PROT_RNDIS": 11,
        "PROT_MBIM": 12,
        "PROT_PROTOBUF": 13,
        "PROT_TAC": 14,
        "PROT_EPM": 15,
        "PROT_TELNET": 16,
        "PROT_FTP": 17,
        "PROT_EUD": 18,
        "PROT_QSPS": 19,
        "PROT_SERIAL": 20,
        "PROT_MAX": 21,
    }


class ConnectionType(object):
    CONNECT_UNKNOWN = -1
    CONNECT_USB = 0
    CONNECT_TCP = 1
    CONNECT_FILE = 2
    CONNECT_ETHERNET = 3
    CONNECT_MAX = 4

    _VALUES_TO_NAMES = {
        -1: "CONNECT_UNKNOWN",
        0: "CONNECT_USB",
        1: "CONNECT_TCP",
        2: "CONNECT_FILE",
        3: "CONNECT_ETHERNET",
        4: "CONNECT_MAX",
    }

    _NAMES_TO_VALUES = {
        "CONNECT_UNKNOWN": -1,
        "CONNECT_USB": 0,
        "CONNECT_TCP": 1,
        "CONNECT_FILE": 2,
        "CONNECT_ETHERNET": 3,
        "CONNECT_MAX": 4,
    }


class ProtocolState(object):
    STATE_AVAILABLE = 0
    STATE_DISCONNECTED = 1
    STATE_UNRESPONSIVE = 2
    STATE_INITIALIZING = 3

    _VALUES_TO_NAMES = {
        0: "STATE_AVAILABLE",
        1: "STATE_DISCONNECTED",
        2: "STATE_UNRESPONSIVE",
        3: "STATE_INITIALIZING",
    }

    _NAMES_TO_VALUES = {
        "STATE_AVAILABLE": 0,
        "STATE_DISCONNECTED": 1,
        "STATE_UNRESPONSIVE": 2,
        "STATE_INITIALIZING": 3,
    }


class TcpDirection(object):
    IN_BOUND = 0
    OUT_BOUND = 1

    _VALUES_TO_NAMES = {
        0: "IN_BOUND",
        1: "OUT_BOUND",
    }

    _NAMES_TO_VALUES = {
        "IN_BOUND": 0,
        "OUT_BOUND": 1,
    }


class Direction(object):
    DIR_RX = 1
    DIR_TX = 2

    _VALUES_TO_NAMES = {
        1: "DIR_RX",
        2: "DIR_TX",
    }

    _NAMES_TO_VALUES = {
        "DIR_RX": 1,
        "DIR_TX": 2,
    }


class FlowControlStatus(object):
    FLOW_CONTROL_OFF = 0
    FLOW_CONTROL_ON = 1

    _VALUES_TO_NAMES = {
        0: "FLOW_CONTROL_OFF",
        1: "FLOW_CONTROL_ON",
    }

    _NAMES_TO_VALUES = {
        "FLOW_CONTROL_OFF": 0,
        "FLOW_CONTROL_ON": 1,
    }


class FlowControlLevel(object):
    FLOW_CONTROL_LOW = 0
    FLOW_CONTROL_MID = 1
    FLOW_CONTROL_HIGH = 2
    FLOW_CONTROL_DNE = 3

    _VALUES_TO_NAMES = {
        0: "FLOW_CONTROL_LOW",
        1: "FLOW_CONTROL_MID",
        2: "FLOW_CONTROL_HIGH",
        3: "FLOW_CONTROL_DNE",
    }

    _NAMES_TO_VALUES = {
        "FLOW_CONTROL_LOW": 0,
        "FLOW_CONTROL_MID": 1,
        "FLOW_CONTROL_HIGH": 2,
        "FLOW_CONTROL_DNE": 3,
    }


class LockState(object):
    LOCK_STATE_OFF = 0
    LOCK_STATE_ON = 1

    _VALUES_TO_NAMES = {
        0: "LOCK_STATE_OFF",
        1: "LOCK_STATE_ON",
    }

    _NAMES_TO_VALUES = {
        "LOCK_STATE_OFF": 0,
        "LOCK_STATE_ON": 1,
    }


class MbnDownloadState(object):
    INVALID = 0
    RESET = 1
    REQUEST_SENT = 2
    WAIT_IMMEDIATE_REPONSE = 3
    IMMEDIATE_REPONSE_RECIEVED = 4
    WAIT_DELAYED_RESPONSE = 5
    DELAYED_RESPONSE_RECEIVED = 6
    DOWNLOAD_COMPLETED = 7
    DEVICE_CONFIGURATION_STATUS_CHECK_COMPLETED = 8
    MBN_FILE_DOWNLOAD_COMPLETED = 9
    XML_FILE_DOWNLOAD_COMPLETED = 10
    FILE_REPLAYSTATE = 11
    ERROR_STATE = 12

    _VALUES_TO_NAMES = {
        0: "INVALID",
        1: "RESET",
        2: "REQUEST_SENT",
        3: "WAIT_IMMEDIATE_REPONSE",
        4: "IMMEDIATE_REPONSE_RECIEVED",
        5: "WAIT_DELAYED_RESPONSE",
        6: "DELAYED_RESPONSE_RECEIVED",
        7: "DOWNLOAD_COMPLETED",
        8: "DEVICE_CONFIGURATION_STATUS_CHECK_COMPLETED",
        9: "MBN_FILE_DOWNLOAD_COMPLETED",
        10: "XML_FILE_DOWNLOAD_COMPLETED",
        11: "FILE_REPLAYSTATE",
        12: "ERROR_STATE",
    }

    _NAMES_TO_VALUES = {
        "INVALID": 0,
        "RESET": 1,
        "REQUEST_SENT": 2,
        "WAIT_IMMEDIATE_REPONSE": 3,
        "IMMEDIATE_REPONSE_RECIEVED": 4,
        "WAIT_DELAYED_RESPONSE": 5,
        "DELAYED_RESPONSE_RECEIVED": 6,
        "DOWNLOAD_COMPLETED": 7,
        "DEVICE_CONFIGURATION_STATUS_CHECK_COMPLETED": 8,
        "MBN_FILE_DOWNLOAD_COMPLETED": 9,
        "XML_FILE_DOWNLOAD_COMPLETED": 10,
        "FILE_REPLAYSTATE": 11,
        "ERROR_STATE": 12,
    }


class DeviceMode(object):
    DEVICE_MODE_NONE = 0
    DEVICE_MODE_SAHARA_DOWNLOAD = 1
    DEVICE_MODE_SAHARA_CRASH = 2
    DEVICE_MODE_SAHARA_EFS_SYNC = 4

    _VALUES_TO_NAMES = {
        0: "DEVICE_MODE_NONE",
        1: "DEVICE_MODE_SAHARA_DOWNLOAD",
        2: "DEVICE_MODE_SAHARA_CRASH",
        4: "DEVICE_MODE_SAHARA_EFS_SYNC",
    }

    _NAMES_TO_VALUES = {
        "DEVICE_MODE_NONE": 0,
        "DEVICE_MODE_SAHARA_DOWNLOAD": 1,
        "DEVICE_MODE_SAHARA_CRASH": 2,
        "DEVICE_MODE_SAHARA_EFS_SYNC": 4,
    }


class KeyClass(object):
    KEY_NONE = 0
    KEY_PROPRIETARY = 1
    KEY_RESTRICTED = 2

    _VALUES_TO_NAMES = {
        0: "KEY_NONE",
        1: "KEY_PROPRIETARY",
        2: "KEY_RESTRICTED",
    }

    _NAMES_TO_VALUES = {
        "KEY_NONE": 0,
        "KEY_PROPRIETARY": 1,
        "KEY_RESTRICTED": 2,
    }


class KeyLoadStatus(object):
    KEY_LOAD_SUCCESS = 0
    KEY_LOAD_NO_SERVER_CONNECTION = 1
    KEY_LOAD_ERROR = 2
    KEY_LOAD_AUTHENTICATION_ERROR = 3
    KEY_LOAD_INALID_KEY_DECRYPTED = 4

    _VALUES_TO_NAMES = {
        0: "KEY_LOAD_SUCCESS",
        1: "KEY_LOAD_NO_SERVER_CONNECTION",
        2: "KEY_LOAD_ERROR",
        3: "KEY_LOAD_AUTHENTICATION_ERROR",
        4: "KEY_LOAD_INALID_KEY_DECRYPTED",
    }

    _NAMES_TO_VALUES = {
        "KEY_LOAD_SUCCESS": 0,
        "KEY_LOAD_NO_SERVER_CONNECTION": 1,
        "KEY_LOAD_ERROR": 2,
        "KEY_LOAD_AUTHENTICATION_ERROR": 3,
        "KEY_LOAD_INALID_KEY_DECRYPTED": 4,
    }


class RestrictedLogLicenseStatus(object):
    UNKNOWN = -1
    NOT_INSTALLED = 0
    INSTALLED = 1

    _VALUES_TO_NAMES = {
        -1: "UNKNOWN",
        0: "NOT_INSTALLED",
        1: "INSTALLED",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": -1,
        "NOT_INSTALLED": 0,
        "INSTALLED": 1,
    }


class DiagPacketType(object):
    UNKNOWN_PACKET_TYPE = -1
    LOG_PACKET = 0
    EVENT = 1
    NV_ITEM = 2
    DEBUG_MSG = 3
    REQUEST = 4
    RESPONSE = 5
    SUBSYS_REQUEST = 6
    SUBSYS_RESPONSE = 7
    SUBSYSV2_REQUEST = 8
    SUBSYSV2_IMMEDIATE_RESPONSE = 9
    SUBSYSV2_DELAYED_RESPONSE = 10
    QTRACE = 11
    QSH_METRIC = 12
    QSH_EVENT = 13

    _VALUES_TO_NAMES = {
        -1: "UNKNOWN_PACKET_TYPE",
        0: "LOG_PACKET",
        1: "EVENT",
        2: "NV_ITEM",
        3: "DEBUG_MSG",
        4: "REQUEST",
        5: "RESPONSE",
        6: "SUBSYS_REQUEST",
        7: "SUBSYS_RESPONSE",
        8: "SUBSYSV2_REQUEST",
        9: "SUBSYSV2_IMMEDIATE_RESPONSE",
        10: "SUBSYSV2_DELAYED_RESPONSE",
        11: "QTRACE",
        12: "QSH_METRIC",
        13: "QSH_EVENT",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN_PACKET_TYPE": -1,
        "LOG_PACKET": 0,
        "EVENT": 1,
        "NV_ITEM": 2,
        "DEBUG_MSG": 3,
        "REQUEST": 4,
        "RESPONSE": 5,
        "SUBSYS_REQUEST": 6,
        "SUBSYS_RESPONSE": 7,
        "SUBSYSV2_REQUEST": 8,
        "SUBSYSV2_IMMEDIATE_RESPONSE": 9,
        "SUBSYSV2_DELAYED_RESPONSE": 10,
        "QTRACE": 11,
        "QSH_METRIC": 12,
        "QSH_EVENT": 13,
    }


class DataSourceType(object):
    FILE_DATA = 0
    BINARY_MASK_DATA = 1

    _VALUES_TO_NAMES = {
        0: "FILE_DATA",
        1: "BINARY_MASK_DATA",
    }

    _NAMES_TO_VALUES = {
        "FILE_DATA": 0,
        "BINARY_MASK_DATA": 1,
    }


class LogMaskFormat(object):
    INVALID = -1
    CFG_FORMAT = 0
    CFG2_FORMAT = 1
    DMC_FORMAT = 2
    CFG_FORMAT_ENABLE_MULTISIM = 3
    CFG2_FORMAT_ENABLE_MULTISIM = 4
    DMC_FORMAT_ENABLE_MULTISIM = 5

    _VALUES_TO_NAMES = {
        -1: "INVALID",
        0: "CFG_FORMAT",
        1: "CFG2_FORMAT",
        2: "DMC_FORMAT",
        3: "CFG_FORMAT_ENABLE_MULTISIM",
        4: "CFG2_FORMAT_ENABLE_MULTISIM",
        5: "DMC_FORMAT_ENABLE_MULTISIM",
    }

    _NAMES_TO_VALUES = {
        "INVALID": -1,
        "CFG_FORMAT": 0,
        "CFG2_FORMAT": 1,
        "DMC_FORMAT": 2,
        "CFG_FORMAT_ENABLE_MULTISIM": 3,
        "CFG2_FORMAT_ENABLE_MULTISIM": 4,
        "DMC_FORMAT_ENABLE_MULTISIM": 5,
    }


class QShrink4DownloadState(object):
    QSR4_STATE_INIT = 0
    QSR4_STATE_DOWNLOADING = 1
    QSR4_STATE_DOWNLOADED = 2
    QSR4_STATE_LOADED = 3
    QSR4_STATE_FAILED = 4

    _VALUES_TO_NAMES = {
        0: "QSR4_STATE_INIT",
        1: "QSR4_STATE_DOWNLOADING",
        2: "QSR4_STATE_DOWNLOADED",
        3: "QSR4_STATE_LOADED",
        4: "QSR4_STATE_FAILED",
    }

    _NAMES_TO_VALUES = {
        "QSR4_STATE_INIT": 0,
        "QSR4_STATE_DOWNLOADING": 1,
        "QSR4_STATE_DOWNLOADED": 2,
        "QSR4_STATE_LOADED": 3,
        "QSR4_STATE_FAILED": 4,
    }


class InternalPacketFlag(object):
    INTERNAL_FLAG_NOT_SET = 0
    INTERNAL_PACKET_ONLY = 1
    EXTERNAL_PACKET_ONLY = 2

    _VALUES_TO_NAMES = {
        0: "INTERNAL_FLAG_NOT_SET",
        1: "INTERNAL_PACKET_ONLY",
        2: "EXTERNAL_PACKET_ONLY",
    }

    _NAMES_TO_VALUES = {
        "INTERNAL_FLAG_NOT_SET": 0,
        "INTERNAL_PACKET_ONLY": 1,
        "EXTERNAL_PACKET_ONLY": 2,
    }


class DiagReturnFlags(object):
    NO_FLAGS_SET = 0
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_TYPE = 16
    PACKET_ID = 32
    PACKET_NAME = 64
    BINARY_PAYLOAD = 128
    PARSED_TEXT = 256
    TIME_STAMP_DATA = 512
    TIME_STAMP_STRING = 1024
    SUBSCRIPTION_ID = 2048
    PROCESSOR_ID = 4096
    HW_TIME_STAMP_DATA = 8192
    HW_TIME_STAMP_STRING = 16384
    ULOG_SOURCE = 32768
    MORE_RESPONSES_FLAG = 65536
    SUMMARY_TEXT = 131072
    QDSS_CHANNEL_ID = 262144
    QDSS_MASTER_ID = 524288
    QDSS_AT_ID = 1048576
    DEFAULT_FORMAT_TEXT = 2097152
    CALL_FRAME_NUMBER = 4194304
    TIME_STAMP_TOD_ADJUSTED_DATA = 8388608
    TIME_STAMP_TOD_ADJUSTED_STRING = 16777216
    PACKET_SIZE = 33554432
    QTRACE_TAG_LIST = 67108864
    MISCELLANEOUS_ID = 134217728
    QUERY_RESULT_PICKLED = 268435456
    FORMAT_STRING_HASH = 536870912
    ENCRYPTION_KEY_INFO = 1073741824

    _VALUES_TO_NAMES = {
        0: "NO_FLAGS_SET",
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        16: "PACKET_TYPE",
        32: "PACKET_ID",
        64: "PACKET_NAME",
        128: "BINARY_PAYLOAD",
        256: "PARSED_TEXT",
        512: "TIME_STAMP_DATA",
        1024: "TIME_STAMP_STRING",
        2048: "SUBSCRIPTION_ID",
        4096: "PROCESSOR_ID",
        8192: "HW_TIME_STAMP_DATA",
        16384: "HW_TIME_STAMP_STRING",
        32768: "ULOG_SOURCE",
        65536: "MORE_RESPONSES_FLAG",
        131072: "SUMMARY_TEXT",
        262144: "QDSS_CHANNEL_ID",
        524288: "QDSS_MASTER_ID",
        1048576: "QDSS_AT_ID",
        2097152: "DEFAULT_FORMAT_TEXT",
        4194304: "CALL_FRAME_NUMBER",
        8388608: "TIME_STAMP_TOD_ADJUSTED_DATA",
        16777216: "TIME_STAMP_TOD_ADJUSTED_STRING",
        33554432: "PACKET_SIZE",
        67108864: "QTRACE_TAG_LIST",
        134217728: "MISCELLANEOUS_ID",
        268435456: "QUERY_RESULT_PICKLED",
        536870912: "FORMAT_STRING_HASH",
        1073741824: "ENCRYPTION_KEY_INFO",
    }

    _NAMES_TO_VALUES = {
        "NO_FLAGS_SET": 0,
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_TYPE": 16,
        "PACKET_ID": 32,
        "PACKET_NAME": 64,
        "BINARY_PAYLOAD": 128,
        "PARSED_TEXT": 256,
        "TIME_STAMP_DATA": 512,
        "TIME_STAMP_STRING": 1024,
        "SUBSCRIPTION_ID": 2048,
        "PROCESSOR_ID": 4096,
        "HW_TIME_STAMP_DATA": 8192,
        "HW_TIME_STAMP_STRING": 16384,
        "ULOG_SOURCE": 32768,
        "MORE_RESPONSES_FLAG": 65536,
        "SUMMARY_TEXT": 131072,
        "QDSS_CHANNEL_ID": 262144,
        "QDSS_MASTER_ID": 524288,
        "QDSS_AT_ID": 1048576,
        "DEFAULT_FORMAT_TEXT": 2097152,
        "CALL_FRAME_NUMBER": 4194304,
        "TIME_STAMP_TOD_ADJUSTED_DATA": 8388608,
        "TIME_STAMP_TOD_ADJUSTED_STRING": 16777216,
        "PACKET_SIZE": 33554432,
        "QTRACE_TAG_LIST": 67108864,
        "MISCELLANEOUS_ID": 134217728,
        "QUERY_RESULT_PICKLED": 268435456,
        "FORMAT_STRING_HASH": 536870912,
        "ENCRYPTION_KEY_INFO": 1073741824,
    }


class DiagReturnFlagsExt(object):
    NO_USER_PARSING = 0
    USER_PARSED_TEXT = 1
    USER_PARSED_SUMMARY = 2
    EXCEPTION_MESSAGE_TYPE = 4
    QUERY_RESULT_PICKLED_AND_JSON = 8
    PARSED_TEXT_JSON = 16
    DIAG_ID = 32
    DIAG_ID_PROCESSOR_NAME = 64

    _VALUES_TO_NAMES = {
        0: "NO_USER_PARSING",
        1: "USER_PARSED_TEXT",
        2: "USER_PARSED_SUMMARY",
        4: "EXCEPTION_MESSAGE_TYPE",
        8: "QUERY_RESULT_PICKLED_AND_JSON",
        16: "PARSED_TEXT_JSON",
        32: "DIAG_ID",
        64: "DIAG_ID_PROCESSOR_NAME",
    }

    _NAMES_TO_VALUES = {
        "NO_USER_PARSING": 0,
        "USER_PARSED_TEXT": 1,
        "USER_PARSED_SUMMARY": 2,
        "EXCEPTION_MESSAGE_TYPE": 4,
        "QUERY_RESULT_PICKLED_AND_JSON": 8,
        "PARSED_TEXT_JSON": 16,
        "DIAG_ID": 32,
        "DIAG_ID_PROCESSOR_NAME": 64,
    }


class SearchOptions(object):
    NO_OPTIONS_SET = 0
    USE_REGEX_MATCH = 1
    INVERT_SEARCH = 2
    CASE_INSENSITIVE = 4

    _VALUES_TO_NAMES = {
        0: "NO_OPTIONS_SET",
        1: "USE_REGEX_MATCH",
        2: "INVERT_SEARCH",
        4: "CASE_INSENSITIVE",
    }

    _NAMES_TO_VALUES = {
        "NO_OPTIONS_SET": 0,
        "USE_REGEX_MATCH": 1,
        "INVERT_SEARCH": 2,
        "CASE_INSENSITIVE": 4,
    }


class EnumReturnForFieldQuery(object):
    ENUM_RETURN_NOT_SET = 0
    STRING_VALUE_ONLY = 1
    RAW_VALUE_ONLY = 2
    STRING_AND_RAW_VALUE = 3

    _VALUES_TO_NAMES = {
        0: "ENUM_RETURN_NOT_SET",
        1: "STRING_VALUE_ONLY",
        2: "RAW_VALUE_ONLY",
        3: "STRING_AND_RAW_VALUE",
    }

    _NAMES_TO_VALUES = {
        "ENUM_RETURN_NOT_SET": 0,
        "STRING_VALUE_ONLY": 1,
        "RAW_VALUE_ONLY": 2,
        "STRING_AND_RAW_VALUE": 3,
    }


class ExceptionMessageType(object):
    NOT_SET = 0
    UNKNOWN_EXCEPTION_MESSAGE = 1
    NOT_ENOUGH_ARGUMENT_COUNT_PROVIDED = 2

    _VALUES_TO_NAMES = {
        0: "NOT_SET",
        1: "UNKNOWN_EXCEPTION_MESSAGE",
        2: "NOT_ENOUGH_ARGUMENT_COUNT_PROVIDED",
    }

    _NAMES_TO_VALUES = {
        "NOT_SET": 0,
        "UNKNOWN_EXCEPTION_MESSAGE": 1,
        "NOT_ENOUGH_ARGUMENT_COUNT_PROVIDED": 2,
    }


class AnnotationReturnFlags(object):
    NO_FLAGS_SET = 0
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    MESSAGE_ID = 16
    PARSED_TEXT = 32

    _VALUES_TO_NAMES = {
        0: "NO_FLAGS_SET",
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        16: "MESSAGE_ID",
        32: "PARSED_TEXT",
    }

    _NAMES_TO_VALUES = {
        "NO_FLAGS_SET": 0,
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "MESSAGE_ID": 16,
        "PARSED_TEXT": 32,
    }


class QmiPacketType(object):
    QMI_REQUEST = 0
    QMI_RESPONSE = 1
    QMI_INDICATION = 2

    _VALUES_TO_NAMES = {
        0: "QMI_REQUEST",
        1: "QMI_RESPONSE",
        2: "QMI_INDICATION",
    }

    _NAMES_TO_VALUES = {
        "QMI_REQUEST": 0,
        "QMI_RESPONSE": 1,
        "QMI_INDICATION": 2,
    }


class QmiReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_TYPE = 16
    PACKET_NAME = 64
    BINARY_PAYLOAD = 128
    PARSED_XML = 256
    SERVICE_ID = 512
    MESSAGE_ID = 1024

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        16: "PACKET_TYPE",
        64: "PACKET_NAME",
        128: "BINARY_PAYLOAD",
        256: "PARSED_XML",
        512: "SERVICE_ID",
        1024: "MESSAGE_ID",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_TYPE": 16,
        "PACKET_NAME": 64,
        "BINARY_PAYLOAD": 128,
        "PARSED_XML": 256,
        "SERVICE_ID": 512,
        "MESSAGE_ID": 1024,
    }


class AdbReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_TEXT = 256

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        256: "PACKET_TEXT",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_TEXT": 256,
    }


class TelnetReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_TEXT = 16

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        16: "PACKET_TEXT",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_TEXT": 16,
    }


class SaharaReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_ID = 32
    PACKET_NAME = 64
    BINARY_PAYLOAD = 128

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        32: "PACKET_ID",
        64: "PACKET_NAME",
        128: "BINARY_PAYLOAD",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_ID": 32,
        "PACKET_NAME": 64,
        "BINARY_PAYLOAD": 128,
    }


class FastbootReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_TEXT = 256

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        256: "PACKET_TEXT",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_TEXT": 256,
    }


class EudReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_ID = 32
    PACKET_NAME = 64
    BINARY_PAYLOAD = 128

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        32: "PACKET_ID",
        64: "PACKET_NAME",
        128: "BINARY_PAYLOAD",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_ID": 32,
        "PACKET_NAME": 64,
        "BINARY_PAYLOAD": 128,
    }


class ProtoBufPacketType(object):
    UNKNOWN_PACKET_TYPE = -1
    REQUEST = 0
    RESPONSE = 1

    _VALUES_TO_NAMES = {
        -1: "UNKNOWN_PACKET_TYPE",
        0: "REQUEST",
        1: "RESPONSE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN_PACKET_TYPE": -1,
        "REQUEST": 0,
        "RESPONSE": 1,
    }


class QspsPacketType(object):
    UNKNOWN_PACKET_TYPE = -1
    REQUEST = 0
    RESPONSE = 1

    _VALUES_TO_NAMES = {
        -1: "UNKNOWN_PACKET_TYPE",
        0: "REQUEST",
        1: "RESPONSE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN_PACKET_TYPE": -1,
        "REQUEST": 0,
        "RESPONSE": 1,
    }


class ProfilingPacketType(object):
    NOT_SET = 0
    INSTANTANEOUS_PACKET = 1
    SYSMON_AVERAGE_PACKET = 2
    SYSMON_INSTANTANEOUS_PACKET = 3
    SYSMON_TLP_AVERAGE_PACKET = 4
    SYSMON_TLP_INSTANTANEOUS_PACKET = 5
    SYSMON_ROOFLINE_PACKET = 6
    SYSMON_ROOFLINE_BOUNDARY_PACKET = 7
    SYSMON_ROOFLINE_DSP_SYSTEM_HVX_PACKET = 8
    SYSMON_ROOFLINE_DSP_SYSTEM_HVX_BOUNDARY_PACKET = 9
    SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FXP_PACKET = 10
    SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FXP_BOUNDARY_PACKET = 11
    SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FLT_PACKET = 12
    SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FLT_BOUNDARY_PACKET = 13
    SYSMON_ROOFLINE_DSP_SYSTEM_SCALAR_PACKET = 14
    SYSMON_ROOFLINE_DSP_SYSTEM_SCALAR_BOUNDARY_PACKET = 15

    _VALUES_TO_NAMES = {
        0: "NOT_SET",
        1: "INSTANTANEOUS_PACKET",
        2: "SYSMON_AVERAGE_PACKET",
        3: "SYSMON_INSTANTANEOUS_PACKET",
        4: "SYSMON_TLP_AVERAGE_PACKET",
        5: "SYSMON_TLP_INSTANTANEOUS_PACKET",
        6: "SYSMON_ROOFLINE_PACKET",
        7: "SYSMON_ROOFLINE_BOUNDARY_PACKET",
        8: "SYSMON_ROOFLINE_DSP_SYSTEM_HVX_PACKET",
        9: "SYSMON_ROOFLINE_DSP_SYSTEM_HVX_BOUNDARY_PACKET",
        10: "SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FXP_PACKET",
        11: "SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FXP_BOUNDARY_PACKET",
        12: "SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FLT_PACKET",
        13: "SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FLT_BOUNDARY_PACKET",
        14: "SYSMON_ROOFLINE_DSP_SYSTEM_SCALAR_PACKET",
        15: "SYSMON_ROOFLINE_DSP_SYSTEM_SCALAR_BOUNDARY_PACKET",
    }

    _NAMES_TO_VALUES = {
        "NOT_SET": 0,
        "INSTANTANEOUS_PACKET": 1,
        "SYSMON_AVERAGE_PACKET": 2,
        "SYSMON_INSTANTANEOUS_PACKET": 3,
        "SYSMON_TLP_AVERAGE_PACKET": 4,
        "SYSMON_TLP_INSTANTANEOUS_PACKET": 5,
        "SYSMON_ROOFLINE_PACKET": 6,
        "SYSMON_ROOFLINE_BOUNDARY_PACKET": 7,
        "SYSMON_ROOFLINE_DSP_SYSTEM_HVX_PACKET": 8,
        "SYSMON_ROOFLINE_DSP_SYSTEM_HVX_BOUNDARY_PACKET": 9,
        "SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FXP_PACKET": 10,
        "SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FXP_BOUNDARY_PACKET": 11,
        "SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FLT_PACKET": 12,
        "SYSMON_ROOFLINE_DSP_SYSTEM_HMX_FLT_BOUNDARY_PACKET": 13,
        "SYSMON_ROOFLINE_DSP_SYSTEM_SCALAR_PACKET": 14,
        "SYSMON_ROOFLINE_DSP_SYSTEM_SCALAR_BOUNDARY_PACKET": 15,
    }


class ProtoBufReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_TYPE = 16
    PACKET_NAME = 64
    BINARY_PAYLOAD = 128
    PARSED_TEXT = 256
    RPC_ID = 512
    QUERY_RESULT_PICKLED = 1024
    PARSED_TEXT_JSON = 2048
    QUERY_RESULT_PICKLED_AND_JSON = 4096
    PROFILER_TIMESTAMP_HH_MM_SS_MS = 8192
    CAPABILITY_NAME = 16384

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        16: "PACKET_TYPE",
        64: "PACKET_NAME",
        128: "BINARY_PAYLOAD",
        256: "PARSED_TEXT",
        512: "RPC_ID",
        1024: "QUERY_RESULT_PICKLED",
        2048: "PARSED_TEXT_JSON",
        4096: "QUERY_RESULT_PICKLED_AND_JSON",
        8192: "PROFILER_TIMESTAMP_HH_MM_SS_MS",
        16384: "CAPABILITY_NAME",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_TYPE": 16,
        "PACKET_NAME": 64,
        "BINARY_PAYLOAD": 128,
        "PARSED_TEXT": 256,
        "RPC_ID": 512,
        "QUERY_RESULT_PICKLED": 1024,
        "PARSED_TEXT_JSON": 2048,
        "QUERY_RESULT_PICKLED_AND_JSON": 4096,
        "PROFILER_TIMESTAMP_HH_MM_SS_MS": 8192,
        "CAPABILITY_NAME": 16384,
    }


class QspsReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_TYPE = 16
    PACKET_NAME = 64
    BINARY_PAYLOAD = 128
    PARSED_TEXT = 256
    RPC_ID = 512
    QUERY_RESULT_PICKLED = 1024
    PARSED_TEXT_JSON = 2048
    QUERY_RESULT_PICKLED_AND_JSON = 4096
    PROFILER_TIMESTAMP_HH_MM_SS_MS = 8192
    CAPABILITY_NAME = 16384
    USER_PARSED_TEXT_JSON = 32768
    PARSED_TEXT_CSV = 65536
    PROFILING_PACKET_TYPE = 131072

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        16: "PACKET_TYPE",
        64: "PACKET_NAME",
        128: "BINARY_PAYLOAD",
        256: "PARSED_TEXT",
        512: "RPC_ID",
        1024: "QUERY_RESULT_PICKLED",
        2048: "PARSED_TEXT_JSON",
        4096: "QUERY_RESULT_PICKLED_AND_JSON",
        8192: "PROFILER_TIMESTAMP_HH_MM_SS_MS",
        16384: "CAPABILITY_NAME",
        32768: "USER_PARSED_TEXT_JSON",
        65536: "PARSED_TEXT_CSV",
        131072: "PROFILING_PACKET_TYPE",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_TYPE": 16,
        "PACKET_NAME": 64,
        "BINARY_PAYLOAD": 128,
        "PARSED_TEXT": 256,
        "RPC_ID": 512,
        "QUERY_RESULT_PICKLED": 1024,
        "PARSED_TEXT_JSON": 2048,
        "QUERY_RESULT_PICKLED_AND_JSON": 4096,
        "PROFILER_TIMESTAMP_HH_MM_SS_MS": 8192,
        "CAPABILITY_NAME": 16384,
        "USER_PARSED_TEXT_JSON": 32768,
        "PARSED_TEXT_CSV": 65536,
        "PROFILING_PACKET_TYPE": 131072,
    }


class AdplReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_VERSION = 16
    BINARY_PAYLOAD = 128
    MODEM_TIMESTAMP = 256
    MODEM_TIMESTAMP_STRING = 512
    DIAG_BINARY_PAYLOAD = 1024

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        16: "PACKET_VERSION",
        128: "BINARY_PAYLOAD",
        256: "MODEM_TIMESTAMP",
        512: "MODEM_TIMESTAMP_STRING",
        1024: "DIAG_BINARY_PAYLOAD",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_VERSION": 16,
        "BINARY_PAYLOAD": 128,
        "MODEM_TIMESTAMP": 256,
        "MODEM_TIMESTAMP_STRING": 512,
        "DIAG_BINARY_PAYLOAD": 1024,
    }


class MbnNvItemDiffResult(object):
    NV_ITEM_PAYLOAD_MATCHED = 0
    NV_ITEM_ONLY_IN_MBN = 1
    NV_ITEM_PAYLOAD_MISMATCHED = 2

    _VALUES_TO_NAMES = {
        0: "NV_ITEM_PAYLOAD_MATCHED",
        1: "NV_ITEM_ONLY_IN_MBN",
        2: "NV_ITEM_PAYLOAD_MISMATCHED",
    }

    _NAMES_TO_VALUES = {
        "NV_ITEM_PAYLOAD_MATCHED": 0,
        "NV_ITEM_ONLY_IN_MBN": 1,
        "NV_ITEM_PAYLOAD_MISMATCHED": 2,
    }


class NmeaReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_ID = 32
    BINARY_PAYLOAD = 128
    PACKET_TEXT = 256

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        32: "PACKET_ID",
        128: "BINARY_PAYLOAD",
        256: "PACKET_TEXT",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_ID": 32,
        "BINARY_PAYLOAD": 128,
        "PACKET_TEXT": 256,
    }


class QdssReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    AT_ID = 16
    CHANNEL_ID = 32
    MASTER_ID = 64
    LANE_ID = 128
    BINARY_PAYLOAD = 256
    HW_TIME_STAMP_DATA = 512
    HW_TIME_STAMP_STRING = 1024
    PARSED_TEXT = 2048
    PARSED_TEXT_JSON = 4096
    PARSED_TEXT_CSV = 8192
    PARSED_TEXT_PERFETTO = 16384

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        16: "AT_ID",
        32: "CHANNEL_ID",
        64: "MASTER_ID",
        128: "LANE_ID",
        256: "BINARY_PAYLOAD",
        512: "HW_TIME_STAMP_DATA",
        1024: "HW_TIME_STAMP_STRING",
        2048: "PARSED_TEXT",
        4096: "PARSED_TEXT_JSON",
        8192: "PARSED_TEXT_CSV",
        16384: "PARSED_TEXT_PERFETTO",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "AT_ID": 16,
        "CHANNEL_ID": 32,
        "MASTER_ID": 64,
        "LANE_ID": 128,
        "BINARY_PAYLOAD": 256,
        "HW_TIME_STAMP_DATA": 512,
        "HW_TIME_STAMP_STRING": 1024,
        "PARSED_TEXT": 2048,
        "PARSED_TEXT_JSON": 4096,
        "PARSED_TEXT_CSV": 8192,
        "PARSED_TEXT_PERFETTO": 16384,
    }


class DunReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    PACKET_ID = 32
    PACKET_TEXT = 256

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        32: "PACKET_ID",
        256: "PACKET_TEXT",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "PACKET_ID": 32,
        "PACKET_TEXT": 256,
    }


class FunctionArea(object):
    FUNCTION_AREA_SAHARA_PORT_TRACE = 1
    FUNCTION_AREA_FIREHOSE_PORT_TRACE = 2
    FUNCTION_AREA_FIREHOSE_LOADER = 3
    FUNCTION_AREA_QDSS_DIAG_RAW_TRACE = 4
    FUNCTION_AREA_XQCN = 5

    _VALUES_TO_NAMES = {
        1: "FUNCTION_AREA_SAHARA_PORT_TRACE",
        2: "FUNCTION_AREA_FIREHOSE_PORT_TRACE",
        3: "FUNCTION_AREA_FIREHOSE_LOADER",
        4: "FUNCTION_AREA_QDSS_DIAG_RAW_TRACE",
        5: "FUNCTION_AREA_XQCN",
    }

    _NAMES_TO_VALUES = {
        "FUNCTION_AREA_SAHARA_PORT_TRACE": 1,
        "FUNCTION_AREA_FIREHOSE_PORT_TRACE": 2,
        "FUNCTION_AREA_FIREHOSE_LOADER": 3,
        "FUNCTION_AREA_QDSS_DIAG_RAW_TRACE": 4,
        "FUNCTION_AREA_XQCN": 5,
    }


class LogLevel(object):
    LOG_DEFAULT = 0
    LOG_DATA = 1
    LOG_DEBUG = 2
    LOG_INFO = 4
    LOG_WARNING = 8
    LOG_ERROR = 16
    LOG_EXCEPTION = 32
    LOG_FATAL = 64
    LOG_ALL = 2147483647

    _VALUES_TO_NAMES = {
        0: "LOG_DEFAULT",
        1: "LOG_DATA",
        2: "LOG_DEBUG",
        4: "LOG_INFO",
        8: "LOG_WARNING",
        16: "LOG_ERROR",
        32: "LOG_EXCEPTION",
        64: "LOG_FATAL",
        2147483647: "LOG_ALL",
    }

    _NAMES_TO_VALUES = {
        "LOG_DEFAULT": 0,
        "LOG_DATA": 1,
        "LOG_DEBUG": 2,
        "LOG_INFO": 4,
        "LOG_WARNING": 8,
        "LOG_ERROR": 16,
        "LOG_EXCEPTION": 32,
        "LOG_FATAL": 64,
        "LOG_ALL": 2147483647,
    }


class LogFormat(object):
    LOG_CSV = 1
    LOG_BINARY = 2

    _VALUES_TO_NAMES = {
        1: "LOG_CSV",
        2: "LOG_BINARY",
    }

    _NAMES_TO_VALUES = {
        "LOG_CSV": 1,
        "LOG_BINARY": 2,
    }


class LogLayout(object):
    LOG_DATE = 0
    LOG_DATEUTC = 1
    LOG_DATETIME = 2
    LOG_DATETIMEUTC = 3
    LOG_TIME = 4
    LOG_TIMEUTC = 5
    LOG_TIMEZONE = 6
    LOG_EPOCH = 7
    LOG_UPTIME = 8
    LOG_RUNTIME = 9
    LOG_SEQUENCE = 10
    LOG_LOGSEQUENCE = 11
    LOG_LEVEL = 12
    LOG_MESSAGE = 13
    LOG_COMBINED = 14
    LOG_DATATYPE = 15
    LOG_DATALEN = 16
    LOG_DATA = 17
    LOG_LOGGER = 18
    LOG_CLASS = 19
    LOG_NAMESPACE = 20
    LOG_APPNAME = 21
    LOG_APPVER = 22
    LOG_PROCNAME = 23
    LOG_PID = 24
    LOG_PROCID = 25
    LOG_TID = 26
    LOG_THREADID = 27
    LOG_THREADNAME = 28
    LOG_HOSTNAME = 29
    LOG_USERNAME = 30
    LOG_CALLERFILE = 31
    LOG_CALLERPATH = 32
    LOG_CALLERLINE = 33
    LOG_CALLERMETHOD = 34
    LOG_TRACE = 35
    LOG_EXCEPTION = 36
    LOG_EXCEPTIONMESSAGE = 37
    LOG_EXCEPTIONNAME = 38
    LOG_EXCEPTIONSTACK = 39

    _VALUES_TO_NAMES = {
        0: "LOG_DATE",
        1: "LOG_DATEUTC",
        2: "LOG_DATETIME",
        3: "LOG_DATETIMEUTC",
        4: "LOG_TIME",
        5: "LOG_TIMEUTC",
        6: "LOG_TIMEZONE",
        7: "LOG_EPOCH",
        8: "LOG_UPTIME",
        9: "LOG_RUNTIME",
        10: "LOG_SEQUENCE",
        11: "LOG_LOGSEQUENCE",
        12: "LOG_LEVEL",
        13: "LOG_MESSAGE",
        14: "LOG_COMBINED",
        15: "LOG_DATATYPE",
        16: "LOG_DATALEN",
        17: "LOG_DATA",
        18: "LOG_LOGGER",
        19: "LOG_CLASS",
        20: "LOG_NAMESPACE",
        21: "LOG_APPNAME",
        22: "LOG_APPVER",
        23: "LOG_PROCNAME",
        24: "LOG_PID",
        25: "LOG_PROCID",
        26: "LOG_TID",
        27: "LOG_THREADID",
        28: "LOG_THREADNAME",
        29: "LOG_HOSTNAME",
        30: "LOG_USERNAME",
        31: "LOG_CALLERFILE",
        32: "LOG_CALLERPATH",
        33: "LOG_CALLERLINE",
        34: "LOG_CALLERMETHOD",
        35: "LOG_TRACE",
        36: "LOG_EXCEPTION",
        37: "LOG_EXCEPTIONMESSAGE",
        38: "LOG_EXCEPTIONNAME",
        39: "LOG_EXCEPTIONSTACK",
    }

    _NAMES_TO_VALUES = {
        "LOG_DATE": 0,
        "LOG_DATEUTC": 1,
        "LOG_DATETIME": 2,
        "LOG_DATETIMEUTC": 3,
        "LOG_TIME": 4,
        "LOG_TIMEUTC": 5,
        "LOG_TIMEZONE": 6,
        "LOG_EPOCH": 7,
        "LOG_UPTIME": 8,
        "LOG_RUNTIME": 9,
        "LOG_SEQUENCE": 10,
        "LOG_LOGSEQUENCE": 11,
        "LOG_LEVEL": 12,
        "LOG_MESSAGE": 13,
        "LOG_COMBINED": 14,
        "LOG_DATATYPE": 15,
        "LOG_DATALEN": 16,
        "LOG_DATA": 17,
        "LOG_LOGGER": 18,
        "LOG_CLASS": 19,
        "LOG_NAMESPACE": 20,
        "LOG_APPNAME": 21,
        "LOG_APPVER": 22,
        "LOG_PROCNAME": 23,
        "LOG_PID": 24,
        "LOG_PROCID": 25,
        "LOG_TID": 26,
        "LOG_THREADID": 27,
        "LOG_THREADNAME": 28,
        "LOG_HOSTNAME": 29,
        "LOG_USERNAME": 30,
        "LOG_CALLERFILE": 31,
        "LOG_CALLERPATH": 32,
        "LOG_CALLERLINE": 33,
        "LOG_CALLERMETHOD": 34,
        "LOG_TRACE": 35,
        "LOG_EXCEPTION": 36,
        "LOG_EXCEPTIONMESSAGE": 37,
        "LOG_EXCEPTIONNAME": 38,
        "LOG_EXCEPTIONSTACK": 39,
    }


class QcnItemDiffResult(object):
    QCN_ITEM_SAME = 0
    QCN_ITEM_PLUS = 1
    QCN_ITEM_MINUS = 2
    QCN_ITEM_PAYLOAD_MISMATCH = 3

    _VALUES_TO_NAMES = {
        0: "QCN_ITEM_SAME",
        1: "QCN_ITEM_PLUS",
        2: "QCN_ITEM_MINUS",
        3: "QCN_ITEM_PAYLOAD_MISMATCH",
    }

    _NAMES_TO_VALUES = {
        "QCN_ITEM_SAME": 0,
        "QCN_ITEM_PLUS": 1,
        "QCN_ITEM_MINUS": 2,
        "QCN_ITEM_PAYLOAD_MISMATCH": 3,
    }


class CdmaProtocolRevision(object):
    IS_95A = 0
    IS_95B = 4
    IS_2000_Rev_0 = 6
    IS_2000_Rev_A = 7
    IS_2000_Rev_B = 8
    IS_2000_Rev_C = 9
    IS_2000_Rev_C2 = 10
    IS_2000_Rev_D = 11
    IS_2000_Rev_E = 12

    _VALUES_TO_NAMES = {
        0: "IS_95A",
        4: "IS_95B",
        6: "IS_2000_Rev_0",
        7: "IS_2000_Rev_A",
        8: "IS_2000_Rev_B",
        9: "IS_2000_Rev_C",
        10: "IS_2000_Rev_C2",
        11: "IS_2000_Rev_D",
        12: "IS_2000_Rev_E",
    }

    _NAMES_TO_VALUES = {
        "IS_95A": 0,
        "IS_95B": 4,
        "IS_2000_Rev_0": 6,
        "IS_2000_Rev_A": 7,
        "IS_2000_Rev_B": 8,
        "IS_2000_Rev_C": 9,
        "IS_2000_Rev_C2": 10,
        "IS_2000_Rev_D": 11,
        "IS_2000_Rev_E": 12,
    }


class WcdmaProtocolRevision(object):
    VB50 = 186651395
    VA70 = 169873923
    V9B0 = 153096711
    VC80 = 203429377
    VAB1 = 169874193
    V930 = 153094418
    V8A0 = 136318979
    V860 = 136317187
    V7G0 = 119541763
    V790 = 119539717
    V780 = 119539715
    V770 = 119539474
    V6F0 = 102762249
    V6B0 = 102761993
    V6A0 = 102761990
    V690 = 102761987
    V680 = 102761746
    V590 = 85984262
    V3I0 = 52429827
    V3A0 = 52429315
    V370 = 52429062
    V350 = 52009216
    VC81 = 203429378

    _VALUES_TO_NAMES = {
        186651395: "VB50",
        169873923: "VA70",
        153096711: "V9B0",
        203429377: "VC80",
        169874193: "VAB1",
        153094418: "V930",
        136318979: "V8A0",
        136317187: "V860",
        119541763: "V7G0",
        119539717: "V790",
        119539715: "V780",
        119539474: "V770",
        102762249: "V6F0",
        102761993: "V6B0",
        102761990: "V6A0",
        102761987: "V690",
        102761746: "V680",
        85984262: "V590",
        52429827: "V3I0",
        52429315: "V3A0",
        52429062: "V370",
        52009216: "V350",
        203429378: "VC81",
    }

    _NAMES_TO_VALUES = {
        "VB50": 186651395,
        "VA70": 169873923,
        "V9B0": 153096711,
        "VC80": 203429377,
        "VAB1": 169874193,
        "V930": 153094418,
        "V8A0": 136318979,
        "V860": 136317187,
        "V7G0": 119541763,
        "V790": 119539717,
        "V780": 119539715,
        "V770": 119539474,
        "V6F0": 102762249,
        "V6B0": 102761993,
        "V6A0": 102761990,
        "V690": 102761987,
        "V680": 102761746,
        "V590": 85984262,
        "V3I0": 52429827,
        "V3A0": 52429315,
        "V370": 52429062,
        "V350": 52009216,
        "VC81": 203429378,
    }


class BaudRate(object):
    BAUD_RATE_75 = 75
    BAUD_RATE_110 = 110
    BAUD_RATE_134 = 134
    BAUD_RATE_150 = 150
    BAUD_RATE_300 = 300
    BAUD_RATE_600 = 600
    BAUD_RATE_1200 = 1200
    BAUD_RATE_1800 = 1800
    BAUD_RATE_2400 = 2400
    BAUD_RATE_4800 = 4800
    BAUD_RATE_7200 = 7200
    BAUD_RATE_9600 = 9600
    BAUD_RATE_14400 = 14400
    BAUD_RATE_19200 = 19200
    BAUD_RATE_38400 = 38400
    BAUD_RATE_57600 = 57600
    BAUD_RATE_115200 = 115200
    BAUD_RATE_128000 = 128000
    BAUD_RATE_230400 = 230400
    BAUD_RATE_460800 = 460800
    BAUD_RATE_921600 = 921600
    BAUD_RATE_1200000 = 1200000
    BAUD_RATE_1843200 = 1843200
    BAUD_RATE_3000000 = 3000000

    _VALUES_TO_NAMES = {
        75: "BAUD_RATE_75",
        110: "BAUD_RATE_110",
        134: "BAUD_RATE_134",
        150: "BAUD_RATE_150",
        300: "BAUD_RATE_300",
        600: "BAUD_RATE_600",
        1200: "BAUD_RATE_1200",
        1800: "BAUD_RATE_1800",
        2400: "BAUD_RATE_2400",
        4800: "BAUD_RATE_4800",
        7200: "BAUD_RATE_7200",
        9600: "BAUD_RATE_9600",
        14400: "BAUD_RATE_14400",
        19200: "BAUD_RATE_19200",
        38400: "BAUD_RATE_38400",
        57600: "BAUD_RATE_57600",
        115200: "BAUD_RATE_115200",
        128000: "BAUD_RATE_128000",
        230400: "BAUD_RATE_230400",
        460800: "BAUD_RATE_460800",
        921600: "BAUD_RATE_921600",
        1200000: "BAUD_RATE_1200000",
        1843200: "BAUD_RATE_1843200",
        3000000: "BAUD_RATE_3000000",
    }

    _NAMES_TO_VALUES = {
        "BAUD_RATE_75": 75,
        "BAUD_RATE_110": 110,
        "BAUD_RATE_134": 134,
        "BAUD_RATE_150": 150,
        "BAUD_RATE_300": 300,
        "BAUD_RATE_600": 600,
        "BAUD_RATE_1200": 1200,
        "BAUD_RATE_1800": 1800,
        "BAUD_RATE_2400": 2400,
        "BAUD_RATE_4800": 4800,
        "BAUD_RATE_7200": 7200,
        "BAUD_RATE_9600": 9600,
        "BAUD_RATE_14400": 14400,
        "BAUD_RATE_19200": 19200,
        "BAUD_RATE_38400": 38400,
        "BAUD_RATE_57600": 57600,
        "BAUD_RATE_115200": 115200,
        "BAUD_RATE_128000": 128000,
        "BAUD_RATE_230400": 230400,
        "BAUD_RATE_460800": 460800,
        "BAUD_RATE_921600": 921600,
        "BAUD_RATE_1200000": 1200000,
        "BAUD_RATE_1843200": 1843200,
        "BAUD_RATE_3000000": 3000000,
    }


class HdlcModeStatus(object):
    NOT_SET = 0
    DISABLE = 1
    ENABLE = 2

    _VALUES_TO_NAMES = {
        0: "NOT_SET",
        1: "DISABLE",
        2: "ENABLE",
    }

    _NAMES_TO_VALUES = {
        "NOT_SET": 0,
        "DISABLE": 1,
        "ENABLE": 2,
    }


class HdlcMode(object):
    NON_HDLC_AUTO = 0
    HDLC_ONLY = 1

    _VALUES_TO_NAMES = {
        0: "NON_HDLC_AUTO",
        1: "HDLC_ONLY",
    }

    _NAMES_TO_VALUES = {
        "NON_HDLC_AUTO": 0,
        "HDLC_ONLY": 1,
    }


class ProfilingTargetType(object):
    HostProfiling = 1
    TargetOverTcp = 2

    _VALUES_TO_NAMES = {
        1: "HostProfiling",
        2: "TargetOverTcp",
    }

    _NAMES_TO_VALUES = {
        "HostProfiling": 1,
        "TargetOverTcp": 2,
    }


class EudPeripheralType(object):
    PERIPHERALTYPE_EUD_NULL = 0
    PERIPHERALTYPE_EUD_CTL = 1
    PERIPHERALTYPE_EUD_JTG = 2
    PERIPHERALTYPE_EUD_SWD = 3
    PERIPHERALTYPE_EUD_TRC = 4
    PERIPHERALTYPE_EUD_COM = 5

    _VALUES_TO_NAMES = {
        0: "PERIPHERALTYPE_EUD_NULL",
        1: "PERIPHERALTYPE_EUD_CTL",
        2: "PERIPHERALTYPE_EUD_JTG",
        3: "PERIPHERALTYPE_EUD_SWD",
        4: "PERIPHERALTYPE_EUD_TRC",
        5: "PERIPHERALTYPE_EUD_COM",
    }

    _NAMES_TO_VALUES = {
        "PERIPHERALTYPE_EUD_NULL": 0,
        "PERIPHERALTYPE_EUD_CTL": 1,
        "PERIPHERALTYPE_EUD_JTG": 2,
        "PERIPHERALTYPE_EUD_SWD": 3,
        "PERIPHERALTYPE_EUD_TRC": 4,
        "PERIPHERALTYPE_EUD_COM": 5,
    }


class XqcnOperationType(object):
    XQCN_BACKUP = 0
    XQCN_RESTORE = 1

    _VALUES_TO_NAMES = {
        0: "XQCN_BACKUP",
        1: "XQCN_RESTORE",
    }

    _NAMES_TO_VALUES = {
        "XQCN_BACKUP": 0,
        "XQCN_RESTORE": 1,
    }


class QmStatusType(object):
    SUCCESS = 0
    E_DEVICE_ERROR = 1
    E_NOT_SUPPORTED = 2
    E_INVALID = 3

    _VALUES_TO_NAMES = {
        0: "SUCCESS",
        1: "E_DEVICE_ERROR",
        2: "E_NOT_SUPPORTED",
        3: "E_INVALID",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 0,
        "E_DEVICE_ERROR": 1,
        "E_NOT_SUPPORTED": 2,
        "E_INVALID": 3,
    }


class ResourcePersistenceType(object):
    STATIC_RESOURCE_PERSISTENCE = 0
    DYNAMIC_RESOURCE_PERSISTENCE = 1

    _VALUES_TO_NAMES = {
        0: "STATIC_RESOURCE_PERSISTENCE",
        1: "DYNAMIC_RESOURCE_PERSISTENCE",
    }

    _NAMES_TO_VALUES = {
        "STATIC_RESOURCE_PERSISTENCE": 0,
        "DYNAMIC_RESOURCE_PERSISTENCE": 1,
    }


class SamplingRatesEnum(object):
    FULL_RATE = 0
    HALF_RATE = 1
    QUARTER_RATE = 2
    EIGHT_RATE = 3
    SIXTEENTH_RATE = 4

    _VALUES_TO_NAMES = {
        0: "FULL_RATE",
        1: "HALF_RATE",
        2: "QUARTER_RATE",
        3: "EIGHT_RATE",
        4: "SIXTEENTH_RATE",
    }

    _NAMES_TO_VALUES = {
        "FULL_RATE": 0,
        "HALF_RATE": 1,
        "QUARTER_RATE": 2,
        "EIGHT_RATE": 3,
        "SIXTEENTH_RATE": 4,
    }


class QspsMessageLevel(object):
    PROFILER_INFO = 0
    PROFILER_WARN = 1
    PROFILER_ERROR = 2
    PROFILER_FATAL = 3
    PROFILER_DEBUG = 4

    _VALUES_TO_NAMES = {
        0: "PROFILER_INFO",
        1: "PROFILER_WARN",
        2: "PROFILER_ERROR",
        3: "PROFILER_FATAL",
        4: "PROFILER_DEBUG",
    }

    _NAMES_TO_VALUES = {
        "PROFILER_INFO": 0,
        "PROFILER_WARN": 1,
        "PROFILER_ERROR": 2,
        "PROFILER_FATAL": 3,
        "PROFILER_DEBUG": 4,
    }


class ProfilingAnalysisType(object):
    ANALYSIS_TYPE_PROFILE = 0
    ANALYSIS_TYPE_ROOFLINE_SYSTEM_PROFILE = 1
    ANALYSIS_TYPE_ROOFLINE_FUNCTIONAL_PROFILE = 2

    _VALUES_TO_NAMES = {
        0: "ANALYSIS_TYPE_PROFILE",
        1: "ANALYSIS_TYPE_ROOFLINE_SYSTEM_PROFILE",
        2: "ANALYSIS_TYPE_ROOFLINE_FUNCTIONAL_PROFILE",
    }

    _NAMES_TO_VALUES = {
        "ANALYSIS_TYPE_PROFILE": 0,
        "ANALYSIS_TYPE_ROOFLINE_SYSTEM_PROFILE": 1,
        "ANALYSIS_TYPE_ROOFLINE_FUNCTIONAL_PROFILE": 2,
    }


class ProfilingFeatureType(object):
    FEATURE_TYPE_PROFILING = 0
    FEATURE_TYPE_ROOFLINE = 1
    FEATURE_TYPE_PROFILING_PLUS_ROOFLINE = 2

    _VALUES_TO_NAMES = {
        0: "FEATURE_TYPE_PROFILING",
        1: "FEATURE_TYPE_ROOFLINE",
        2: "FEATURE_TYPE_PROFILING_PLUS_ROOFLINE",
    }

    _NAMES_TO_VALUES = {
        "FEATURE_TYPE_PROFILING": 0,
        "FEATURE_TYPE_ROOFLINE": 1,
        "FEATURE_TYPE_PROFILING_PLUS_ROOFLINE": 2,
    }


class RooflineCategory(object):
    ROOFLINE_PARSER_CATEGORY_DSP_HVX = 0
    ROOFLINE_PARSER_CATEGORY_DSP_HMX_FXP = 1
    ROOFLINE_PARSER_CATEGORY_DSP_HMX_FLT = 2
    ROOFLINE_PARSER_CATEGORY_DSP_SCALAR = 3

    _VALUES_TO_NAMES = {
        0: "ROOFLINE_PARSER_CATEGORY_DSP_HVX",
        1: "ROOFLINE_PARSER_CATEGORY_DSP_HMX_FXP",
        2: "ROOFLINE_PARSER_CATEGORY_DSP_HMX_FLT",
        3: "ROOFLINE_PARSER_CATEGORY_DSP_SCALAR",
    }

    _NAMES_TO_VALUES = {
        "ROOFLINE_PARSER_CATEGORY_DSP_HVX": 0,
        "ROOFLINE_PARSER_CATEGORY_DSP_HMX_FXP": 1,
        "ROOFLINE_PARSER_CATEGORY_DSP_HMX_FLT": 2,
        "ROOFLINE_PARSER_CATEGORY_DSP_SCALAR": 3,
    }


class ProfilerTimeStampFormat(object):
    RAW_TICKS = 0
    HH_MM_SS_MS = 1

    _VALUES_TO_NAMES = {
        0: "RAW_TICKS",
        1: "HH_MM_SS_MS",
    }

    _NAMES_TO_VALUES = {
        "RAW_TICKS": 0,
        "HH_MM_SS_MS": 1,
    }


class QutsProfilingMode(object):
    QUTS_GRPC = 0
    QUTS_QSPS = 1
    QUTS_QSPS_DLL = 2

    _VALUES_TO_NAMES = {
        0: "QUTS_GRPC",
        1: "QUTS_QSPS",
        2: "QUTS_QSPS_DLL",
    }

    _NAMES_TO_VALUES = {
        "QUTS_GRPC": 0,
        "QUTS_QSPS": 1,
        "QUTS_QSPS_DLL": 2,
    }


class ServiceLockState(object):
    UNLOCKED = 0
    LOCKED = 1

    _VALUES_TO_NAMES = {
        0: "UNLOCKED",
        1: "LOCKED",
    }

    _NAMES_TO_VALUES = {
        "UNLOCKED": 0,
        "LOCKED": 1,
    }


class SerialReturnFlags(object):
    SESSION_INDEX = 1
    PROTOCOL_INDEX = 2
    RECEIVE_TIME_DATA = 4
    RECEIVE_TIME_STRING = 8
    BINARY_PAYLOAD = 128

    _VALUES_TO_NAMES = {
        1: "SESSION_INDEX",
        2: "PROTOCOL_INDEX",
        4: "RECEIVE_TIME_DATA",
        8: "RECEIVE_TIME_STRING",
        128: "BINARY_PAYLOAD",
    }

    _NAMES_TO_VALUES = {
        "SESSION_INDEX": 1,
        "PROTOCOL_INDEX": 2,
        "RECEIVE_TIME_DATA": 4,
        "RECEIVE_TIME_STRING": 8,
        "BINARY_PAYLOAD": 128,
    }


class ClientInfo(object):
    """
    Attributes:
     - clientName
     - licenseKey
     - isAutomation
     - appName
     - username
     - qutsOperatingMode

    """


    def __init__(self, clientName=None, licenseKey=None, isAutomation=None, appName=None, username=None, qutsOperatingMode=None,):
        self.clientName = clientName
        self.licenseKey = licenseKey
        self.isAutomation = isAutomation
        self.appName = appName
        self.username = username
        self.qutsOperatingMode = qutsOperatingMode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clientName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.licenseKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isAutomation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.appName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.qutsOperatingMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClientInfo')
        if self.clientName is not None:
            oprot.writeFieldBegin('clientName', TType.STRING, 1)
            oprot.writeString(self.clientName.encode('utf-8') if sys.version_info[0] == 2 else self.clientName)
            oprot.writeFieldEnd()
        if self.licenseKey is not None:
            oprot.writeFieldBegin('licenseKey', TType.STRING, 2)
            oprot.writeString(self.licenseKey.encode('utf-8') if sys.version_info[0] == 2 else self.licenseKey)
            oprot.writeFieldEnd()
        if self.isAutomation is not None:
            oprot.writeFieldBegin('isAutomation', TType.BOOL, 3)
            oprot.writeBool(self.isAutomation)
            oprot.writeFieldEnd()
        if self.appName is not None:
            oprot.writeFieldBegin('appName', TType.STRING, 4)
            oprot.writeString(self.appName.encode('utf-8') if sys.version_info[0] == 2 else self.appName)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 5)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.qutsOperatingMode is not None:
            oprot.writeFieldBegin('qutsOperatingMode', TType.I32, 6)
            oprot.writeI32(self.qutsOperatingMode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.clientName is None:
            raise TProtocolException(message='Required field clientName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ErrorType(object):
    """
    Attributes:
     - errorCode
     - errorString

    """


    def __init__(self, errorCode=None, errorString=None,):
        self.errorCode = errorCode
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ErrorType')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 2)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.errorCode is None:
            raise TProtocolException(message='Required field errorCode is unset!')
        if self.errorString is None:
            raise TProtocolException(message='Required field errorString is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AppException(TException):
    """
    Attributes:
     - errorCode
     - errorString

    """


    def __init__(self, errorCode=None, errorString=None,):
        super(AppException, self).__setattr__('errorCode', errorCode)
        super(AppException, self).__setattr__('errorString', errorString)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.errorCode, self.errorString, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        errorCode = None
        errorString = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            errorCode=errorCode,
            errorString=errorString,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AppException')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 2)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.errorCode is None:
            raise TProtocolException(message='Required field errorCode is unset!')
        if self.errorString is None:
            raise TProtocolException(message='Required field errorString is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtocolUsageIndicator(object):
    """
    Attributes:
     - flowControlStatus
     - flowControlLevel
     - ioWatermark
     - functionWatermark

    """


    def __init__(self, flowControlStatus=None, flowControlLevel=None, ioWatermark=None, functionWatermark=None,):
        self.flowControlStatus = flowControlStatus
        self.flowControlLevel = flowControlLevel
        self.ioWatermark = ioWatermark
        self.functionWatermark = functionWatermark

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flowControlStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.flowControlLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.ioWatermark = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.functionWatermark = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtocolUsageIndicator')
        if self.flowControlStatus is not None:
            oprot.writeFieldBegin('flowControlStatus', TType.I32, 1)
            oprot.writeI32(self.flowControlStatus)
            oprot.writeFieldEnd()
        if self.flowControlLevel is not None:
            oprot.writeFieldBegin('flowControlLevel', TType.I32, 2)
            oprot.writeI32(self.flowControlLevel)
            oprot.writeFieldEnd()
        if self.ioWatermark is not None:
            oprot.writeFieldBegin('ioWatermark', TType.I32, 3)
            oprot.writeI32(self.ioWatermark)
            oprot.writeFieldEnd()
        if self.functionWatermark is not None:
            oprot.writeFieldBegin('functionWatermark', TType.I32, 4)
            oprot.writeI32(self.functionWatermark)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UsageIndicators(object):
    """
    Attributes:
     - isOptimal
     - indicators

    """


    def __init__(self, isOptimal=None, indicators=None,):
        self.isOptimal = isOptimal
        self.indicators = indicators

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isOptimal = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.indicators = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI64()
                        _val6 = ProtocolUsageIndicator()
                        _val6.read(iprot)
                        self.indicators[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UsageIndicators')
        if self.isOptimal is not None:
            oprot.writeFieldBegin('isOptimal', TType.BOOL, 1)
            oprot.writeBool(self.isOptimal)
            oprot.writeFieldEnd()
        if self.indicators is not None:
            oprot.writeFieldBegin('indicators', TType.MAP, 2)
            oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.indicators))
            for kiter7, viter8 in self.indicators.items():
                oprot.writeI64(kiter7)
                viter8.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LockStatus(object):
    """
    Attributes:
     - lockState
     - clientId
     - reason

    """


    def __init__(self, lockState=None, clientId=None, reason=None,):
        self.lockState = lockState
        self.clientId = clientId
        self.reason = reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.lockState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.clientId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LockStatus')
        if self.lockState is not None:
            oprot.writeFieldBegin('lockState', TType.I32, 1)
            oprot.writeI32(self.lockState)
            oprot.writeFieldEnd()
        if self.clientId is not None:
            oprot.writeFieldBegin('clientId', TType.I64, 2)
            oprot.writeI64(self.clientId)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 3)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MbnDownloadStatus(object):
    """
    Attributes:
     - downloadState
     - indicationToken
     - configType
     - subscriptionId
     - activeConfigId
     - pendingConfigId

    """


    def __init__(self, downloadState=None, indicationToken=None, configType=None, subscriptionId=None, activeConfigId=None, pendingConfigId=None,):
        self.downloadState = downloadState
        self.indicationToken = indicationToken
        self.configType = configType
        self.subscriptionId = subscriptionId
        self.activeConfigId = activeConfigId
        self.pendingConfigId = pendingConfigId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.downloadState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.indicationToken = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.configType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.subscriptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.activeConfigId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.pendingConfigId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MbnDownloadStatus')
        if self.downloadState is not None:
            oprot.writeFieldBegin('downloadState', TType.I32, 1)
            oprot.writeI32(self.downloadState)
            oprot.writeFieldEnd()
        if self.indicationToken is not None:
            oprot.writeFieldBegin('indicationToken', TType.I32, 2)
            oprot.writeI32(self.indicationToken)
            oprot.writeFieldEnd()
        if self.configType is not None:
            oprot.writeFieldBegin('configType', TType.I32, 3)
            oprot.writeI32(self.configType)
            oprot.writeFieldEnd()
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I32, 4)
            oprot.writeI32(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.activeConfigId is not None:
            oprot.writeFieldBegin('activeConfigId', TType.STRING, 5)
            oprot.writeString(self.activeConfigId.encode('utf-8') if sys.version_info[0] == 2 else self.activeConfigId)
            oprot.writeFieldEnd()
        if self.pendingConfigId is not None:
            oprot.writeFieldBegin('pendingConfigId', TType.STRING, 6)
            oprot.writeString(self.pendingConfigId.encode('utf-8') if sys.version_info[0] == 2 else self.pendingConfigId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtocolInfo(object):
    """
    Attributes:
     - protocolHandle
     - deviceHandle
     - description
     - protocolType
     - connectionType
     - connectionStatus
     - shareStatus
     - protocolState
     - localPort
     - remotePort
     - direction
     - alternateDescription

    """


    def __init__(self, protocolHandle=None, deviceHandle=None, description=None, protocolType=None, connectionType=None, connectionStatus=None, shareStatus=None, protocolState=None, localPort=None, remotePort=None, direction=None, alternateDescription=None,):
        self.protocolHandle = protocolHandle
        self.deviceHandle = deviceHandle
        self.description = description
        self.protocolType = protocolType
        self.connectionType = connectionType
        self.connectionStatus = connectionStatus
        self.shareStatus = shareStatus
        self.protocolState = protocolState
        self.localPort = localPort
        self.remotePort = remotePort
        self.direction = direction
        self.alternateDescription = alternateDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.deviceHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.protocolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.connectionType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.connectionStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.shareStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.protocolState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.localPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.remotePort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.alternateDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtocolInfo')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.deviceHandle is not None:
            oprot.writeFieldBegin('deviceHandle', TType.I64, 2)
            oprot.writeI64(self.deviceHandle)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.protocolType is not None:
            oprot.writeFieldBegin('protocolType', TType.I32, 4)
            oprot.writeI32(self.protocolType)
            oprot.writeFieldEnd()
        if self.connectionType is not None:
            oprot.writeFieldBegin('connectionType', TType.I32, 5)
            oprot.writeI32(self.connectionType)
            oprot.writeFieldEnd()
        if self.connectionStatus is not None:
            oprot.writeFieldBegin('connectionStatus', TType.I32, 6)
            oprot.writeI32(self.connectionStatus)
            oprot.writeFieldEnd()
        if self.shareStatus is not None:
            oprot.writeFieldBegin('shareStatus', TType.I32, 7)
            oprot.writeI32(self.shareStatus)
            oprot.writeFieldEnd()
        if self.protocolState is not None:
            oprot.writeFieldBegin('protocolState', TType.I32, 8)
            oprot.writeI32(self.protocolState)
            oprot.writeFieldEnd()
        if self.localPort is not None:
            oprot.writeFieldBegin('localPort', TType.I32, 9)
            oprot.writeI32(self.localPort)
            oprot.writeFieldEnd()
        if self.remotePort is not None:
            oprot.writeFieldBegin('remotePort', TType.I32, 10)
            oprot.writeI32(self.remotePort)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 11)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.alternateDescription is not None:
            oprot.writeFieldBegin('alternateDescription', TType.STRING, 12)
            oprot.writeString(self.alternateDescription.encode('utf-8') if sys.version_info[0] == 2 else self.alternateDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeviceInfo(object):
    """
    Attributes:
     - deviceHandle
     - description
     - protocols
     - services
     - serialNumber
     - adbSerialNumber
     - location
     - vid
     - pid
     - edlChipId
     - devicePhysicalLocation

    """


    def __init__(self, deviceHandle=None, description=None, protocols=None, services=None, serialNumber=None, adbSerialNumber=None, location=None, vid=None, pid=None, edlChipId=None, devicePhysicalLocation=None,):
        self.deviceHandle = deviceHandle
        self.description = description
        self.protocols = protocols
        self.services = services
        self.serialNumber = serialNumber
        self.adbSerialNumber = adbSerialNumber
        self.location = location
        self.vid = vid
        self.pid = pid
        self.edlChipId = edlChipId
        self.devicePhysicalLocation = devicePhysicalLocation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.deviceHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.protocols = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = ProtocolInfo()
                        _elem14.read(iprot)
                        self.protocols.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.services = []
                    (_etype18, _size15) = iprot.readListBegin()
                    for _i19 in range(_size15):
                        _elem20 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.services.append(_elem20)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.serialNumber = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.adbSerialNumber = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.location = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.vid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.pid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.edlChipId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.devicePhysicalLocation = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeviceInfo')
        if self.deviceHandle is not None:
            oprot.writeFieldBegin('deviceHandle', TType.I64, 1)
            oprot.writeI64(self.deviceHandle)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.protocols is not None:
            oprot.writeFieldBegin('protocols', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.protocols))
            for iter21 in self.protocols:
                iter21.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.services is not None:
            oprot.writeFieldBegin('services', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.services))
            for iter22 in self.services:
                oprot.writeString(iter22.encode('utf-8') if sys.version_info[0] == 2 else iter22)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.serialNumber is not None:
            oprot.writeFieldBegin('serialNumber', TType.STRING, 5)
            oprot.writeString(self.serialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.serialNumber)
            oprot.writeFieldEnd()
        if self.adbSerialNumber is not None:
            oprot.writeFieldBegin('adbSerialNumber', TType.STRING, 6)
            oprot.writeString(self.adbSerialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.adbSerialNumber)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 7)
            oprot.writeString(self.location.encode('utf-8') if sys.version_info[0] == 2 else self.location)
            oprot.writeFieldEnd()
        if self.vid is not None:
            oprot.writeFieldBegin('vid', TType.STRING, 8)
            oprot.writeString(self.vid.encode('utf-8') if sys.version_info[0] == 2 else self.vid)
            oprot.writeFieldEnd()
        if self.pid is not None:
            oprot.writeFieldBegin('pid', TType.STRING, 9)
            oprot.writeString(self.pid.encode('utf-8') if sys.version_info[0] == 2 else self.pid)
            oprot.writeFieldEnd()
        if self.edlChipId is not None:
            oprot.writeFieldBegin('edlChipId', TType.STRING, 10)
            oprot.writeString(self.edlChipId.encode('utf-8') if sys.version_info[0] == 2 else self.edlChipId)
            oprot.writeFieldEnd()
        if self.devicePhysicalLocation is not None:
            oprot.writeFieldBegin('devicePhysicalLocation', TType.STRING, 11)
            oprot.writeString(self.devicePhysicalLocation.encode('utf-8') if sys.version_info[0] == 2 else self.devicePhysicalLocation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class KeyInfo(object):
    """
    Attributes:
     - keyClassification
     - status

    """


    def __init__(self, keyClassification=None, status=None,):
        self.keyClassification = keyClassification
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.keyClassification = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('KeyInfo')
        if self.keyClassification is not None:
            oprot.writeFieldBegin('keyClassification', TType.I32, 1)
            oprot.writeI32(self.keyClassification)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RestrictedLogLicenseInfo(object):
    """
    Attributes:
     - restrictedLogLicenseStatus
     - deviceHandle
     - protocolHandle
     - description

    """


    def __init__(self, restrictedLogLicenseStatus=None, deviceHandle=None, protocolHandle=None, description=None,):
        self.restrictedLogLicenseStatus = restrictedLogLicenseStatus
        self.deviceHandle = deviceHandle
        self.protocolHandle = protocolHandle
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.restrictedLogLicenseStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.deviceHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RestrictedLogLicenseInfo')
        if self.restrictedLogLicenseStatus is not None:
            oprot.writeFieldBegin('restrictedLogLicenseStatus', TType.I32, 1)
            oprot.writeI32(self.restrictedLogLicenseStatus)
            oprot.writeFieldEnd()
        if self.deviceHandle is not None:
            oprot.writeFieldBegin('deviceHandle', TType.I64, 2)
            oprot.writeI64(self.deviceHandle)
            oprot.writeFieldEnd()
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 3)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InputLogMask(object):
    """
    Attributes:
     - dataSourceType
     - filename
     - maskFileContent
     - format

    """


    def __init__(self, dataSourceType=None, filename=None, maskFileContent=None, format=None,):
        self.dataSourceType = dataSourceType
        self.filename = filename
        self.maskFileContent = maskFileContent
        self.format = format

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dataSourceType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.filename = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.maskFileContent = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InputLogMask')
        if self.dataSourceType is not None:
            oprot.writeFieldBegin('dataSourceType', TType.I32, 1)
            oprot.writeI32(self.dataSourceType)
            oprot.writeFieldEnd()
        if self.filename is not None:
            oprot.writeFieldBegin('filename', TType.STRING, 2)
            oprot.writeString(self.filename.encode('utf-8') if sys.version_info[0] == 2 else self.filename)
            oprot.writeFieldEnd()
        if self.maskFileContent is not None:
            oprot.writeFieldBegin('maskFileContent', TType.STRING, 3)
            oprot.writeBinary(self.maskFileContent)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.I32, 4)
            oprot.writeI32(self.format)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagPacketFilter(object):
    """
    Attributes:
     - idOrNameMask
     - subscriptionId
     - logMask
     - formatStringFilter
     - enableMultiSim
     - miscellaneousId
     - internalPacketEnum
     - includeAllOtaLogPackets
     - f3FormatStringFilter
     - qtraceFormatStringFilter
     - prefixFormatStringFilter
     - excludeQEventsFromQTraceTypeFilter
     - subIdIdOrNameMask
     - variantIdToPacketIdMap

    """


    def __init__(self, idOrNameMask=None, subscriptionId=None, logMask=None, formatStringFilter=None, enableMultiSim=None, miscellaneousId=None, internalPacketEnum=None, includeAllOtaLogPackets=None, f3FormatStringFilter=None, qtraceFormatStringFilter=None, prefixFormatStringFilter=None, excludeQEventsFromQTraceTypeFilter=None, subIdIdOrNameMask=None, variantIdToPacketIdMap=None,):
        self.idOrNameMask = idOrNameMask
        self.subscriptionId = subscriptionId
        self.logMask = logMask
        self.formatStringFilter = formatStringFilter
        self.enableMultiSim = enableMultiSim
        self.miscellaneousId = miscellaneousId
        self.internalPacketEnum = internalPacketEnum
        self.includeAllOtaLogPackets = includeAllOtaLogPackets
        self.f3FormatStringFilter = f3FormatStringFilter
        self.qtraceFormatStringFilter = qtraceFormatStringFilter
        self.prefixFormatStringFilter = prefixFormatStringFilter
        self.excludeQEventsFromQTraceTypeFilter = excludeQEventsFromQTraceTypeFilter
        self.subIdIdOrNameMask = subIdIdOrNameMask
        self.variantIdToPacketIdMap = variantIdToPacketIdMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.idOrNameMask = {}
                    (_ktype24, _vtype25, _size23) = iprot.readMapBegin()
                    for _i27 in range(_size23):
                        _key28 = iprot.readI32()
                        _val29 = []
                        (_etype33, _size30) = iprot.readListBegin()
                        for _i34 in range(_size30):
                            _elem35 = DiagIdFilterItem()
                            _elem35.read(iprot)
                            _val29.append(_elem35)
                        iprot.readListEnd()
                        self.idOrNameMask[_key28] = _val29
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.subscriptionId = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = iprot.readI32()
                        self.subscriptionId.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.logMask = InputLogMask()
                    self.logMask.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.formatStringFilter = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.formatStringFilter.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.enableMultiSim = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.miscellaneousId = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = iprot.readI32()
                        self.miscellaneousId.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.internalPacketEnum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.includeAllOtaLogPackets = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.f3FormatStringFilter = {}
                    (_ktype55, _vtype56, _size54) = iprot.readMapBegin()
                    for _i58 in range(_size54):
                        _key59 = iprot.readI32()
                        _val60 = []
                        (_etype64, _size61) = iprot.readListBegin()
                        for _i65 in range(_size61):
                            _elem66 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val60.append(_elem66)
                        iprot.readListEnd()
                        self.f3FormatStringFilter[_key59] = _val60
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.qtraceFormatStringFilter = {}
                    (_ktype68, _vtype69, _size67) = iprot.readMapBegin()
                    for _i71 in range(_size67):
                        _key72 = iprot.readI32()
                        _val73 = []
                        (_etype77, _size74) = iprot.readListBegin()
                        for _i78 in range(_size74):
                            _elem79 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val73.append(_elem79)
                        iprot.readListEnd()
                        self.qtraceFormatStringFilter[_key72] = _val73
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.prefixFormatStringFilter = []
                    (_etype83, _size80) = iprot.readListBegin()
                    for _i84 in range(_size80):
                        _elem85 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.prefixFormatStringFilter.append(_elem85)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.excludeQEventsFromQTraceTypeFilter = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.MAP:
                    self.subIdIdOrNameMask = {}
                    (_ktype87, _vtype88, _size86) = iprot.readMapBegin()
                    for _i90 in range(_size86):
                        _key91 = iprot.readI32()
                        _val92 = {}
                        (_ktype94, _vtype95, _size93) = iprot.readMapBegin()
                        for _i97 in range(_size93):
                            _key98 = iprot.readI32()
                            _val99 = []
                            (_etype103, _size100) = iprot.readListBegin()
                            for _i104 in range(_size100):
                                _elem105 = DiagIdFilterItem()
                                _elem105.read(iprot)
                                _val99.append(_elem105)
                            iprot.readListEnd()
                            _val92[_key98] = _val99
                        iprot.readMapEnd()
                        self.subIdIdOrNameMask[_key91] = _val92
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.MAP:
                    self.variantIdToPacketIdMap = {}
                    (_ktype107, _vtype108, _size106) = iprot.readMapBegin()
                    for _i110 in range(_size106):
                        _key111 = iprot.readI32()
                        _val112 = {}
                        (_ktype114, _vtype115, _size113) = iprot.readMapBegin()
                        for _i117 in range(_size113):
                            _key118 = iprot.readI32()
                            _val119 = set()
                            (_etype123, _size120) = iprot.readSetBegin()
                            for _i124 in range(_size120):
                                _elem125 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                                _val119.add(_elem125)
                            iprot.readSetEnd()
                            _val112[_key118] = _val119
                        iprot.readMapEnd()
                        self.variantIdToPacketIdMap[_key111] = _val112
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagPacketFilter')
        if self.idOrNameMask is not None:
            oprot.writeFieldBegin('idOrNameMask', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.idOrNameMask))
            for kiter126, viter127 in self.idOrNameMask.items():
                oprot.writeI32(kiter126)
                oprot.writeListBegin(TType.STRUCT, len(viter127))
                for iter128 in viter127:
                    iter128.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.subscriptionId))
            for iter129 in self.subscriptionId:
                oprot.writeI32(iter129)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.logMask is not None:
            oprot.writeFieldBegin('logMask', TType.STRUCT, 3)
            self.logMask.write(oprot)
            oprot.writeFieldEnd()
        if self.formatStringFilter is not None:
            oprot.writeFieldBegin('formatStringFilter', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.formatStringFilter))
            for iter130 in self.formatStringFilter:
                oprot.writeString(iter130.encode('utf-8') if sys.version_info[0] == 2 else iter130)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.enableMultiSim is not None:
            oprot.writeFieldBegin('enableMultiSim', TType.BOOL, 5)
            oprot.writeBool(self.enableMultiSim)
            oprot.writeFieldEnd()
        if self.miscellaneousId is not None:
            oprot.writeFieldBegin('miscellaneousId', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.miscellaneousId))
            for iter131 in self.miscellaneousId:
                oprot.writeI32(iter131)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internalPacketEnum is not None:
            oprot.writeFieldBegin('internalPacketEnum', TType.I32, 7)
            oprot.writeI32(self.internalPacketEnum)
            oprot.writeFieldEnd()
        if self.includeAllOtaLogPackets is not None:
            oprot.writeFieldBegin('includeAllOtaLogPackets', TType.BOOL, 8)
            oprot.writeBool(self.includeAllOtaLogPackets)
            oprot.writeFieldEnd()
        if self.f3FormatStringFilter is not None:
            oprot.writeFieldBegin('f3FormatStringFilter', TType.MAP, 9)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.f3FormatStringFilter))
            for kiter132, viter133 in self.f3FormatStringFilter.items():
                oprot.writeI32(kiter132)
                oprot.writeListBegin(TType.STRING, len(viter133))
                for iter134 in viter133:
                    oprot.writeString(iter134.encode('utf-8') if sys.version_info[0] == 2 else iter134)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.qtraceFormatStringFilter is not None:
            oprot.writeFieldBegin('qtraceFormatStringFilter', TType.MAP, 10)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.qtraceFormatStringFilter))
            for kiter135, viter136 in self.qtraceFormatStringFilter.items():
                oprot.writeI32(kiter135)
                oprot.writeListBegin(TType.STRING, len(viter136))
                for iter137 in viter136:
                    oprot.writeString(iter137.encode('utf-8') if sys.version_info[0] == 2 else iter137)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.prefixFormatStringFilter is not None:
            oprot.writeFieldBegin('prefixFormatStringFilter', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.prefixFormatStringFilter))
            for iter138 in self.prefixFormatStringFilter:
                oprot.writeString(iter138.encode('utf-8') if sys.version_info[0] == 2 else iter138)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.excludeQEventsFromQTraceTypeFilter is not None:
            oprot.writeFieldBegin('excludeQEventsFromQTraceTypeFilter', TType.BOOL, 12)
            oprot.writeBool(self.excludeQEventsFromQTraceTypeFilter)
            oprot.writeFieldEnd()
        if self.subIdIdOrNameMask is not None:
            oprot.writeFieldBegin('subIdIdOrNameMask', TType.MAP, 13)
            oprot.writeMapBegin(TType.I32, TType.MAP, len(self.subIdIdOrNameMask))
            for kiter139, viter140 in self.subIdIdOrNameMask.items():
                oprot.writeI32(kiter139)
                oprot.writeMapBegin(TType.I32, TType.LIST, len(viter140))
                for kiter141, viter142 in viter140.items():
                    oprot.writeI32(kiter141)
                    oprot.writeListBegin(TType.STRUCT, len(viter142))
                    for iter143 in viter142:
                        iter143.write(oprot)
                    oprot.writeListEnd()
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.variantIdToPacketIdMap is not None:
            oprot.writeFieldBegin('variantIdToPacketIdMap', TType.MAP, 14)
            oprot.writeMapBegin(TType.I32, TType.MAP, len(self.variantIdToPacketIdMap))
            for kiter144, viter145 in self.variantIdToPacketIdMap.items():
                oprot.writeI32(kiter144)
                oprot.writeMapBegin(TType.I32, TType.SET, len(viter145))
                for kiter146, viter147 in viter145.items():
                    oprot.writeI32(kiter146)
                    oprot.writeSetBegin(TType.STRING, len(viter147))
                    for iter148 in viter147:
                        oprot.writeString(iter148.encode('utf-8') if sys.version_info[0] == 2 else iter148)
                    oprot.writeSetEnd()
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagSearchSettings(object):
    """
    Attributes:
     - searchString
     - options
     - fields
     - extfields
     - alwaysIncludePacketId

    """


    def __init__(self, searchString=None, options=None, fields=None, extfields=None, alwaysIncludePacketId=None,):
        self.searchString = searchString
        self.options = options
        self.fields = fields
        self.extfields = extfields
        self.alwaysIncludePacketId = alwaysIncludePacketId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.searchString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.options = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.fields = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.extfields = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.alwaysIncludePacketId = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagSearchSettings')
        if self.searchString is not None:
            oprot.writeFieldBegin('searchString', TType.STRING, 1)
            oprot.writeString(self.searchString.encode('utf-8') if sys.version_info[0] == 2 else self.searchString)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.I32, 2)
            oprot.writeI32(self.options)
            oprot.writeFieldEnd()
        if self.fields is not None:
            oprot.writeFieldBegin('fields', TType.I32, 3)
            oprot.writeI32(self.fields)
            oprot.writeFieldEnd()
        if self.extfields is not None:
            oprot.writeFieldBegin('extfields', TType.I32, 4)
            oprot.writeI32(self.extfields)
            oprot.writeFieldEnd()
        if self.alwaysIncludePacketId is not None:
            oprot.writeFieldBegin('alwaysIncludePacketId', TType.BOOL, 5)
            oprot.writeBool(self.alwaysIncludePacketId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FieldQuerySettings(object):
    """
    Attributes:
     - enumReturnForFieldQuery

    """


    def __init__(self, enumReturnForFieldQuery=None,):
        self.enumReturnForFieldQuery = enumReturnForFieldQuery

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.enumReturnForFieldQuery = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FieldQuerySettings')
        if self.enumReturnForFieldQuery is not None:
            oprot.writeFieldBegin('enumReturnForFieldQuery', TType.I32, 1)
            oprot.writeI32(self.enumReturnForFieldQuery)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagIdFilterItem(object):
    """
    Attributes:
     - idOrName
     - regexFilter
     - summaryRegexFilter
     - caseInsensitive
     - searchSettings

    """


    def __init__(self, idOrName=None, regexFilter=None, summaryRegexFilter=None, caseInsensitive=None, searchSettings=None,):
        self.idOrName = idOrName
        self.regexFilter = regexFilter
        self.summaryRegexFilter = summaryRegexFilter
        self.caseInsensitive = caseInsensitive
        self.searchSettings = searchSettings

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.idOrName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.regexFilter = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.summaryRegexFilter = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.caseInsensitive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.searchSettings = DiagSearchSettings()
                    self.searchSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagIdFilterItem')
        if self.idOrName is not None:
            oprot.writeFieldBegin('idOrName', TType.STRING, 1)
            oprot.writeString(self.idOrName.encode('utf-8') if sys.version_info[0] == 2 else self.idOrName)
            oprot.writeFieldEnd()
        if self.regexFilter is not None:
            oprot.writeFieldBegin('regexFilter', TType.STRING, 2)
            oprot.writeString(self.regexFilter.encode('utf-8') if sys.version_info[0] == 2 else self.regexFilter)
            oprot.writeFieldEnd()
        if self.summaryRegexFilter is not None:
            oprot.writeFieldBegin('summaryRegexFilter', TType.STRING, 3)
            oprot.writeString(self.summaryRegexFilter.encode('utf-8') if sys.version_info[0] == 2 else self.summaryRegexFilter)
            oprot.writeFieldEnd()
        if self.caseInsensitive is not None:
            oprot.writeFieldBegin('caseInsensitive', TType.BOOL, 4)
            oprot.writeBool(self.caseInsensitive)
            oprot.writeFieldEnd()
        if self.searchSettings is not None:
            oprot.writeFieldBegin('searchSettings', TType.STRUCT, 5)
            self.searchSettings.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagReturns(object):
    """
    Attributes:
     - flags
     - queries
     - extFlags

    """


    def __init__(self, flags=None, queries=None, extFlags=None,):
        self.flags = flags
        self.queries = queries
        self.extFlags = extFlags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.queries = []
                    (_etype152, _size149) = iprot.readListBegin()
                    for _i153 in range(_size149):
                        _elem154 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.queries.append(_elem154)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.extFlags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagReturns')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.queries is not None:
            oprot.writeFieldBegin('queries', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.queries))
            for iter155 in self.queries:
                oprot.writeString(iter155.encode('utf-8') if sys.version_info[0] == 2 else iter155)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.extFlags is not None:
            oprot.writeFieldBegin('extFlags', TType.I32, 3)
            oprot.writeI32(self.extFlags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagReturnConfig(object):
    """
    Attributes:
     - flags
     - fieldQueries
     - diagTimeSorted
     - formatStringArguments
     - extFlags
     - enumReturnRawValue
     - useFormatForFieldQuery
     - bShowHiddenField
     - useStringForArrayIndex
     - fieldQuerySettings

    """


    def __init__(self, flags=None, fieldQueries=None, diagTimeSorted=None, formatStringArguments=None, extFlags=None, enumReturnRawValue=None, useFormatForFieldQuery=None, bShowHiddenField=None, useStringForArrayIndex=None, fieldQuerySettings=None,):
        self.flags = flags
        self.fieldQueries = fieldQueries
        self.diagTimeSorted = diagTimeSorted
        self.formatStringArguments = formatStringArguments
        self.extFlags = extFlags
        self.enumReturnRawValue = enumReturnRawValue
        self.useFormatForFieldQuery = useFormatForFieldQuery
        self.bShowHiddenField = bShowHiddenField
        self.useStringForArrayIndex = useStringForArrayIndex
        self.fieldQuerySettings = fieldQuerySettings

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.fieldQueries = {}
                    (_ktype157, _vtype158, _size156) = iprot.readMapBegin()
                    for _i160 in range(_size156):
                        _key161 = iprot.readI32()
                        _val162 = {}
                        (_ktype164, _vtype165, _size163) = iprot.readMapBegin()
                        for _i167 in range(_size163):
                            _key168 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val169 = DiagReturns()
                            _val169.read(iprot)
                            _val162[_key168] = _val169
                        iprot.readMapEnd()
                        self.fieldQueries[_key161] = _val162
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.diagTimeSorted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.formatStringArguments = {}
                    (_ktype171, _vtype172, _size170) = iprot.readMapBegin()
                    for _i174 in range(_size170):
                        _key175 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val176 = set()
                        (_etype180, _size177) = iprot.readSetBegin()
                        for _i181 in range(_size177):
                            _elem182 = iprot.readI32()
                            _val176.add(_elem182)
                        iprot.readSetEnd()
                        self.formatStringArguments[_key175] = _val176
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.extFlags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.enumReturnRawValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.useFormatForFieldQuery = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.bShowHiddenField = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.useStringForArrayIndex = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.fieldQuerySettings = FieldQuerySettings()
                    self.fieldQuerySettings.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.fieldQueries is not None:
            oprot.writeFieldBegin('fieldQueries', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.MAP, len(self.fieldQueries))
            for kiter183, viter184 in self.fieldQueries.items():
                oprot.writeI32(kiter183)
                oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter184))
                for kiter185, viter186 in viter184.items():
                    oprot.writeString(kiter185.encode('utf-8') if sys.version_info[0] == 2 else kiter185)
                    viter186.write(oprot)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.diagTimeSorted is not None:
            oprot.writeFieldBegin('diagTimeSorted', TType.BOOL, 3)
            oprot.writeBool(self.diagTimeSorted)
            oprot.writeFieldEnd()
        if self.formatStringArguments is not None:
            oprot.writeFieldBegin('formatStringArguments', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.formatStringArguments))
            for kiter187, viter188 in self.formatStringArguments.items():
                oprot.writeString(kiter187.encode('utf-8') if sys.version_info[0] == 2 else kiter187)
                oprot.writeSetBegin(TType.I32, len(viter188))
                for iter189 in viter188:
                    oprot.writeI32(iter189)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.extFlags is not None:
            oprot.writeFieldBegin('extFlags', TType.I32, 5)
            oprot.writeI32(self.extFlags)
            oprot.writeFieldEnd()
        if self.enumReturnRawValue is not None:
            oprot.writeFieldBegin('enumReturnRawValue', TType.BOOL, 6)
            oprot.writeBool(self.enumReturnRawValue)
            oprot.writeFieldEnd()
        if self.useFormatForFieldQuery is not None:
            oprot.writeFieldBegin('useFormatForFieldQuery', TType.BOOL, 7)
            oprot.writeBool(self.useFormatForFieldQuery)
            oprot.writeFieldEnd()
        if self.bShowHiddenField is not None:
            oprot.writeFieldBegin('bShowHiddenField', TType.BOOL, 8)
            oprot.writeBool(self.bShowHiddenField)
            oprot.writeFieldEnd()
        if self.useStringForArrayIndex is not None:
            oprot.writeFieldBegin('useStringForArrayIndex', TType.BOOL, 9)
            oprot.writeBool(self.useStringForArrayIndex)
            oprot.writeFieldEnd()
        if self.fieldQuerySettings is not None:
            oprot.writeFieldBegin('fieldQuerySettings', TType.STRUCT, 10)
            self.fieldQuerySettings.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagPacket(object):
    """
    Attributes:
     - errorCode
     - packetType
     - packetId
     - moreResponsesFlag
     - sessionIndex
     - protocolIndex
     - packetName
     - timeStampData
     - timeStampString
     - binaryPayload
     - parsedText
     - subscriptionId
     - processorId
     - hwTimeStampData
     - hwTimeStampString
     - ulogSource
     - receiveTimeData
     - receiveTimeString
     - queryResultJson
     - summaryText
     - transactionId
     - qdssChannelId
     - qdssMasterId
     - qdssAtid
     - defaultFormatText
     - callFrameNumber
     - timeStampTodAdjustedData
     - timeStampTodAdjustedString
     - formatStringArguments
     - packetSize
     - qtraceTags
     - miscellaneousId
     - queryResultPickled
     - formatStringHash
     - encryptionKeyInfo
     - exceptionMessageType
     - parsedTextJson
     - diagId
     - diagIdProcessorName

    """


    def __init__(self, errorCode=None, packetType=None, packetId=None, moreResponsesFlag=None, sessionIndex=None, protocolIndex=None, packetName=None, timeStampData=None, timeStampString=None, binaryPayload=None, parsedText=None, subscriptionId=None, processorId=None, hwTimeStampData=None, hwTimeStampString=None, ulogSource=None, receiveTimeData=None, receiveTimeString=None, queryResultJson=None, summaryText=None, transactionId=None, qdssChannelId=None, qdssMasterId=None, qdssAtid=None, defaultFormatText=None, callFrameNumber=None, timeStampTodAdjustedData=None, timeStampTodAdjustedString=None, formatStringArguments=None, packetSize=None, qtraceTags=None, miscellaneousId=None, queryResultPickled=None, formatStringHash=None, encryptionKeyInfo=None, exceptionMessageType=None, parsedTextJson=None, diagId=None, diagIdProcessorName=None,):
        self.errorCode = errorCode
        self.packetType = packetType
        self.packetId = packetId
        self.moreResponsesFlag = moreResponsesFlag
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetName = packetName
        self.timeStampData = timeStampData
        self.timeStampString = timeStampString
        self.binaryPayload = binaryPayload
        self.parsedText = parsedText
        self.subscriptionId = subscriptionId
        self.processorId = processorId
        self.hwTimeStampData = hwTimeStampData
        self.hwTimeStampString = hwTimeStampString
        self.ulogSource = ulogSource
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString
        self.queryResultJson = queryResultJson
        self.summaryText = summaryText
        self.transactionId = transactionId
        self.qdssChannelId = qdssChannelId
        self.qdssMasterId = qdssMasterId
        self.qdssAtid = qdssAtid
        self.defaultFormatText = defaultFormatText
        self.callFrameNumber = callFrameNumber
        self.timeStampTodAdjustedData = timeStampTodAdjustedData
        self.timeStampTodAdjustedString = timeStampTodAdjustedString
        self.formatStringArguments = formatStringArguments
        self.packetSize = packetSize
        self.qtraceTags = qtraceTags
        self.miscellaneousId = miscellaneousId
        self.queryResultPickled = queryResultPickled
        self.formatStringHash = formatStringHash
        self.encryptionKeyInfo = encryptionKeyInfo
        self.exceptionMessageType = exceptionMessageType
        self.parsedTextJson = parsedTextJson
        self.diagId = diagId
        self.diagIdProcessorName = diagIdProcessorName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.packetType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.packetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.moreResponsesFlag = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.packetName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.timeStampData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.timeStampString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.parsedText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.subscriptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I16:
                    self.processorId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.hwTimeStampData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.hwTimeStampString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.ulogSource = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.queryResultJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.summaryText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I64:
                    self.transactionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I16:
                    self.qdssChannelId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I16:
                    self.qdssMasterId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BYTE:
                    self.qdssAtid = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.defaultFormatText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I16:
                    self.callFrameNumber = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I64:
                    self.timeStampTodAdjustedData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.timeStampTodAdjustedString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.LIST:
                    self.formatStringArguments = []
                    (_etype193, _size190) = iprot.readListBegin()
                    for _i194 in range(_size190):
                        _elem195 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.formatStringArguments.append(_elem195)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I16:
                    self.packetSize = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.LIST:
                    self.qtraceTags = []
                    (_etype199, _size196) = iprot.readListBegin()
                    for _i200 in range(_size196):
                        _elem201 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.qtraceTags.append(_elem201)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.I32:
                    self.miscellaneousId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.queryResultPickled = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.I64:
                    self.formatStringHash = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRUCT:
                    self.encryptionKeyInfo = KeyInfo()
                    self.encryptionKeyInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.I32:
                    self.exceptionMessageType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRING:
                    self.parsedTextJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.I16:
                    self.diagId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.STRING:
                    self.diagIdProcessorName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetType is not None:
            oprot.writeFieldBegin('packetType', TType.I32, 2)
            oprot.writeI32(self.packetType)
            oprot.writeFieldEnd()
        if self.packetId is not None:
            oprot.writeFieldBegin('packetId', TType.STRING, 3)
            oprot.writeString(self.packetId.encode('utf-8') if sys.version_info[0] == 2 else self.packetId)
            oprot.writeFieldEnd()
        if self.moreResponsesFlag is not None:
            oprot.writeFieldBegin('moreResponsesFlag', TType.BOOL, 4)
            oprot.writeBool(self.moreResponsesFlag)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 5)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 6)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetName is not None:
            oprot.writeFieldBegin('packetName', TType.STRING, 7)
            oprot.writeString(self.packetName.encode('utf-8') if sys.version_info[0] == 2 else self.packetName)
            oprot.writeFieldEnd()
        if self.timeStampData is not None:
            oprot.writeFieldBegin('timeStampData', TType.I64, 8)
            oprot.writeI64(self.timeStampData)
            oprot.writeFieldEnd()
        if self.timeStampString is not None:
            oprot.writeFieldBegin('timeStampString', TType.STRING, 9)
            oprot.writeString(self.timeStampString.encode('utf-8') if sys.version_info[0] == 2 else self.timeStampString)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 10)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        if self.parsedText is not None:
            oprot.writeFieldBegin('parsedText', TType.STRING, 11)
            oprot.writeString(self.parsedText.encode('utf-8') if sys.version_info[0] == 2 else self.parsedText)
            oprot.writeFieldEnd()
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I32, 12)
            oprot.writeI32(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.processorId is not None:
            oprot.writeFieldBegin('processorId', TType.I16, 13)
            oprot.writeI16(self.processorId)
            oprot.writeFieldEnd()
        if self.hwTimeStampData is not None:
            oprot.writeFieldBegin('hwTimeStampData', TType.I64, 14)
            oprot.writeI64(self.hwTimeStampData)
            oprot.writeFieldEnd()
        if self.hwTimeStampString is not None:
            oprot.writeFieldBegin('hwTimeStampString', TType.STRING, 15)
            oprot.writeString(self.hwTimeStampString.encode('utf-8') if sys.version_info[0] == 2 else self.hwTimeStampString)
            oprot.writeFieldEnd()
        if self.ulogSource is not None:
            oprot.writeFieldBegin('ulogSource', TType.STRING, 16)
            oprot.writeString(self.ulogSource.encode('utf-8') if sys.version_info[0] == 2 else self.ulogSource)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 17)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 18)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        if self.queryResultJson is not None:
            oprot.writeFieldBegin('queryResultJson', TType.STRING, 19)
            oprot.writeString(self.queryResultJson.encode('utf-8') if sys.version_info[0] == 2 else self.queryResultJson)
            oprot.writeFieldEnd()
        if self.summaryText is not None:
            oprot.writeFieldBegin('summaryText', TType.STRING, 20)
            oprot.writeString(self.summaryText.encode('utf-8') if sys.version_info[0] == 2 else self.summaryText)
            oprot.writeFieldEnd()
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.I64, 21)
            oprot.writeI64(self.transactionId)
            oprot.writeFieldEnd()
        if self.qdssChannelId is not None:
            oprot.writeFieldBegin('qdssChannelId', TType.I16, 22)
            oprot.writeI16(self.qdssChannelId)
            oprot.writeFieldEnd()
        if self.qdssMasterId is not None:
            oprot.writeFieldBegin('qdssMasterId', TType.I16, 23)
            oprot.writeI16(self.qdssMasterId)
            oprot.writeFieldEnd()
        if self.qdssAtid is not None:
            oprot.writeFieldBegin('qdssAtid', TType.BYTE, 24)
            oprot.writeByte(self.qdssAtid)
            oprot.writeFieldEnd()
        if self.defaultFormatText is not None:
            oprot.writeFieldBegin('defaultFormatText', TType.STRING, 25)
            oprot.writeString(self.defaultFormatText.encode('utf-8') if sys.version_info[0] == 2 else self.defaultFormatText)
            oprot.writeFieldEnd()
        if self.callFrameNumber is not None:
            oprot.writeFieldBegin('callFrameNumber', TType.I16, 26)
            oprot.writeI16(self.callFrameNumber)
            oprot.writeFieldEnd()
        if self.timeStampTodAdjustedData is not None:
            oprot.writeFieldBegin('timeStampTodAdjustedData', TType.I64, 27)
            oprot.writeI64(self.timeStampTodAdjustedData)
            oprot.writeFieldEnd()
        if self.timeStampTodAdjustedString is not None:
            oprot.writeFieldBegin('timeStampTodAdjustedString', TType.STRING, 28)
            oprot.writeString(self.timeStampTodAdjustedString.encode('utf-8') if sys.version_info[0] == 2 else self.timeStampTodAdjustedString)
            oprot.writeFieldEnd()
        if self.formatStringArguments is not None:
            oprot.writeFieldBegin('formatStringArguments', TType.LIST, 29)
            oprot.writeListBegin(TType.STRING, len(self.formatStringArguments))
            for iter202 in self.formatStringArguments:
                oprot.writeString(iter202.encode('utf-8') if sys.version_info[0] == 2 else iter202)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.packetSize is not None:
            oprot.writeFieldBegin('packetSize', TType.I16, 30)
            oprot.writeI16(self.packetSize)
            oprot.writeFieldEnd()
        if self.qtraceTags is not None:
            oprot.writeFieldBegin('qtraceTags', TType.LIST, 31)
            oprot.writeListBegin(TType.STRING, len(self.qtraceTags))
            for iter203 in self.qtraceTags:
                oprot.writeString(iter203.encode('utf-8') if sys.version_info[0] == 2 else iter203)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.miscellaneousId is not None:
            oprot.writeFieldBegin('miscellaneousId', TType.I32, 32)
            oprot.writeI32(self.miscellaneousId)
            oprot.writeFieldEnd()
        if self.queryResultPickled is not None:
            oprot.writeFieldBegin('queryResultPickled', TType.STRING, 33)
            oprot.writeBinary(self.queryResultPickled)
            oprot.writeFieldEnd()
        if self.formatStringHash is not None:
            oprot.writeFieldBegin('formatStringHash', TType.I64, 34)
            oprot.writeI64(self.formatStringHash)
            oprot.writeFieldEnd()
        if self.encryptionKeyInfo is not None:
            oprot.writeFieldBegin('encryptionKeyInfo', TType.STRUCT, 35)
            self.encryptionKeyInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.exceptionMessageType is not None:
            oprot.writeFieldBegin('exceptionMessageType', TType.I32, 36)
            oprot.writeI32(self.exceptionMessageType)
            oprot.writeFieldEnd()
        if self.parsedTextJson is not None:
            oprot.writeFieldBegin('parsedTextJson', TType.STRING, 37)
            oprot.writeString(self.parsedTextJson.encode('utf-8') if sys.version_info[0] == 2 else self.parsedTextJson)
            oprot.writeFieldEnd()
        if self.diagId is not None:
            oprot.writeFieldBegin('diagId', TType.I16, 38)
            oprot.writeI16(self.diagId)
            oprot.writeFieldEnd()
        if self.diagIdProcessorName is not None:
            oprot.writeFieldBegin('diagIdProcessorName', TType.STRING, 39)
            oprot.writeString(self.diagIdProcessorName.encode('utf-8') if sys.version_info[0] == 2 else self.diagIdProcessorName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnnotationSearchSettings(object):
    """
    Attributes:
     - searchString
     - options
     - fields

    """


    def __init__(self, searchString=None, options=None, fields=None,):
        self.searchString = searchString
        self.options = options
        self.fields = fields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.searchString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.options = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.fields = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AnnotationSearchSettings')
        if self.searchString is not None:
            oprot.writeFieldBegin('searchString', TType.STRING, 1)
            oprot.writeString(self.searchString.encode('utf-8') if sys.version_info[0] == 2 else self.searchString)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.I32, 2)
            oprot.writeI32(self.options)
            oprot.writeFieldEnd()
        if self.fields is not None:
            oprot.writeFieldBegin('fields', TType.I32, 3)
            oprot.writeI32(self.fields)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnnotationFilterItem(object):
    """
    Attributes:
     - messageId
     - searchSettings

    """


    def __init__(self, messageId=None, searchSettings=None,):
        self.messageId = messageId
        self.searchSettings = searchSettings

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.messageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.searchSettings = AnnotationSearchSettings()
                    self.searchSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AnnotationFilterItem')
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I64, 1)
            oprot.writeI64(self.messageId)
            oprot.writeFieldEnd()
        if self.searchSettings is not None:
            oprot.writeFieldBegin('searchSettings', TType.STRUCT, 2)
            self.searchSettings.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnnotationPacketFilter(object):
    """
    Attributes:
     - includeAnnotations
     - messageIdFilter
     - filter

    """


    def __init__(self, includeAnnotations=None, messageIdFilter=None, filter=None,):
        self.includeAnnotations = includeAnnotations
        self.messageIdFilter = messageIdFilter
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.includeAnnotations = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.messageIdFilter = []
                    (_etype207, _size204) = iprot.readListBegin()
                    for _i208 in range(_size204):
                        _elem209 = iprot.readI64()
                        self.messageIdFilter.append(_elem209)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.filter = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = AnnotationFilterItem()
                        _elem215.read(iprot)
                        self.filter.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AnnotationPacketFilter')
        if self.includeAnnotations is not None:
            oprot.writeFieldBegin('includeAnnotations', TType.BOOL, 1)
            oprot.writeBool(self.includeAnnotations)
            oprot.writeFieldEnd()
        if self.messageIdFilter is not None:
            oprot.writeFieldBegin('messageIdFilter', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.messageIdFilter))
            for iter216 in self.messageIdFilter:
                oprot.writeI64(iter216)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.filter))
            for iter217 in self.filter:
                iter217.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnnotationPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - parsedText
     - messageId
     - receiveTimeData
     - receiveTimeString

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, parsedText=None, messageId=None, receiveTimeData=None, receiveTimeString=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.parsedText = parsedText
        self.messageId = messageId
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.parsedText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.messageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AnnotationPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.parsedText is not None:
            oprot.writeFieldBegin('parsedText', TType.STRING, 4)
            oprot.writeString(self.parsedText.encode('utf-8') if sys.version_info[0] == 2 else self.parsedText)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I64, 5)
            oprot.writeI64(self.messageId)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 6)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 7)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmiPacketFilter(object):
    """
    Attributes:
     - idOrNameMask

    """


    def __init__(self, idOrNameMask=None,):
        self.idOrNameMask = idOrNameMask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.idOrNameMask = {}
                    (_ktype219, _vtype220, _size218) = iprot.readMapBegin()
                    for _i222 in range(_size218):
                        _key223 = iprot.readI32()
                        _val224 = []
                        (_etype228, _size225) = iprot.readListBegin()
                        for _i229 in range(_size225):
                            _elem230 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val224.append(_elem230)
                        iprot.readListEnd()
                        self.idOrNameMask[_key223] = _val224
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmiPacketFilter')
        if self.idOrNameMask is not None:
            oprot.writeFieldBegin('idOrNameMask', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.idOrNameMask))
            for kiter231, viter232 in self.idOrNameMask.items():
                oprot.writeI32(kiter231)
                oprot.writeListBegin(TType.STRING, len(viter232))
                for iter233 in viter232:
                    oprot.writeString(iter233.encode('utf-8') if sys.version_info[0] == 2 else iter233)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmiReturns(object):
    """
    Attributes:
     - flags
     - queries

    """


    def __init__(self, flags=None, queries=None,):
        self.flags = flags
        self.queries = queries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.queries = []
                    (_etype237, _size234) = iprot.readListBegin()
                    for _i238 in range(_size234):
                        _elem239 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.queries.append(_elem239)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmiReturns')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.queries is not None:
            oprot.writeFieldBegin('queries', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.queries))
            for iter240 in self.queries:
                oprot.writeString(iter240.encode('utf-8') if sys.version_info[0] == 2 else iter240)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmiReturnConfig(object):
    """
    Attributes:
     - flags
     - fieldQueries

    """


    def __init__(self, flags=None, fieldQueries=None,):
        self.flags = flags
        self.fieldQueries = fieldQueries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.fieldQueries = {}
                    (_ktype242, _vtype243, _size241) = iprot.readMapBegin()
                    for _i245 in range(_size241):
                        _key246 = iprot.readI32()
                        _val247 = {}
                        (_ktype249, _vtype250, _size248) = iprot.readMapBegin()
                        for _i252 in range(_size248):
                            _key253 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val254 = QmiReturns()
                            _val254.read(iprot)
                            _val247[_key253] = _val254
                        iprot.readMapEnd()
                        self.fieldQueries[_key246] = _val247
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmiReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.fieldQueries is not None:
            oprot.writeFieldBegin('fieldQueries', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.MAP, len(self.fieldQueries))
            for kiter255, viter256 in self.fieldQueries.items():
                oprot.writeI32(kiter255)
                oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter256))
                for kiter257, viter258 in viter256.items():
                    oprot.writeString(kiter257.encode('utf-8') if sys.version_info[0] == 2 else kiter257)
                    viter258.write(oprot)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmiPacket(object):
    """
    Attributes:
     - errorCode
     - packetType
     - serviceId
     - messageId
     - sessionIndex
     - protocolIndex
     - packetName
     - binaryPayload
     - parsedXml
     - receiveTimeData
     - receiveTimeString
     - queryResultJson
     - transactionId

    """


    def __init__(self, errorCode=None, packetType=None, serviceId=None, messageId=None, sessionIndex=None, protocolIndex=None, packetName=None, binaryPayload=None, parsedXml=None, receiveTimeData=None, receiveTimeString=None, queryResultJson=None, transactionId=None,):
        self.errorCode = errorCode
        self.packetType = packetType
        self.serviceId = serviceId
        self.messageId = messageId
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetName = packetName
        self.binaryPayload = binaryPayload
        self.parsedXml = parsedXml
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString
        self.queryResultJson = queryResultJson
        self.transactionId = transactionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.packetType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.serviceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.messageId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.packetName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.parsedXml = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.queryResultJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.transactionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmiPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetType is not None:
            oprot.writeFieldBegin('packetType', TType.I32, 2)
            oprot.writeI32(self.packetType)
            oprot.writeFieldEnd()
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.I32, 3)
            oprot.writeI32(self.serviceId)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I16, 4)
            oprot.writeI16(self.messageId)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 5)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 6)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetName is not None:
            oprot.writeFieldBegin('packetName', TType.STRING, 7)
            oprot.writeString(self.packetName.encode('utf-8') if sys.version_info[0] == 2 else self.packetName)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 8)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        if self.parsedXml is not None:
            oprot.writeFieldBegin('parsedXml', TType.STRING, 9)
            oprot.writeString(self.parsedXml.encode('utf-8') if sys.version_info[0] == 2 else self.parsedXml)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 10)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 11)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        if self.queryResultJson is not None:
            oprot.writeFieldBegin('queryResultJson', TType.STRING, 12)
            oprot.writeString(self.queryResultJson.encode('utf-8') if sys.version_info[0] == 2 else self.queryResultJson)
            oprot.writeFieldEnd()
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.I64, 13)
            oprot.writeI64(self.transactionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdbPacketFilter(object):
    """
    Attributes:
     - regexFilter

    """


    def __init__(self, regexFilter=None,):
        self.regexFilter = regexFilter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.regexFilter = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdbPacketFilter')
        if self.regexFilter is not None:
            oprot.writeFieldBegin('regexFilter', TType.STRING, 1)
            oprot.writeString(self.regexFilter.encode('utf-8') if sys.version_info[0] == 2 else self.regexFilter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdbReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdbReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdbPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - packetText
     - receiveTimeData
     - receiveTimeString

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, packetText=None, receiveTimeData=None, receiveTimeString=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetText = packetText
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.packetText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdbPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetText is not None:
            oprot.writeFieldBegin('packetText', TType.STRING, 4)
            oprot.writeString(self.packetText.encode('utf-8') if sys.version_info[0] == 2 else self.packetText)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 5)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 6)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TelnetPacketFilter(object):
    """
    Attributes:
     - regexFilter

    """


    def __init__(self, regexFilter=None,):
        self.regexFilter = regexFilter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.regexFilter = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TelnetPacketFilter')
        if self.regexFilter is not None:
            oprot.writeFieldBegin('regexFilter', TType.STRING, 1)
            oprot.writeString(self.regexFilter.encode('utf-8') if sys.version_info[0] == 2 else self.regexFilter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TelnetReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TelnetReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TelnetPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - packetText
     - receiveTimeData
     - receiveTimeString

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, packetText=None, receiveTimeData=None, receiveTimeString=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetText = packetText
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.packetText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TelnetPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetText is not None:
            oprot.writeFieldBegin('packetText', TType.STRING, 4)
            oprot.writeString(self.packetText.encode('utf-8') if sys.version_info[0] == 2 else self.packetText)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 5)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 6)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SaharaPacketFilter(object):
    """
    Attributes:
     - idOrNameMask

    """


    def __init__(self, idOrNameMask=None,):
        self.idOrNameMask = idOrNameMask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.idOrNameMask = []
                    (_etype262, _size259) = iprot.readListBegin()
                    for _i263 in range(_size259):
                        _elem264 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.idOrNameMask.append(_elem264)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SaharaPacketFilter')
        if self.idOrNameMask is not None:
            oprot.writeFieldBegin('idOrNameMask', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.idOrNameMask))
            for iter265 in self.idOrNameMask:
                oprot.writeString(iter265.encode('utf-8') if sys.version_info[0] == 2 else iter265)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SaharaReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SaharaReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SaharaPacket(object):
    """
    Attributes:
     - errorCode
     - packetId
     - sessionIndex
     - protocolIndex
     - packetName
     - binaryPayload
     - receiveTimeData
     - receiveTimeString

    """


    def __init__(self, errorCode=None, packetId=None, sessionIndex=None, protocolIndex=None, packetName=None, binaryPayload=None, receiveTimeData=None, receiveTimeString=None,):
        self.errorCode = errorCode
        self.packetId = packetId
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetName = packetName
        self.binaryPayload = binaryPayload
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.packetId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.packetName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SaharaPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetId is not None:
            oprot.writeFieldBegin('packetId', TType.I32, 2)
            oprot.writeI32(self.packetId)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 3)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 4)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetName is not None:
            oprot.writeFieldBegin('packetName', TType.STRING, 5)
            oprot.writeString(self.packetName.encode('utf-8') if sys.version_info[0] == 2 else self.packetName)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 6)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 7)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 8)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FastbootPacketFilter(object):
    """
    Attributes:
     - regexFilter

    """


    def __init__(self, regexFilter=None,):
        self.regexFilter = regexFilter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.regexFilter = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FastbootPacketFilter')
        if self.regexFilter is not None:
            oprot.writeFieldBegin('regexFilter', TType.STRING, 1)
            oprot.writeString(self.regexFilter.encode('utf-8') if sys.version_info[0] == 2 else self.regexFilter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FastbootReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FastbootReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FastbootPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - packetText
     - receiveTimeData
     - receiveTimeString

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, packetText=None, receiveTimeData=None, receiveTimeString=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetText = packetText
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.packetText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FastbootPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetText is not None:
            oprot.writeFieldBegin('packetText', TType.STRING, 4)
            oprot.writeString(self.packetText.encode('utf-8') if sys.version_info[0] == 2 else self.packetText)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 5)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 6)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EudPacketFilter(object):
    """
    Attributes:
     - opCodeMask

    """


    def __init__(self, opCodeMask=None,):
        self.opCodeMask = opCodeMask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.opCodeMask = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.opCodeMask.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EudPacketFilter')
        if self.opCodeMask is not None:
            oprot.writeFieldBegin('opCodeMask', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.opCodeMask))
            for iter272 in self.opCodeMask:
                oprot.writeString(iter272.encode('utf-8') if sys.version_info[0] == 2 else iter272)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EudReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EudReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EudPacket(object):
    """
    Attributes:
     - errorCode
     - packetId
     - sessionIndex
     - protocolIndex
     - packetName
     - binaryPayload
     - receiveTimeData
     - receiveTimeString

    """


    def __init__(self, errorCode=None, packetId=None, sessionIndex=None, protocolIndex=None, packetName=None, binaryPayload=None, receiveTimeData=None, receiveTimeString=None,):
        self.errorCode = errorCode
        self.packetId = packetId
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetName = packetName
        self.binaryPayload = binaryPayload
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.packetId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.packetName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EudPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetId is not None:
            oprot.writeFieldBegin('packetId', TType.I32, 2)
            oprot.writeI32(self.packetId)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 3)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 4)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetName is not None:
            oprot.writeFieldBegin('packetName', TType.STRING, 5)
            oprot.writeString(self.packetName.encode('utf-8') if sys.version_info[0] == 2 else self.packetName)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 6)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 7)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 8)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RpcCapabilityFilterMap(object):
    """
    Attributes:
     - rpcCapabilityFilterList

    """


    def __init__(self, rpcCapabilityFilterList=None,):
        self.rpcCapabilityFilterList = rpcCapabilityFilterList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.rpcCapabilityFilterList = {}
                    (_ktype274, _vtype275, _size273) = iprot.readMapBegin()
                    for _i277 in range(_size273):
                        _key278 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val279 = []
                        (_etype283, _size280) = iprot.readListBegin()
                        for _i284 in range(_size280):
                            _elem285 = CapabilityFilter()
                            _elem285.read(iprot)
                            _val279.append(_elem285)
                        iprot.readListEnd()
                        self.rpcCapabilityFilterList[_key278] = _val279
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RpcCapabilityFilterMap')
        if self.rpcCapabilityFilterList is not None:
            oprot.writeFieldBegin('rpcCapabilityFilterList', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.rpcCapabilityFilterList))
            for kiter286, viter287 in self.rpcCapabilityFilterList.items():
                oprot.writeString(kiter286.encode('utf-8') if sys.version_info[0] == 2 else kiter286)
                oprot.writeListBegin(TType.STRUCT, len(viter287))
                for iter288 in viter287:
                    iter288.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CapabilityFilter(object):
    """
    Attributes:
     - capabilityName
     - metricIdList
     - capabilityType
     - packetType
     - threadName

    """


    def __init__(self, capabilityName=None, metricIdList=None, capabilityType=None, packetType=None, threadName=None,):
        self.capabilityName = capabilityName
        self.metricIdList = metricIdList
        self.capabilityType = capabilityType
        self.packetType = packetType
        self.threadName = threadName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.metricIdList = []
                    (_etype292, _size289) = iprot.readListBegin()
                    for _i293 in range(_size289):
                        _elem294 = iprot.readI32()
                        self.metricIdList.append(_elem294)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.capabilityType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.packetType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.threadName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CapabilityFilter')
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 1)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.metricIdList is not None:
            oprot.writeFieldBegin('metricIdList', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.metricIdList))
            for iter295 in self.metricIdList:
                oprot.writeI32(iter295)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.capabilityType is not None:
            oprot.writeFieldBegin('capabilityType', TType.STRING, 3)
            oprot.writeString(self.capabilityType.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityType)
            oprot.writeFieldEnd()
        if self.packetType is not None:
            oprot.writeFieldBegin('packetType', TType.I32, 4)
            oprot.writeI32(self.packetType)
            oprot.writeFieldEnd()
        if self.threadName is not None:
            oprot.writeFieldBegin('threadName', TType.STRING, 5)
            oprot.writeString(self.threadName.encode('utf-8') if sys.version_info[0] == 2 else self.threadName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtoBufPacketFilter(object):
    """
    Attributes:
     - packetTypeRpcCapabilityFilterMap
     - capabilityFilterList

    """


    def __init__(self, packetTypeRpcCapabilityFilterMap=None, capabilityFilterList=None,):
        self.packetTypeRpcCapabilityFilterMap = packetTypeRpcCapabilityFilterMap
        self.capabilityFilterList = capabilityFilterList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.packetTypeRpcCapabilityFilterMap = {}
                    (_ktype297, _vtype298, _size296) = iprot.readMapBegin()
                    for _i300 in range(_size296):
                        _key301 = iprot.readI32()
                        _val302 = RpcCapabilityFilterMap()
                        _val302.read(iprot)
                        self.packetTypeRpcCapabilityFilterMap[_key301] = _val302
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.capabilityFilterList = []
                    (_etype306, _size303) = iprot.readListBegin()
                    for _i307 in range(_size303):
                        _elem308 = CapabilityFilter()
                        _elem308.read(iprot)
                        self.capabilityFilterList.append(_elem308)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtoBufPacketFilter')
        if self.packetTypeRpcCapabilityFilterMap is not None:
            oprot.writeFieldBegin('packetTypeRpcCapabilityFilterMap', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.packetTypeRpcCapabilityFilterMap))
            for kiter309, viter310 in self.packetTypeRpcCapabilityFilterMap.items():
                oprot.writeI32(kiter309)
                viter310.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.capabilityFilterList is not None:
            oprot.writeFieldBegin('capabilityFilterList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.capabilityFilterList))
            for iter311 in self.capabilityFilterList:
                iter311.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtoBufReturns(object):
    """
    Attributes:
     - flags
     - queries

    """


    def __init__(self, flags=None, queries=None,):
        self.flags = flags
        self.queries = queries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.queries = []
                    (_etype315, _size312) = iprot.readListBegin()
                    for _i316 in range(_size312):
                        _elem317 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.queries.append(_elem317)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtoBufReturns')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.queries is not None:
            oprot.writeFieldBegin('queries', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.queries))
            for iter318 in self.queries:
                oprot.writeString(iter318.encode('utf-8') if sys.version_info[0] == 2 else iter318)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtoBufReturnConfig(object):
    """
    Attributes:
     - flags
     - fieldQueries

    """


    def __init__(self, flags=None, fieldQueries=None,):
        self.flags = flags
        self.fieldQueries = fieldQueries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.fieldQueries = {}
                    (_ktype320, _vtype321, _size319) = iprot.readMapBegin()
                    for _i323 in range(_size319):
                        _key324 = iprot.readI32()
                        _val325 = {}
                        (_ktype327, _vtype328, _size326) = iprot.readMapBegin()
                        for _i330 in range(_size326):
                            _key331 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val332 = ProtoBufReturns()
                            _val332.read(iprot)
                            _val325[_key331] = _val332
                        iprot.readMapEnd()
                        self.fieldQueries[_key324] = _val325
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtoBufReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.fieldQueries is not None:
            oprot.writeFieldBegin('fieldQueries', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.MAP, len(self.fieldQueries))
            for kiter333, viter334 in self.fieldQueries.items():
                oprot.writeI32(kiter333)
                oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter334))
                for kiter335, viter336 in viter334.items():
                    oprot.writeString(kiter335.encode('utf-8') if sys.version_info[0] == 2 else kiter335)
                    viter336.write(oprot)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtoBufPacket(object):
    """
    Attributes:
     - errorCode
     - packetType
     - rpcId
     - messageId
     - sessionIndex
     - protocolIndex
     - packetName
     - binaryPayload
     - parsedText
     - receiveTimeData
     - receiveTimeString
     - queryResultJson
     - queryResultPickled
     - parsedTextJson
     - capabilityName

    """


    def __init__(self, errorCode=None, packetType=None, rpcId=None, messageId=None, sessionIndex=None, protocolIndex=None, packetName=None, binaryPayload=None, parsedText=None, receiveTimeData=None, receiveTimeString=None, queryResultJson=None, queryResultPickled=None, parsedTextJson=None, capabilityName=None,):
        self.errorCode = errorCode
        self.packetType = packetType
        self.rpcId = rpcId
        self.messageId = messageId
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetName = packetName
        self.binaryPayload = binaryPayload
        self.parsedText = parsedText
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString
        self.queryResultJson = queryResultJson
        self.queryResultPickled = queryResultPickled
        self.parsedTextJson = parsedTextJson
        self.capabilityName = capabilityName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.packetType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.rpcId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.messageId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.packetName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.parsedText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.queryResultJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.queryResultPickled = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.parsedTextJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtoBufPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetType is not None:
            oprot.writeFieldBegin('packetType', TType.I32, 2)
            oprot.writeI32(self.packetType)
            oprot.writeFieldEnd()
        if self.rpcId is not None:
            oprot.writeFieldBegin('rpcId', TType.I64, 3)
            oprot.writeI64(self.rpcId)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I16, 4)
            oprot.writeI16(self.messageId)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 5)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 6)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetName is not None:
            oprot.writeFieldBegin('packetName', TType.STRING, 7)
            oprot.writeString(self.packetName.encode('utf-8') if sys.version_info[0] == 2 else self.packetName)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 8)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        if self.parsedText is not None:
            oprot.writeFieldBegin('parsedText', TType.STRING, 9)
            oprot.writeString(self.parsedText.encode('utf-8') if sys.version_info[0] == 2 else self.parsedText)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 10)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 11)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        if self.queryResultJson is not None:
            oprot.writeFieldBegin('queryResultJson', TType.STRING, 12)
            oprot.writeString(self.queryResultJson.encode('utf-8') if sys.version_info[0] == 2 else self.queryResultJson)
            oprot.writeFieldEnd()
        if self.queryResultPickled is not None:
            oprot.writeFieldBegin('queryResultPickled', TType.STRING, 13)
            oprot.writeBinary(self.queryResultPickled)
            oprot.writeFieldEnd()
        if self.parsedTextJson is not None:
            oprot.writeFieldBegin('parsedTextJson', TType.STRING, 14)
            oprot.writeString(self.parsedTextJson.encode('utf-8') if sys.version_info[0] == 2 else self.parsedTextJson)
            oprot.writeFieldEnd()
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 15)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QspsPacketFilter(object):
    """
    Attributes:
     - capabilityFilterList

    """


    def __init__(self, capabilityFilterList=None,):
        self.capabilityFilterList = capabilityFilterList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.capabilityFilterList = []
                    (_etype340, _size337) = iprot.readListBegin()
                    for _i341 in range(_size337):
                        _elem342 = CapabilityFilter()
                        _elem342.read(iprot)
                        self.capabilityFilterList.append(_elem342)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QspsPacketFilter')
        if self.capabilityFilterList is not None:
            oprot.writeFieldBegin('capabilityFilterList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.capabilityFilterList))
            for iter343 in self.capabilityFilterList:
                iter343.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QspsReturns(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QspsReturns')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QspsReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QspsReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QspsPacket(object):
    """
    Attributes:
     - errorCode
     - packetType
     - rpcId
     - messageId
     - sessionIndex
     - protocolIndex
     - packetName
     - binaryPayload
     - parsedText
     - receiveTimeData
     - receiveTimeString
     - queryResultJson
     - queryResultPickled
     - parsedTextJson
     - capabilityName
     - parsedTextCsv
     - profilingPacketType

    """


    def __init__(self, errorCode=None, packetType=None, rpcId=None, messageId=None, sessionIndex=None, protocolIndex=None, packetName=None, binaryPayload=None, parsedText=None, receiveTimeData=None, receiveTimeString=None, queryResultJson=None, queryResultPickled=None, parsedTextJson=None, capabilityName=None, parsedTextCsv=None, profilingPacketType=None,):
        self.errorCode = errorCode
        self.packetType = packetType
        self.rpcId = rpcId
        self.messageId = messageId
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetName = packetName
        self.binaryPayload = binaryPayload
        self.parsedText = parsedText
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString
        self.queryResultJson = queryResultJson
        self.queryResultPickled = queryResultPickled
        self.parsedTextJson = parsedTextJson
        self.capabilityName = capabilityName
        self.parsedTextCsv = parsedTextCsv
        self.profilingPacketType = profilingPacketType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.packetType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.rpcId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.messageId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.packetName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.parsedText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.queryResultJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.queryResultPickled = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.parsedTextJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.parsedTextCsv = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.profilingPacketType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QspsPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetType is not None:
            oprot.writeFieldBegin('packetType', TType.I32, 2)
            oprot.writeI32(self.packetType)
            oprot.writeFieldEnd()
        if self.rpcId is not None:
            oprot.writeFieldBegin('rpcId', TType.I64, 3)
            oprot.writeI64(self.rpcId)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I16, 4)
            oprot.writeI16(self.messageId)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 5)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 6)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetName is not None:
            oprot.writeFieldBegin('packetName', TType.STRING, 7)
            oprot.writeString(self.packetName.encode('utf-8') if sys.version_info[0] == 2 else self.packetName)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 8)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        if self.parsedText is not None:
            oprot.writeFieldBegin('parsedText', TType.STRING, 9)
            oprot.writeString(self.parsedText.encode('utf-8') if sys.version_info[0] == 2 else self.parsedText)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 10)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 11)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        if self.queryResultJson is not None:
            oprot.writeFieldBegin('queryResultJson', TType.STRING, 12)
            oprot.writeString(self.queryResultJson.encode('utf-8') if sys.version_info[0] == 2 else self.queryResultJson)
            oprot.writeFieldEnd()
        if self.queryResultPickled is not None:
            oprot.writeFieldBegin('queryResultPickled', TType.STRING, 13)
            oprot.writeBinary(self.queryResultPickled)
            oprot.writeFieldEnd()
        if self.parsedTextJson is not None:
            oprot.writeFieldBegin('parsedTextJson', TType.STRING, 14)
            oprot.writeString(self.parsedTextJson.encode('utf-8') if sys.version_info[0] == 2 else self.parsedTextJson)
            oprot.writeFieldEnd()
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 15)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.parsedTextCsv is not None:
            oprot.writeFieldBegin('parsedTextCsv', TType.STRING, 16)
            oprot.writeString(self.parsedTextCsv.encode('utf-8') if sys.version_info[0] == 2 else self.parsedTextCsv)
            oprot.writeFieldEnd()
        if self.profilingPacketType is not None:
            oprot.writeFieldBegin('profilingPacketType', TType.I32, 17)
            oprot.writeI32(self.profilingPacketType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RxTxInfo(object):
    """
    Attributes:
     - rxTotalPacketCount
     - txTotalPacketCount
     - rxTotalByteCount
     - txTotalByteCount
     - rxInstThroughput
     - txInstThroughput

    """


    def __init__(self, rxTotalPacketCount=None, txTotalPacketCount=None, rxTotalByteCount=None, txTotalByteCount=None, rxInstThroughput=None, txInstThroughput=None,):
        self.rxTotalPacketCount = rxTotalPacketCount
        self.txTotalPacketCount = txTotalPacketCount
        self.rxTotalByteCount = rxTotalByteCount
        self.txTotalByteCount = txTotalByteCount
        self.rxInstThroughput = rxInstThroughput
        self.txInstThroughput = txInstThroughput

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rxTotalPacketCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.txTotalPacketCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.rxTotalByteCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.txTotalByteCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.rxInstThroughput = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.txInstThroughput = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RxTxInfo')
        if self.rxTotalPacketCount is not None:
            oprot.writeFieldBegin('rxTotalPacketCount', TType.I64, 1)
            oprot.writeI64(self.rxTotalPacketCount)
            oprot.writeFieldEnd()
        if self.txTotalPacketCount is not None:
            oprot.writeFieldBegin('txTotalPacketCount', TType.I64, 2)
            oprot.writeI64(self.txTotalPacketCount)
            oprot.writeFieldEnd()
        if self.rxTotalByteCount is not None:
            oprot.writeFieldBegin('rxTotalByteCount', TType.I64, 3)
            oprot.writeI64(self.rxTotalByteCount)
            oprot.writeFieldEnd()
        if self.txTotalByteCount is not None:
            oprot.writeFieldBegin('txTotalByteCount', TType.I64, 4)
            oprot.writeI64(self.txTotalByteCount)
            oprot.writeFieldEnd()
        if self.rxInstThroughput is not None:
            oprot.writeFieldBegin('rxInstThroughput', TType.DOUBLE, 5)
            oprot.writeDouble(self.rxInstThroughput)
            oprot.writeFieldEnd()
        if self.txInstThroughput is not None:
            oprot.writeFieldBegin('txInstThroughput', TType.DOUBLE, 6)
            oprot.writeDouble(self.txInstThroughput)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdplReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdplReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdplPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - version
     - binaryPayload
     - receiveTimeData
     - receiveTimeString
     - modemTimeData
     - modemTimeDataString
     - diagBinaryPayload

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, version=None, binaryPayload=None, receiveTimeData=None, receiveTimeString=None, modemTimeData=None, modemTimeDataString=None, diagBinaryPayload=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.version = version
        self.binaryPayload = binaryPayload
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString
        self.modemTimeData = modemTimeData
        self.modemTimeDataString = modemTimeDataString
        self.diagBinaryPayload = diagBinaryPayload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.version = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.modemTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.modemTimeDataString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.diagBinaryPayload = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdplPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.BYTE, 4)
            oprot.writeByte(self.version)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 5)
            oprot.writeString(self.binaryPayload.encode('utf-8') if sys.version_info[0] == 2 else self.binaryPayload)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 6)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 7)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        if self.modemTimeData is not None:
            oprot.writeFieldBegin('modemTimeData', TType.I64, 8)
            oprot.writeI64(self.modemTimeData)
            oprot.writeFieldEnd()
        if self.modemTimeDataString is not None:
            oprot.writeFieldBegin('modemTimeDataString', TType.STRING, 9)
            oprot.writeString(self.modemTimeDataString.encode('utf-8') if sys.version_info[0] == 2 else self.modemTimeDataString)
            oprot.writeFieldEnd()
        if self.diagBinaryPayload is not None:
            oprot.writeFieldBegin('diagBinaryPayload', TType.STRING, 10)
            oprot.writeString(self.diagBinaryPayload.encode('utf-8') if sys.version_info[0] == 2 else self.diagBinaryPayload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BuildInfo(object):
    """
    Attributes:
     - msmRevision
     - mobileModelId
     - mobileSoftwareRevision
     - mobileModelName

    """


    def __init__(self, msmRevision=None, mobileModelId=None, mobileSoftwareRevision=None, mobileModelName=None,):
        self.msmRevision = msmRevision
        self.mobileModelId = mobileModelId
        self.mobileSoftwareRevision = mobileSoftwareRevision
        self.mobileModelName = mobileModelName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.msmRevision = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mobileModelId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mobileSoftwareRevision = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.mobileModelName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BuildInfo')
        if self.msmRevision is not None:
            oprot.writeFieldBegin('msmRevision', TType.STRING, 1)
            oprot.writeString(self.msmRevision.encode('utf-8') if sys.version_info[0] == 2 else self.msmRevision)
            oprot.writeFieldEnd()
        if self.mobileModelId is not None:
            oprot.writeFieldBegin('mobileModelId', TType.STRING, 2)
            oprot.writeString(self.mobileModelId.encode('utf-8') if sys.version_info[0] == 2 else self.mobileModelId)
            oprot.writeFieldEnd()
        if self.mobileSoftwareRevision is not None:
            oprot.writeFieldBegin('mobileSoftwareRevision', TType.STRING, 3)
            oprot.writeString(self.mobileSoftwareRevision.encode('utf-8') if sys.version_info[0] == 2 else self.mobileSoftwareRevision)
            oprot.writeFieldEnd()
        if self.mobileModelName is not None:
            oprot.writeFieldBegin('mobileModelName', TType.STRING, 4)
            oprot.writeString(self.mobileModelName.encode('utf-8') if sys.version_info[0] == 2 else self.mobileModelName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ImageInfo(object):
    """
    Attributes:
     - index
     - imageVersion
     - variant
     - oemVersion

    """


    def __init__(self, index=None, imageVersion=None, variant=None, oemVersion=None,):
        self.index = index
        self.imageVersion = imageVersion
        self.variant = variant
        self.oemVersion = oemVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.index = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.imageVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.variant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.oemVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ImageInfo')
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I16, 1)
            oprot.writeI16(self.index)
            oprot.writeFieldEnd()
        if self.imageVersion is not None:
            oprot.writeFieldBegin('imageVersion', TType.STRING, 2)
            oprot.writeString(self.imageVersion.encode('utf-8') if sys.version_info[0] == 2 else self.imageVersion)
            oprot.writeFieldEnd()
        if self.variant is not None:
            oprot.writeFieldBegin('variant', TType.STRING, 3)
            oprot.writeString(self.variant.encode('utf-8') if sys.version_info[0] == 2 else self.variant)
            oprot.writeFieldEnd()
        if self.oemVersion is not None:
            oprot.writeFieldBegin('oemVersion', TType.STRING, 4)
            oprot.writeString(self.oemVersion.encode('utf-8') if sys.version_info[0] == 2 else self.oemVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GpsPacket(object):
    """
    Attributes:
     - errorCode
     - latitude
     - longitude
     - altitude
     - speed
     - time
     - date

    """


    def __init__(self, errorCode=None, latitude=None, longitude=None, altitude=None, speed=None, time=None, date=None,):
        self.errorCode = errorCode
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.speed = speed
        self.time = time
        self.date = date

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.latitude = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.longitude = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.altitude = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.speed = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.date = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GpsPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.STRING, 2)
            oprot.writeString(self.latitude.encode('utf-8') if sys.version_info[0] == 2 else self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.STRING, 3)
            oprot.writeString(self.longitude.encode('utf-8') if sys.version_info[0] == 2 else self.longitude)
            oprot.writeFieldEnd()
        if self.altitude is not None:
            oprot.writeFieldBegin('altitude', TType.STRING, 4)
            oprot.writeString(self.altitude.encode('utf-8') if sys.version_info[0] == 2 else self.altitude)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.STRING, 5)
            oprot.writeString(self.speed.encode('utf-8') if sys.version_info[0] == 2 else self.speed)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 6)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.STRING, 7)
            oprot.writeString(self.date.encode('utf-8') if sys.version_info[0] == 2 else self.date)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NvItem(object):
    """
    Attributes:
     - id
     - name
     - description
     - category

    """


    def __init__(self, id=None, name=None, description=None, category=None,):
        self.id = id
        self.name = name
        self.description = description
        self.category = category

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.category = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NvItem')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.STRING, 4)
            oprot.writeString(self.category.encode('utf-8') if sys.version_info[0] == 2 else self.category)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MbnNvItemDiffDetails(object):
    """
    Attributes:
     - result
     - itemDescriptor
     - index
     - mbnPayload
     - phonePayload

    """


    def __init__(self, result=None, itemDescriptor=None, index=None, mbnPayload=None, phonePayload=None,):
        self.result = result
        self.itemDescriptor = itemDescriptor
        self.index = index
        self.mbnPayload = mbnPayload
        self.phonePayload = phonePayload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.itemDescriptor = NvItem()
                    self.itemDescriptor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.index = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.mbnPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.phonePayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MbnNvItemDiffDetails')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.itemDescriptor is not None:
            oprot.writeFieldBegin('itemDescriptor', TType.STRUCT, 2)
            self.itemDescriptor.write(oprot)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.BYTE, 3)
            oprot.writeByte(self.index)
            oprot.writeFieldEnd()
        if self.mbnPayload is not None:
            oprot.writeFieldBegin('mbnPayload', TType.STRING, 4)
            oprot.writeBinary(self.mbnPayload)
            oprot.writeFieldEnd()
        if self.phonePayload is not None:
            oprot.writeFieldBegin('phonePayload', TType.STRING, 5)
            oprot.writeBinary(self.phonePayload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MbnNvDiffDetailsPerSub(object):
    """
    Attributes:
     - subscriptionId
     - mbnNvItemDiffDetails

    """


    def __init__(self, subscriptionId=None, mbnNvItemDiffDetails=None,):
        self.subscriptionId = subscriptionId
        self.mbnNvItemDiffDetails = mbnNvItemDiffDetails

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.subscriptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.mbnNvItemDiffDetails = []
                    (_etype347, _size344) = iprot.readListBegin()
                    for _i348 in range(_size344):
                        _elem349 = MbnNvItemDiffDetails()
                        _elem349.read(iprot)
                        self.mbnNvItemDiffDetails.append(_elem349)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MbnNvDiffDetailsPerSub')
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I32, 1)
            oprot.writeI32(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.mbnNvItemDiffDetails is not None:
            oprot.writeFieldBegin('mbnNvItemDiffDetails', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.mbnNvItemDiffDetails))
            for iter350 in self.mbnNvItemDiffDetails:
                iter350.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MbnDiffGroupHeader(object):
    """
    Attributes:
     - groupName
     - path

    """


    def __init__(self, groupName=None, path=None,):
        self.groupName = groupName
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.groupName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.path = []
                    (_etype354, _size351) = iprot.readListBegin()
                    for _i355 in range(_size351):
                        _elem356 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.path.append(_elem356)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MbnDiffGroupHeader')
        if self.groupName is not None:
            oprot.writeFieldBegin('groupName', TType.STRING, 1)
            oprot.writeString(self.groupName.encode('utf-8') if sys.version_info[0] == 2 else self.groupName)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.path))
            for iter357 in self.path:
                oprot.writeString(iter357.encode('utf-8') if sys.version_info[0] == 2 else iter357)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MbnDiffResult(object):
    """
    Attributes:
     - mbnGroupHeader
     - phoneGroupHeader
     - mbnNvPerSub

    """


    def __init__(self, mbnGroupHeader=None, phoneGroupHeader=None, mbnNvPerSub=None,):
        self.mbnGroupHeader = mbnGroupHeader
        self.phoneGroupHeader = phoneGroupHeader
        self.mbnNvPerSub = mbnNvPerSub

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.mbnGroupHeader = MbnDiffGroupHeader()
                    self.mbnGroupHeader.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.phoneGroupHeader = MbnDiffGroupHeader()
                    self.phoneGroupHeader.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.mbnNvPerSub = []
                    (_etype361, _size358) = iprot.readListBegin()
                    for _i362 in range(_size358):
                        _elem363 = MbnNvDiffDetailsPerSub()
                        _elem363.read(iprot)
                        self.mbnNvPerSub.append(_elem363)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MbnDiffResult')
        if self.mbnGroupHeader is not None:
            oprot.writeFieldBegin('mbnGroupHeader', TType.STRUCT, 1)
            self.mbnGroupHeader.write(oprot)
            oprot.writeFieldEnd()
        if self.phoneGroupHeader is not None:
            oprot.writeFieldBegin('phoneGroupHeader', TType.STRUCT, 2)
            self.phoneGroupHeader.write(oprot)
            oprot.writeFieldEnd()
        if self.mbnNvPerSub is not None:
            oprot.writeFieldBegin('mbnNvPerSub', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.mbnNvPerSub))
            for iter364 in self.mbnNvPerSub:
                iter364.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NmeaReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NmeaReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NmeaPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - packetText
     - receiveTimeData
     - receiveTimeString
     - packetId
     - binaryPayload

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, packetText=None, receiveTimeData=None, receiveTimeString=None, packetId=None, binaryPayload=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetText = packetText
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString
        self.packetId = packetId
        self.binaryPayload = binaryPayload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.packetText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.packetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NmeaPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetText is not None:
            oprot.writeFieldBegin('packetText', TType.STRING, 4)
            oprot.writeString(self.packetText.encode('utf-8') if sys.version_info[0] == 2 else self.packetText)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 5)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 6)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        if self.packetId is not None:
            oprot.writeFieldBegin('packetId', TType.STRING, 7)
            oprot.writeString(self.packetId.encode('utf-8') if sys.version_info[0] == 2 else self.packetId)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 8)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NmeaPacketFilter(object):
    """
    Attributes:
     - nameMask

    """


    def __init__(self, nameMask=None,):
        self.nameMask = nameMask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.nameMask = []
                    (_etype368, _size365) = iprot.readListBegin()
                    for _i369 in range(_size365):
                        _elem370 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.nameMask.append(_elem370)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NmeaPacketFilter')
        if self.nameMask is not None:
            oprot.writeFieldBegin('nameMask', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.nameMask))
            for iter371 in self.nameMask:
                oprot.writeString(iter371.encode('utf-8') if sys.version_info[0] == 2 else iter371)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmiUnpackReturn(object):
    """
    Attributes:
     - msgName
     - tlvXml

    """


    def __init__(self, msgName=None, tlvXml=None,):
        self.msgName = msgName
        self.tlvXml = tlvXml

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.msgName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tlvXml = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmiUnpackReturn')
        if self.msgName is not None:
            oprot.writeFieldBegin('msgName', TType.STRING, 1)
            oprot.writeString(self.msgName.encode('utf-8') if sys.version_info[0] == 2 else self.msgName)
            oprot.writeFieldEnd()
        if self.tlvXml is not None:
            oprot.writeFieldBegin('tlvXml', TType.STRING, 2)
            oprot.writeString(self.tlvXml.encode('utf-8') if sys.version_info[0] == 2 else self.tlvXml)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssPacketFilter(object):
    """
    Attributes:
     - atIds

    """


    def __init__(self, atIds=None,):
        self.atIds = atIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.atIds = []
                    (_etype375, _size372) = iprot.readListBegin()
                    for _i376 in range(_size372):
                        _elem377 = iprot.readI32()
                        self.atIds.append(_elem377)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssPacketFilter')
        if self.atIds is not None:
            oprot.writeFieldBegin('atIds', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.atIds))
            for iter378 in self.atIds:
                oprot.writeI32(iter378)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LaneConfiguration(object):
    """
    Attributes:
     - laneId
     - rlmName
     - mode

    """


    def __init__(self, laneId=None, rlmName=None, mode=None,):
        self.laneId = laneId
        self.rlmName = rlmName
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.laneId = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.rlmName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LaneConfiguration')
        if self.laneId is not None:
            oprot.writeFieldBegin('laneId', TType.BYTE, 1)
            oprot.writeByte(self.laneId)
            oprot.writeFieldEnd()
        if self.rlmName is not None:
            oprot.writeFieldBegin('rlmName', TType.STRING, 2)
            oprot.writeString(self.rlmName.encode('utf-8') if sys.version_info[0] == 2 else self.rlmName)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 3)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OclaConfiguration(object):
    """
    Attributes:
     - atIds
     - laneConfigurations
     - version
     - deviceId

    """


    def __init__(self, atIds=None, laneConfigurations=None, version=None, deviceId=None,):
        self.atIds = atIds
        self.laneConfigurations = laneConfigurations
        self.version = version
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.atIds = []
                    (_etype382, _size379) = iprot.readListBegin()
                    for _i383 in range(_size379):
                        _elem384 = iprot.readI16()
                        self.atIds.append(_elem384)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.laneConfigurations = []
                    (_etype388, _size385) = iprot.readListBegin()
                    for _i389 in range(_size385):
                        _elem390 = LaneConfiguration()
                        _elem390.read(iprot)
                        self.laneConfigurations.append(_elem390)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.deviceId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OclaConfiguration')
        if self.atIds is not None:
            oprot.writeFieldBegin('atIds', TType.LIST, 1)
            oprot.writeListBegin(TType.I16, len(self.atIds))
            for iter391 in self.atIds:
                oprot.writeI16(iter391)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.laneConfigurations is not None:
            oprot.writeFieldBegin('laneConfigurations', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.laneConfigurations))
            for iter392 in self.laneConfigurations:
                iter392.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 3)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.I64, 4)
            oprot.writeI64(self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssReturnConfig(object):
    """
    Attributes:
     - flags
     - oclaConfigurations

    """


    def __init__(self, flags=None, oclaConfigurations=None,):
        self.flags = flags
        self.oclaConfigurations = oclaConfigurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.oclaConfigurations = []
                    (_etype396, _size393) = iprot.readListBegin()
                    for _i397 in range(_size393):
                        _elem398 = OclaConfiguration()
                        _elem398.read(iprot)
                        self.oclaConfigurations.append(_elem398)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.oclaConfigurations is not None:
            oprot.writeFieldBegin('oclaConfigurations', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.oclaConfigurations))
            for iter399 in self.oclaConfigurations:
                iter399.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - receiveTimeData
     - receiveTimeString
     - atid
     - binaryPayload
     - hwTimeStampData
     - hwTimeStampString
     - channelId
     - masterId
     - laneId
     - parsedText
     - parsedTextJson
     - parsedTextCsv
     - parsedTextPerfetto

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, receiveTimeData=None, receiveTimeString=None, atid=None, binaryPayload=None, hwTimeStampData=None, hwTimeStampString=None, channelId=None, masterId=None, laneId=None, parsedText=None, parsedTextJson=None, parsedTextCsv=None, parsedTextPerfetto=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString
        self.atid = atid
        self.binaryPayload = binaryPayload
        self.hwTimeStampData = hwTimeStampData
        self.hwTimeStampString = hwTimeStampString
        self.channelId = channelId
        self.masterId = masterId
        self.laneId = laneId
        self.parsedText = parsedText
        self.parsedTextJson = parsedTextJson
        self.parsedTextCsv = parsedTextCsv
        self.parsedTextPerfetto = parsedTextPerfetto

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.atid = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.hwTimeStampData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.hwTimeStampString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.channelId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I16:
                    self.masterId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I16:
                    self.laneId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.parsedText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.parsedTextJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.parsedTextCsv = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.parsedTextPerfetto = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 4)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 5)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        if self.atid is not None:
            oprot.writeFieldBegin('atid', TType.BYTE, 6)
            oprot.writeByte(self.atid)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 7)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        if self.hwTimeStampData is not None:
            oprot.writeFieldBegin('hwTimeStampData', TType.I64, 8)
            oprot.writeI64(self.hwTimeStampData)
            oprot.writeFieldEnd()
        if self.hwTimeStampString is not None:
            oprot.writeFieldBegin('hwTimeStampString', TType.STRING, 9)
            oprot.writeString(self.hwTimeStampString.encode('utf-8') if sys.version_info[0] == 2 else self.hwTimeStampString)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.I16, 10)
            oprot.writeI16(self.channelId)
            oprot.writeFieldEnd()
        if self.masterId is not None:
            oprot.writeFieldBegin('masterId', TType.I16, 11)
            oprot.writeI16(self.masterId)
            oprot.writeFieldEnd()
        if self.laneId is not None:
            oprot.writeFieldBegin('laneId', TType.I16, 12)
            oprot.writeI16(self.laneId)
            oprot.writeFieldEnd()
        if self.parsedText is not None:
            oprot.writeFieldBegin('parsedText', TType.STRING, 13)
            oprot.writeString(self.parsedText.encode('utf-8') if sys.version_info[0] == 2 else self.parsedText)
            oprot.writeFieldEnd()
        if self.parsedTextJson is not None:
            oprot.writeFieldBegin('parsedTextJson', TType.STRING, 14)
            oprot.writeString(self.parsedTextJson.encode('utf-8') if sys.version_info[0] == 2 else self.parsedTextJson)
            oprot.writeFieldEnd()
        if self.parsedTextCsv is not None:
            oprot.writeFieldBegin('parsedTextCsv', TType.STRING, 15)
            oprot.writeString(self.parsedTextCsv.encode('utf-8') if sys.version_info[0] == 2 else self.parsedTextCsv)
            oprot.writeFieldEnd()
        if self.parsedTextPerfetto is not None:
            oprot.writeFieldBegin('parsedTextPerfetto', TType.STRING, 16)
            oprot.writeString(self.parsedTextPerfetto.encode('utf-8') if sys.version_info[0] == 2 else self.parsedTextPerfetto)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DunPacketFilter(object):
    """
    Attributes:
     - commandMask

    """


    def __init__(self, commandMask=None,):
        self.commandMask = commandMask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.commandMask = []
                    (_etype403, _size400) = iprot.readListBegin()
                    for _i404 in range(_size400):
                        _elem405 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.commandMask.append(_elem405)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DunPacketFilter')
        if self.commandMask is not None:
            oprot.writeFieldBegin('commandMask', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.commandMask))
            for iter406 in self.commandMask:
                oprot.writeString(iter406.encode('utf-8') if sys.version_info[0] == 2 else iter406)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DunReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DunReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DunPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - packetId
     - packetText
     - receiveTimeData
     - receiveTimeString

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, packetId=None, packetText=None, receiveTimeData=None, receiveTimeString=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.packetId = packetId
        self.packetText = packetText
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.packetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.packetText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DunPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.packetId is not None:
            oprot.writeFieldBegin('packetId', TType.STRING, 4)
            oprot.writeString(self.packetId.encode('utf-8') if sys.version_info[0] == 2 else self.packetId)
            oprot.writeFieldEnd()
        if self.packetText is not None:
            oprot.writeFieldBegin('packetText', TType.STRING, 5)
            oprot.writeString(self.packetText.encode('utf-8') if sys.version_info[0] == 2 else self.packetText)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 6)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 7)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagPacketIdList(object):
    """
    Attributes:
     - idOrName
     - packetIdFieldQueryMap

    """


    def __init__(self, idOrName=None, packetIdFieldQueryMap=None,):
        self.idOrName = idOrName
        self.packetIdFieldQueryMap = packetIdFieldQueryMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.idOrName = []
                    (_etype410, _size407) = iprot.readListBegin()
                    for _i411 in range(_size407):
                        _elem412 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.idOrName.append(_elem412)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.packetIdFieldQueryMap = {}
                    (_ktype414, _vtype415, _size413) = iprot.readMapBegin()
                    for _i417 in range(_size413):
                        _key418 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val419 = []
                        (_etype423, _size420) = iprot.readListBegin()
                        for _i424 in range(_size420):
                            _elem425 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val419.append(_elem425)
                        iprot.readListEnd()
                        self.packetIdFieldQueryMap[_key418] = _val419
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagPacketIdList')
        if self.idOrName is not None:
            oprot.writeFieldBegin('idOrName', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.idOrName))
            for iter426 in self.idOrName:
                oprot.writeString(iter426.encode('utf-8') if sys.version_info[0] == 2 else iter426)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.packetIdFieldQueryMap is not None:
            oprot.writeFieldBegin('packetIdFieldQueryMap', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.packetIdFieldQueryMap))
            for kiter427, viter428 in self.packetIdFieldQueryMap.items():
                oprot.writeString(kiter427.encode('utf-8') if sys.version_info[0] == 2 else kiter427)
                oprot.writeListBegin(TType.STRING, len(viter428))
                for iter429 in viter428:
                    oprot.writeString(iter429.encode('utf-8') if sys.version_info[0] == 2 else iter429)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagPacketMap(object):
    """
    Attributes:
     - subIdTypeIdMaskMap

    """


    def __init__(self, subIdTypeIdMaskMap=None,):
        self.subIdTypeIdMaskMap = subIdTypeIdMaskMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.subIdTypeIdMaskMap = {}
                    (_ktype431, _vtype432, _size430) = iprot.readMapBegin()
                    for _i434 in range(_size430):
                        _key435 = iprot.readI32()
                        _val436 = {}
                        (_ktype438, _vtype439, _size437) = iprot.readMapBegin()
                        for _i441 in range(_size437):
                            _key442 = iprot.readI32()
                            _val443 = DiagPacketIdList()
                            _val443.read(iprot)
                            _val436[_key442] = _val443
                        iprot.readMapEnd()
                        self.subIdTypeIdMaskMap[_key435] = _val436
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagPacketMap')
        if self.subIdTypeIdMaskMap is not None:
            oprot.writeFieldBegin('subIdTypeIdMaskMap', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.MAP, len(self.subIdTypeIdMaskMap))
            for kiter444, viter445 in self.subIdTypeIdMaskMap.items():
                oprot.writeI32(kiter444)
                oprot.writeMapBegin(TType.I32, TType.STRUCT, len(viter445))
                for kiter446, viter447 in viter445.items():
                    oprot.writeI32(kiter446)
                    viter447.write(oprot)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmiConnectionOptions(object):
    """
    Attributes:
     - protocolHandle

    """


    def __init__(self, protocolHandle=None,):
        self.protocolHandle = protocolHandle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmiConnectionOptions')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LogOptions(object):
    """
    Attributes:
     - level
     - format
     - layout
     - sizeRotationKB
     - savePath
     - maxDataPrintSize

    """


    def __init__(self, level=None, format=None, layout=None, sizeRotationKB=None, savePath=None, maxDataPrintSize=None,):
        self.level = level
        self.format = format
        self.layout = layout
        self.sizeRotationKB = sizeRotationKB
        self.savePath = savePath
        self.maxDataPrintSize = maxDataPrintSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.layout = []
                    (_etype451, _size448) = iprot.readListBegin()
                    for _i452 in range(_size448):
                        _elem453 = iprot.readI32()
                        self.layout.append(_elem453)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.sizeRotationKB = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.savePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.maxDataPrintSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LogOptions')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 1)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.I32, 2)
            oprot.writeI32(self.format)
            oprot.writeFieldEnd()
        if self.layout is not None:
            oprot.writeFieldBegin('layout', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.layout))
            for iter454 in self.layout:
                oprot.writeI32(iter454)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sizeRotationKB is not None:
            oprot.writeFieldBegin('sizeRotationKB', TType.I32, 4)
            oprot.writeI32(self.sizeRotationKB)
            oprot.writeFieldEnd()
        if self.savePath is not None:
            oprot.writeFieldBegin('savePath', TType.STRING, 5)
            oprot.writeString(self.savePath.encode('utf-8') if sys.version_info[0] == 2 else self.savePath)
            oprot.writeFieldEnd()
        if self.maxDataPrintSize is not None:
            oprot.writeFieldBegin('maxDataPrintSize', TType.I32, 6)
            oprot.writeI32(self.maxDataPrintSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PhoneProperty(object):
    """
    Attributes:
     - esn
     - phoneModel
     - nvMajor
     - nvMinor
     - swVersion
     - clientName

    """


    def __init__(self, esn=None, phoneModel=None, nvMajor=None, nvMinor=None, swVersion=None, clientName=None,):
        self.esn = esn
        self.phoneModel = phoneModel
        self.nvMajor = nvMajor
        self.nvMinor = nvMinor
        self.swVersion = swVersion
        self.clientName = clientName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.esn = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.phoneModel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.nvMajor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.nvMinor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.swVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PhoneProperty')
        if self.esn is not None:
            oprot.writeFieldBegin('esn', TType.I32, 1)
            oprot.writeI32(self.esn)
            oprot.writeFieldEnd()
        if self.phoneModel is not None:
            oprot.writeFieldBegin('phoneModel', TType.I32, 2)
            oprot.writeI32(self.phoneModel)
            oprot.writeFieldEnd()
        if self.nvMajor is not None:
            oprot.writeFieldBegin('nvMajor', TType.I32, 3)
            oprot.writeI32(self.nvMajor)
            oprot.writeFieldEnd()
        if self.nvMinor is not None:
            oprot.writeFieldBegin('nvMinor', TType.I32, 4)
            oprot.writeI32(self.nvMinor)
            oprot.writeFieldEnd()
        if self.swVersion is not None:
            oprot.writeFieldBegin('swVersion', TType.STRING, 5)
            oprot.writeString(self.swVersion.encode('utf-8') if sys.version_info[0] == 2 else self.swVersion)
            oprot.writeFieldEnd()
        if self.clientName is not None:
            oprot.writeFieldBegin('clientName', TType.STRING, 6)
            oprot.writeString(self.clientName.encode('utf-8') if sys.version_info[0] == 2 else self.clientName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnHeader(object):
    """
    Attributes:
     - configurationName
     - fileMajor
     - fileMinor
     - fileRevision
     - phoneProperty

    """


    def __init__(self, configurationName=None, fileMajor=None, fileMinor=None, fileRevision=None, phoneProperty=None,):
        self.configurationName = configurationName
        self.fileMajor = fileMajor
        self.fileMinor = fileMinor
        self.fileRevision = fileRevision
        self.phoneProperty = phoneProperty

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.configurationName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.fileMajor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.fileMinor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.fileRevision = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.phoneProperty = PhoneProperty()
                    self.phoneProperty.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnHeader')
        if self.configurationName is not None:
            oprot.writeFieldBegin('configurationName', TType.STRING, 1)
            oprot.writeString(self.configurationName.encode('utf-8') if sys.version_info[0] == 2 else self.configurationName)
            oprot.writeFieldEnd()
        if self.fileMajor is not None:
            oprot.writeFieldBegin('fileMajor', TType.I32, 2)
            oprot.writeI32(self.fileMajor)
            oprot.writeFieldEnd()
        if self.fileMinor is not None:
            oprot.writeFieldBegin('fileMinor', TType.I32, 3)
            oprot.writeI32(self.fileMinor)
            oprot.writeFieldEnd()
        if self.fileRevision is not None:
            oprot.writeFieldBegin('fileRevision', TType.I32, 4)
            oprot.writeI32(self.fileRevision)
            oprot.writeFieldEnd()
        if self.phoneProperty is not None:
            oprot.writeFieldBegin('phoneProperty', TType.STRUCT, 5)
            self.phoneProperty.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnItemDiffDetails(object):
    """
    Attributes:
     - result
     - nvId
     - subscriptionId
     - index
     - efsFilePath
     - payload1
     - payload2

    """


    def __init__(self, result=None, nvId=None, subscriptionId=None, index=None, efsFilePath=None, payload1=None, payload2=None,):
        self.result = result
        self.nvId = nvId
        self.subscriptionId = subscriptionId
        self.index = index
        self.efsFilePath = efsFilePath
        self.payload1 = payload1
        self.payload2 = payload2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.nvId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.subscriptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.efsFilePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.payload1 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.payload2 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnItemDiffDetails')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.nvId is not None:
            oprot.writeFieldBegin('nvId', TType.I32, 2)
            oprot.writeI32(self.nvId)
            oprot.writeFieldEnd()
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I32, 3)
            oprot.writeI32(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 4)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        if self.efsFilePath is not None:
            oprot.writeFieldBegin('efsFilePath', TType.STRING, 5)
            oprot.writeString(self.efsFilePath.encode('utf-8') if sys.version_info[0] == 2 else self.efsFilePath)
            oprot.writeFieldEnd()
        if self.payload1 is not None:
            oprot.writeFieldBegin('payload1', TType.STRING, 6)
            oprot.writeBinary(self.payload1)
            oprot.writeFieldEnd()
        if self.payload2 is not None:
            oprot.writeFieldBegin('payload2', TType.STRING, 7)
            oprot.writeBinary(self.payload2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnFeatureMaskDiffDetails(object):
    """
    Attributes:
     - result
     - payload1
     - payload2

    """


    def __init__(self, result=None, payload1=None, payload2=None,):
        self.result = result
        self.payload1 = payload1
        self.payload2 = payload2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.payload1 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.payload2 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnFeatureMaskDiffDetails')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.payload1 is not None:
            oprot.writeFieldBegin('payload1', TType.STRING, 2)
            oprot.writeBinary(self.payload1)
            oprot.writeFieldEnd()
        if self.payload2 is not None:
            oprot.writeFieldBegin('payload2', TType.STRING, 3)
            oprot.writeBinary(self.payload2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnPrlDiffDetails(object):
    """
    Attributes:
     - result
     - subscriptionId
     - nam
     - payload1
     - payload2

    """


    def __init__(self, result=None, subscriptionId=None, nam=None, payload1=None, payload2=None,):
        self.result = result
        self.subscriptionId = subscriptionId
        self.nam = nam
        self.payload1 = payload1
        self.payload2 = payload2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.subscriptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.nam = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.payload1 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.payload2 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnPrlDiffDetails')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 1)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I32, 2)
            oprot.writeI32(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.nam is not None:
            oprot.writeFieldBegin('nam', TType.I32, 3)
            oprot.writeI32(self.nam)
            oprot.writeFieldEnd()
        if self.payload1 is not None:
            oprot.writeFieldBegin('payload1', TType.STRING, 4)
            oprot.writeBinary(self.payload1)
            oprot.writeFieldEnd()
        if self.payload2 is not None:
            oprot.writeFieldBegin('payload2', TType.STRING, 5)
            oprot.writeBinary(self.payload2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnDiffResult(object):
    """
    Attributes:
     - header1
     - header2
     - featureMask
     - prls
     - items

    """


    def __init__(self, header1=None, header2=None, featureMask=None, prls=None, items=None,):
        self.header1 = header1
        self.header2 = header2
        self.featureMask = featureMask
        self.prls = prls
        self.items = items

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.header1 = QcnHeader()
                    self.header1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.header2 = QcnHeader()
                    self.header2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.featureMask = QcnFeatureMaskDiffDetails()
                    self.featureMask.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.prls = []
                    (_etype458, _size455) = iprot.readListBegin()
                    for _i459 in range(_size455):
                        _elem460 = QcnPrlDiffDetails()
                        _elem460.read(iprot)
                        self.prls.append(_elem460)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.items = []
                    (_etype464, _size461) = iprot.readListBegin()
                    for _i465 in range(_size461):
                        _elem466 = QcnItemDiffDetails()
                        _elem466.read(iprot)
                        self.items.append(_elem466)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnDiffResult')
        if self.header1 is not None:
            oprot.writeFieldBegin('header1', TType.STRUCT, 1)
            self.header1.write(oprot)
            oprot.writeFieldEnd()
        if self.header2 is not None:
            oprot.writeFieldBegin('header2', TType.STRUCT, 2)
            self.header2.write(oprot)
            oprot.writeFieldEnd()
        if self.featureMask is not None:
            oprot.writeFieldBegin('featureMask', TType.STRUCT, 3)
            self.featureMask.write(oprot)
            oprot.writeFieldEnd()
        if self.prls is not None:
            oprot.writeFieldBegin('prls', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.prls))
            for iter467 in self.prls:
                iter467.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for iter468 in self.items:
                iter468.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnPrl(object):
    """
    Attributes:
     - nam
     - payload

    """


    def __init__(self, nam=None, payload=None,):
        self.nam = nam
        self.payload = payload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.nam = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnPrl')
        if self.nam is not None:
            oprot.writeFieldBegin('nam', TType.I32, 1)
            oprot.writeI32(self.nam)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 2)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnPrlList(object):
    """
    Attributes:
     - subscriptionId
     - prls

    """


    def __init__(self, subscriptionId=None, prls=None,):
        self.subscriptionId = subscriptionId
        self.prls = prls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.subscriptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.prls = []
                    (_etype472, _size469) = iprot.readListBegin()
                    for _i473 in range(_size469):
                        _elem474 = QcnPrl()
                        _elem474.read(iprot)
                        self.prls.append(_elem474)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnPrlList')
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I32, 1)
            oprot.writeI32(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.prls is not None:
            oprot.writeFieldBegin('prls', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.prls))
            for iter475 in self.prls:
                iter475.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnNumberedNv(object):
    """
    Attributes:
     - nvId
     - index
     - payload

    """


    def __init__(self, nvId=None, index=None, payload=None,):
        self.nvId = nvId
        self.index = index
        self.payload = payload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.nvId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.index = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnNumberedNv')
        if self.nvId is not None:
            oprot.writeFieldBegin('nvId', TType.I32, 1)
            oprot.writeI32(self.nvId)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.BYTE, 2)
            oprot.writeByte(self.index)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 3)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnNumberedNvList(object):
    """
    Attributes:
     - subscriptionId
     - nvs

    """


    def __init__(self, subscriptionId=None, nvs=None,):
        self.subscriptionId = subscriptionId
        self.nvs = nvs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.subscriptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.nvs = []
                    (_etype479, _size476) = iprot.readListBegin()
                    for _i480 in range(_size476):
                        _elem481 = QcnNumberedNv()
                        _elem481.read(iprot)
                        self.nvs.append(_elem481)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnNumberedNvList')
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I32, 1)
            oprot.writeI32(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.nvs is not None:
            oprot.writeFieldBegin('nvs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.nvs))
            for iter482 in self.nvs:
                iter482.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnEfsFile(object):
    """
    Attributes:
     - efsPath
     - flags
     - bufferingOption
     - cleanupOption
     - fileCreationTimeStamp
     - payload

    """


    def __init__(self, efsPath=None, flags=None, bufferingOption=None, cleanupOption=None, fileCreationTimeStamp=None, payload=None,):
        self.efsPath = efsPath
        self.flags = flags
        self.bufferingOption = bufferingOption
        self.cleanupOption = cleanupOption
        self.fileCreationTimeStamp = fileCreationTimeStamp
        self.payload = payload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.efsPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.flags = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.bufferingOption = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.cleanupOption = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fileCreationTimeStamp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnEfsFile')
        if self.efsPath is not None:
            oprot.writeFieldBegin('efsPath', TType.STRING, 1)
            oprot.writeString(self.efsPath.encode('utf-8') if sys.version_info[0] == 2 else self.efsPath)
            oprot.writeFieldEnd()
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I16, 2)
            oprot.writeI16(self.flags)
            oprot.writeFieldEnd()
        if self.bufferingOption is not None:
            oprot.writeFieldBegin('bufferingOption', TType.BYTE, 3)
            oprot.writeByte(self.bufferingOption)
            oprot.writeFieldEnd()
        if self.cleanupOption is not None:
            oprot.writeFieldBegin('cleanupOption', TType.BYTE, 4)
            oprot.writeByte(self.cleanupOption)
            oprot.writeFieldEnd()
        if self.fileCreationTimeStamp is not None:
            oprot.writeFieldBegin('fileCreationTimeStamp', TType.I32, 5)
            oprot.writeI32(self.fileCreationTimeStamp)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 6)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnEfsItem(object):
    """
    Attributes:
     - efsPath
     - payload

    """


    def __init__(self, efsPath=None, payload=None,):
        self.efsPath = efsPath
        self.payload = payload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.efsPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.payload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnEfsItem')
        if self.efsPath is not None:
            oprot.writeFieldBegin('efsPath', TType.STRING, 1)
            oprot.writeString(self.efsPath.encode('utf-8') if sys.version_info[0] == 2 else self.efsPath)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 2)
            oprot.writeBinary(self.payload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnEfsItemList(object):
    """
    Attributes:
     - subscriptionId
     - efsItems

    """


    def __init__(self, subscriptionId=None, efsItems=None,):
        self.subscriptionId = subscriptionId
        self.efsItems = efsItems

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.subscriptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.efsItems = []
                    (_etype486, _size483) = iprot.readListBegin()
                    for _i487 in range(_size483):
                        _elem488 = QcnEfsItem()
                        _elem488.read(iprot)
                        self.efsItems.append(_elem488)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnEfsItemList')
        if self.subscriptionId is not None:
            oprot.writeFieldBegin('subscriptionId', TType.I32, 1)
            oprot.writeI32(self.subscriptionId)
            oprot.writeFieldEnd()
        if self.efsItems is not None:
            oprot.writeFieldBegin('efsItems', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.efsItems))
            for iter489 in self.efsItems:
                iter489.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QcnContent(object):
    """
    Attributes:
     - header
     - featureMask
     - prlLists
     - nvLists
     - efsItemLists
     - efsFiles

    """


    def __init__(self, header=None, featureMask=None, prlLists=None, nvLists=None, efsItemLists=None, efsFiles=None,):
        self.header = header
        self.featureMask = featureMask
        self.prlLists = prlLists
        self.nvLists = nvLists
        self.efsItemLists = efsItemLists
        self.efsFiles = efsFiles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.header = QcnHeader()
                    self.header.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.featureMask = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.prlLists = []
                    (_etype493, _size490) = iprot.readListBegin()
                    for _i494 in range(_size490):
                        _elem495 = QcnPrlList()
                        _elem495.read(iprot)
                        self.prlLists.append(_elem495)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nvLists = []
                    (_etype499, _size496) = iprot.readListBegin()
                    for _i500 in range(_size496):
                        _elem501 = QcnNumberedNvList()
                        _elem501.read(iprot)
                        self.nvLists.append(_elem501)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.efsItemLists = []
                    (_etype505, _size502) = iprot.readListBegin()
                    for _i506 in range(_size502):
                        _elem507 = QcnEfsItemList()
                        _elem507.read(iprot)
                        self.efsItemLists.append(_elem507)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.efsFiles = []
                    (_etype511, _size508) = iprot.readListBegin()
                    for _i512 in range(_size508):
                        _elem513 = QcnEfsFile()
                        _elem513.read(iprot)
                        self.efsFiles.append(_elem513)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QcnContent')
        if self.header is not None:
            oprot.writeFieldBegin('header', TType.STRUCT, 1)
            self.header.write(oprot)
            oprot.writeFieldEnd()
        if self.featureMask is not None:
            oprot.writeFieldBegin('featureMask', TType.STRING, 2)
            oprot.writeBinary(self.featureMask)
            oprot.writeFieldEnd()
        if self.prlLists is not None:
            oprot.writeFieldBegin('prlLists', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.prlLists))
            for iter514 in self.prlLists:
                iter514.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nvLists is not None:
            oprot.writeFieldBegin('nvLists', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.nvLists))
            for iter515 in self.nvLists:
                iter515.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.efsItemLists is not None:
            oprot.writeFieldBegin('efsItemLists', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.efsItemLists))
            for iter516 in self.efsItemLists:
                iter516.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.efsFiles is not None:
            oprot.writeFieldBegin('efsFiles', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.efsFiles))
            for iter517 in self.efsFiles:
                iter517.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtocolConfiguration(object):
    """
    Attributes:
     - protocolHandle
     - overrideProtocolType
     - baudRate
     - timeout
     - enableHdlcOnly
     - blockingLogMaskClearOnConnection
     - clearLogMaskOnDisconnect
     - disablePolling

    """


    def __init__(self, protocolHandle=None, overrideProtocolType=None, baudRate=None, timeout=None, enableHdlcOnly=None, blockingLogMaskClearOnConnection=None, clearLogMaskOnDisconnect=None, disablePolling=None,):
        self.protocolHandle = protocolHandle
        self.overrideProtocolType = overrideProtocolType
        self.baudRate = baudRate
        self.timeout = timeout
        self.enableHdlcOnly = enableHdlcOnly
        self.blockingLogMaskClearOnConnection = blockingLogMaskClearOnConnection
        self.clearLogMaskOnDisconnect = clearLogMaskOnDisconnect
        self.disablePolling = disablePolling

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.overrideProtocolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.baudRate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timeout = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.enableHdlcOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.blockingLogMaskClearOnConnection = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.clearLogMaskOnDisconnect = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.disablePolling = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtocolConfiguration')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.overrideProtocolType is not None:
            oprot.writeFieldBegin('overrideProtocolType', TType.I32, 2)
            oprot.writeI32(self.overrideProtocolType)
            oprot.writeFieldEnd()
        if self.baudRate is not None:
            oprot.writeFieldBegin('baudRate', TType.I32, 3)
            oprot.writeI32(self.baudRate)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I64, 4)
            oprot.writeI64(self.timeout)
            oprot.writeFieldEnd()
        if self.enableHdlcOnly is not None:
            oprot.writeFieldBegin('enableHdlcOnly', TType.BOOL, 5)
            oprot.writeBool(self.enableHdlcOnly)
            oprot.writeFieldEnd()
        if self.blockingLogMaskClearOnConnection is not None:
            oprot.writeFieldBegin('blockingLogMaskClearOnConnection', TType.BOOL, 6)
            oprot.writeBool(self.blockingLogMaskClearOnConnection)
            oprot.writeFieldEnd()
        if self.clearLogMaskOnDisconnect is not None:
            oprot.writeFieldBegin('clearLogMaskOnDisconnect', TType.BOOL, 7)
            oprot.writeBool(self.clearLogMaskOnDisconnect)
            oprot.writeFieldEnd()
        if self.disablePolling is not None:
            oprot.writeFieldBegin('disablePolling', TType.BOOL, 8)
            oprot.writeBool(self.disablePolling)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagProtocolConnectionOptions(object):
    """
    Attributes:
     - protocolHandle
     - openQdssPort
     - enableDefaultQdssConfiguration
     - hdlcMode

    """


    def __init__(self, protocolHandle=None, openQdssPort=None, enableDefaultQdssConfiguration=None, hdlcMode=None,):
        self.protocolHandle = protocolHandle
        self.openQdssPort = openQdssPort
        self.enableDefaultQdssConfiguration = enableDefaultQdssConfiguration
        self.hdlcMode = hdlcMode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.openQdssPort = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.enableDefaultQdssConfiguration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.hdlcMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagProtocolConnectionOptions')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.openQdssPort is not None:
            oprot.writeFieldBegin('openQdssPort', TType.BOOL, 2)
            oprot.writeBool(self.openQdssPort)
            oprot.writeFieldEnd()
        if self.enableDefaultQdssConfiguration is not None:
            oprot.writeFieldBegin('enableDefaultQdssConfiguration', TType.BOOL, 3)
            oprot.writeBool(self.enableDefaultQdssConfiguration)
            oprot.writeFieldEnd()
        if self.hdlcMode is not None:
            oprot.writeFieldBegin('hdlcMode', TType.I32, 4)
            oprot.writeI32(self.hdlcMode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InternetConnectionOptions(object):
    """
    Attributes:
     - username
     - password
     - telnetPort
     - ftpPort
     - isSecure

    """


    def __init__(self, username=None, password=None, telnetPort=None, ftpPort=None, isSecure=None,):
        self.username = username
        self.password = password
        self.telnetPort = telnetPort
        self.ftpPort = ftpPort
        self.isSecure = isSecure

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.telnetPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ftpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isSecure = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InternetConnectionOptions')
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 1)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.telnetPort is not None:
            oprot.writeFieldBegin('telnetPort', TType.I32, 3)
            oprot.writeI32(self.telnetPort)
            oprot.writeFieldEnd()
        if self.ftpPort is not None:
            oprot.writeFieldBegin('ftpPort', TType.I32, 4)
            oprot.writeI32(self.ftpPort)
            oprot.writeFieldEnd()
        if self.isSecure is not None:
            oprot.writeFieldBegin('isSecure', TType.BOOL, 5)
            oprot.writeBool(self.isSecure)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtocolConnectionOptions(object):
    """
    Attributes:
     - diagProtocolConfiguration
     - internetConnectionConfiguration

    """


    def __init__(self, diagProtocolConfiguration=None, internetConnectionConfiguration=None,):
        self.diagProtocolConfiguration = diagProtocolConfiguration
        self.internetConnectionConfiguration = internetConnectionConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.diagProtocolConfiguration = DiagProtocolConnectionOptions()
                    self.diagProtocolConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.internetConnectionConfiguration = InternetConnectionOptions()
                    self.internetConnectionConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtocolConnectionOptions')
        if self.diagProtocolConfiguration is not None:
            oprot.writeFieldBegin('diagProtocolConfiguration', TType.STRUCT, 1)
            self.diagProtocolConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.internetConnectionConfiguration is not None:
            oprot.writeFieldBegin('internetConnectionConfiguration', TType.STRUCT, 2)
            self.internetConnectionConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TcpOptions(object):
    """
    Attributes:
     - description
     - protocolType
     - isClient
     - deviceHandle
     - adbSerialNumber
     - chipSerialNumber
     - protocolConnectionOptions
     - useExistingConnectionIfAvailable
     - profilingTargetType

    """


    def __init__(self, description=None, protocolType=None, isClient=None, deviceHandle=None, adbSerialNumber=None, chipSerialNumber=None, protocolConnectionOptions=None, useExistingConnectionIfAvailable=None, profilingTargetType=None,):
        self.description = description
        self.protocolType = protocolType
        self.isClient = isClient
        self.deviceHandle = deviceHandle
        self.adbSerialNumber = adbSerialNumber
        self.chipSerialNumber = chipSerialNumber
        self.protocolConnectionOptions = protocolConnectionOptions
        self.useExistingConnectionIfAvailable = useExistingConnectionIfAvailable
        self.profilingTargetType = profilingTargetType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.protocolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isClient = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.deviceHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.adbSerialNumber = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.chipSerialNumber = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.protocolConnectionOptions = ProtocolConnectionOptions()
                    self.protocolConnectionOptions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.useExistingConnectionIfAvailable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.profilingTargetType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TcpOptions')
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 1)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.protocolType is not None:
            oprot.writeFieldBegin('protocolType', TType.I32, 2)
            oprot.writeI32(self.protocolType)
            oprot.writeFieldEnd()
        if self.isClient is not None:
            oprot.writeFieldBegin('isClient', TType.BOOL, 3)
            oprot.writeBool(self.isClient)
            oprot.writeFieldEnd()
        if self.deviceHandle is not None:
            oprot.writeFieldBegin('deviceHandle', TType.I64, 4)
            oprot.writeI64(self.deviceHandle)
            oprot.writeFieldEnd()
        if self.adbSerialNumber is not None:
            oprot.writeFieldBegin('adbSerialNumber', TType.STRING, 5)
            oprot.writeString(self.adbSerialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.adbSerialNumber)
            oprot.writeFieldEnd()
        if self.chipSerialNumber is not None:
            oprot.writeFieldBegin('chipSerialNumber', TType.STRING, 6)
            oprot.writeString(self.chipSerialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.chipSerialNumber)
            oprot.writeFieldEnd()
        if self.protocolConnectionOptions is not None:
            oprot.writeFieldBegin('protocolConnectionOptions', TType.STRUCT, 7)
            self.protocolConnectionOptions.write(oprot)
            oprot.writeFieldEnd()
        if self.useExistingConnectionIfAvailable is not None:
            oprot.writeFieldBegin('useExistingConnectionIfAvailable', TType.BOOL, 8)
            oprot.writeBool(self.useExistingConnectionIfAvailable)
            oprot.writeFieldEnd()
        if self.profilingTargetType is not None:
            oprot.writeFieldBegin('profilingTargetType', TType.I32, 9)
            oprot.writeI32(self.profilingTargetType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransferFileOptions(object):
    """
    Attributes:
     - protocolHandle
     - protocolType
     - wildcardPattern
     - skipIfDestinationFileExists

    """


    def __init__(self, protocolHandle=None, protocolType=None, wildcardPattern=None, skipIfDestinationFileExists=None,):
        self.protocolHandle = protocolHandle
        self.protocolType = protocolType
        self.wildcardPattern = wildcardPattern
        self.skipIfDestinationFileExists = skipIfDestinationFileExists

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.protocolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.wildcardPattern = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.skipIfDestinationFileExists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransferFileOptions')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.protocolType is not None:
            oprot.writeFieldBegin('protocolType', TType.I32, 2)
            oprot.writeI32(self.protocolType)
            oprot.writeFieldEnd()
        if self.wildcardPattern is not None:
            oprot.writeFieldBegin('wildcardPattern', TType.STRING, 3)
            oprot.writeString(self.wildcardPattern.encode('utf-8') if sys.version_info[0] == 2 else self.wildcardPattern)
            oprot.writeFieldEnd()
        if self.skipIfDestinationFileExists is not None:
            oprot.writeFieldBegin('skipIfDestinationFileExists', TType.BOOL, 4)
            oprot.writeBool(self.skipIfDestinationFileExists)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransferFileResult(object):
    """
    Attributes:
     - errorType
     - sequence

    """


    def __init__(self, errorType=None, sequence=None,):
        self.errorType = errorType
        self.sequence = sequence

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sequence = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransferFileResult')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.sequence is not None:
            oprot.writeFieldBegin('sequence', TType.STRING, 2)
            oprot.writeString(self.sequence.encode('utf-8') if sys.version_info[0] == 2 else self.sequence)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClientCloseRequest(object):
    """
    Attributes:
     - purpose

    """


    def __init__(self, purpose=None,):
        self.purpose = purpose

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.purpose = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClientCloseRequest')
        if self.purpose is not None:
            oprot.writeFieldBegin('purpose', TType.STRING, 1)
            oprot.writeString(self.purpose.encode('utf-8') if sys.version_info[0] == 2 else self.purpose)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClientCloseReason(object):
    """
    Attributes:
     - reason

    """


    def __init__(self, reason=None,):
        self.reason = reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClientCloseReason')
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 1)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProtocolConfigurationResult(object):
    """
    Attributes:
     - errorType
     - protocolHandle
     - protocolType
     - baudRate
     - timeout
     - hdlcOnlyMode
     - disablePolling

    """


    def __init__(self, errorType=None, protocolHandle=None, protocolType=None, baudRate=None, timeout=None, hdlcOnlyMode=None, disablePolling=None,):
        self.errorType = errorType
        self.protocolHandle = protocolHandle
        self.protocolType = protocolType
        self.baudRate = baudRate
        self.timeout = timeout
        self.hdlcOnlyMode = hdlcOnlyMode
        self.disablePolling = disablePolling

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.protocolType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.baudRate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.timeout = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.hdlcOnlyMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.disablePolling = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtocolConfigurationResult')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 2)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.protocolType is not None:
            oprot.writeFieldBegin('protocolType', TType.I32, 3)
            oprot.writeI32(self.protocolType)
            oprot.writeFieldEnd()
        if self.baudRate is not None:
            oprot.writeFieldBegin('baudRate', TType.I32, 4)
            oprot.writeI32(self.baudRate)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I64, 5)
            oprot.writeI64(self.timeout)
            oprot.writeFieldEnd()
        if self.hdlcOnlyMode is not None:
            oprot.writeFieldBegin('hdlcOnlyMode', TType.I32, 6)
            oprot.writeI32(self.hdlcOnlyMode)
            oprot.writeFieldEnd()
        if self.disablePolling is not None:
            oprot.writeFieldBegin('disablePolling', TType.BOOL, 7)
            oprot.writeBool(self.disablePolling)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class XqcnRestoreOptions(object):
    """
    Attributes:
     - xqcnFileContents
     - sourceFilePath
     - serviceProgrammingCode
     - bAllowEsnMismatch
     - bResetUponCompletion
     - resetTimeout
     - filterFileContents

    """


    def __init__(self, xqcnFileContents=None, sourceFilePath=None, serviceProgrammingCode=None, bAllowEsnMismatch=None, bResetUponCompletion=None, resetTimeout=None, filterFileContents=None,):
        self.xqcnFileContents = xqcnFileContents
        self.sourceFilePath = sourceFilePath
        self.serviceProgrammingCode = serviceProgrammingCode
        self.bAllowEsnMismatch = bAllowEsnMismatch
        self.bResetUponCompletion = bResetUponCompletion
        self.resetTimeout = resetTimeout
        self.filterFileContents = filterFileContents

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.xqcnFileContents = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sourceFilePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.serviceProgrammingCode = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.bAllowEsnMismatch = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.bResetUponCompletion = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.resetTimeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.filterFileContents = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('XqcnRestoreOptions')
        if self.xqcnFileContents is not None:
            oprot.writeFieldBegin('xqcnFileContents', TType.STRING, 1)
            oprot.writeString(self.xqcnFileContents.encode('utf-8') if sys.version_info[0] == 2 else self.xqcnFileContents)
            oprot.writeFieldEnd()
        if self.sourceFilePath is not None:
            oprot.writeFieldBegin('sourceFilePath', TType.STRING, 2)
            oprot.writeString(self.sourceFilePath.encode('utf-8') if sys.version_info[0] == 2 else self.sourceFilePath)
            oprot.writeFieldEnd()
        if self.serviceProgrammingCode is not None:
            oprot.writeFieldBegin('serviceProgrammingCode', TType.STRING, 3)
            oprot.writeString(self.serviceProgrammingCode.encode('utf-8') if sys.version_info[0] == 2 else self.serviceProgrammingCode)
            oprot.writeFieldEnd()
        if self.bAllowEsnMismatch is not None:
            oprot.writeFieldBegin('bAllowEsnMismatch', TType.BOOL, 4)
            oprot.writeBool(self.bAllowEsnMismatch)
            oprot.writeFieldEnd()
        if self.bResetUponCompletion is not None:
            oprot.writeFieldBegin('bResetUponCompletion', TType.BOOL, 5)
            oprot.writeBool(self.bResetUponCompletion)
            oprot.writeFieldEnd()
        if self.resetTimeout is not None:
            oprot.writeFieldBegin('resetTimeout', TType.I32, 6)
            oprot.writeI32(self.resetTimeout)
            oprot.writeFieldEnd()
        if self.filterFileContents is not None:
            oprot.writeFieldBegin('filterFileContents', TType.STRING, 7)
            oprot.writeString(self.filterFileContents.encode('utf-8') if sys.version_info[0] == 2 else self.filterFileContents)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class XqcnBackupOptions(object):
    """
    Attributes:
     - serviceProgrammingCode
     - bResetUponCompletion
     - resetTimeout
     - filterFileContents

    """


    def __init__(self, serviceProgrammingCode=None, bResetUponCompletion=None, resetTimeout=None, filterFileContents=None,):
        self.serviceProgrammingCode = serviceProgrammingCode
        self.bResetUponCompletion = bResetUponCompletion
        self.resetTimeout = resetTimeout
        self.filterFileContents = filterFileContents

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceProgrammingCode = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.bResetUponCompletion = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.resetTimeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.filterFileContents = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('XqcnBackupOptions')
        if self.serviceProgrammingCode is not None:
            oprot.writeFieldBegin('serviceProgrammingCode', TType.STRING, 1)
            oprot.writeString(self.serviceProgrammingCode.encode('utf-8') if sys.version_info[0] == 2 else self.serviceProgrammingCode)
            oprot.writeFieldEnd()
        if self.bResetUponCompletion is not None:
            oprot.writeFieldBegin('bResetUponCompletion', TType.BOOL, 2)
            oprot.writeBool(self.bResetUponCompletion)
            oprot.writeFieldEnd()
        if self.resetTimeout is not None:
            oprot.writeFieldBegin('resetTimeout', TType.I32, 3)
            oprot.writeI32(self.resetTimeout)
            oprot.writeFieldEnd()
        if self.filterFileContents is not None:
            oprot.writeFieldBegin('filterFileContents', TType.STRING, 4)
            oprot.writeString(self.filterFileContents.encode('utf-8') if sys.version_info[0] == 2 else self.filterFileContents)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeviceConfigResp(object):
    """
    Attributes:
     - returnCode
     - xqcnFileContents

    """


    def __init__(self, returnCode=None, xqcnFileContents=None,):
        self.returnCode = returnCode
        self.xqcnFileContents = xqcnFileContents

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.returnCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.xqcnFileContents = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeviceConfigResp')
        if self.returnCode is not None:
            oprot.writeFieldBegin('returnCode', TType.I32, 1)
            oprot.writeI32(self.returnCode)
            oprot.writeFieldEnd()
        if self.xqcnFileContents is not None:
            oprot.writeFieldBegin('xqcnFileContents', TType.STRING, 2)
            oprot.writeString(self.xqcnFileContents.encode('utf-8') if sys.version_info[0] == 2 else self.xqcnFileContents)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmBackendInfoType(object):
    """
    Attributes:
     - backendName
     - backendId

    """


    def __init__(self, backendName=None, backendId=None,):
        self.backendName = backendName
        self.backendId = backendId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.backendName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.backendId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmBackendInfoType')
        if self.backendName is not None:
            oprot.writeFieldBegin('backendName', TType.STRING, 1)
            oprot.writeString(self.backendName.encode('utf-8') if sys.version_info[0] == 2 else self.backendName)
            oprot.writeFieldEnd()
        if self.backendId is not None:
            oprot.writeFieldBegin('backendId', TType.I32, 2)
            oprot.writeI32(self.backendId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmBackendInfo(object):
    """
    Attributes:
     - status
     - backendInfoList

    """


    def __init__(self, status=None, backendInfoList=None,):
        self.status = status
        self.backendInfoList = backendInfoList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.backendInfoList = []
                    (_etype521, _size518) = iprot.readListBegin()
                    for _i522 in range(_size518):
                        _elem523 = QmBackendInfoType()
                        _elem523.read(iprot)
                        self.backendInfoList.append(_elem523)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmBackendInfo')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.backendInfoList is not None:
            oprot.writeFieldBegin('backendInfoList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.backendInfoList))
            for iter524 in self.backendInfoList:
                iter524.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmBackendInfoResponse(object):
    """
    Attributes:
     - backendInfo

    """


    def __init__(self, backendInfo=None,):
        self.backendInfo = backendInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.backendInfo = []
                    (_etype528, _size525) = iprot.readListBegin()
                    for _i529 in range(_size525):
                        _elem530 = QmBackendInfo()
                        _elem530.read(iprot)
                        self.backendInfo.append(_elem530)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmBackendInfoResponse')
        if self.backendInfo is not None:
            oprot.writeFieldBegin('backendInfo', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.backendInfo))
            for iter531 in self.backendInfo:
                iter531.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmCapabilitiesInfo(object):
    """
    Attributes:
     - status
     - capabilityInfoList

    """


    def __init__(self, status=None, capabilityInfoList=None,):
        self.status = status
        self.capabilityInfoList = capabilityInfoList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.capabilityInfoList = []
                    (_etype535, _size532) = iprot.readListBegin()
                    for _i536 in range(_size532):
                        _elem537 = StreamingCapabilityInfoType()
                        _elem537.read(iprot)
                        self.capabilityInfoList.append(_elem537)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmCapabilitiesInfo')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.capabilityInfoList is not None:
            oprot.writeFieldBegin('capabilityInfoList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.capabilityInfoList))
            for iter538 in self.capabilityInfoList:
                iter538.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmCapabilitiesInfoResponse(object):
    """
    Attributes:
     - capabilityInfo

    """


    def __init__(self, capabilityInfo=None,):
        self.capabilityInfo = capabilityInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.capabilityInfo = []
                    (_etype542, _size539) = iprot.readListBegin()
                    for _i543 in range(_size539):
                        _elem544 = QmCapabilitiesInfo()
                        _elem544.read(iprot)
                        self.capabilityInfo.append(_elem544)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmCapabilitiesInfoResponse')
        if self.capabilityInfo is not None:
            oprot.writeFieldBegin('capabilityInfo', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.capabilityInfo))
            for iter545 in self.capabilityInfo:
                iter545.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamingCapabilityCustomization(object):
    """
    Attributes:
     - customParam

    """


    def __init__(self, customParam=None,):
        self.customParam = customParam

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.customParam = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamingCapabilityCustomization')
        if self.customParam is not None:
            oprot.writeFieldBegin('customParam', TType.STRING, 1)
            oprot.writeBinary(self.customParam)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilerMessage(object):
    """
    Attributes:
     - messageLevel
     - message
     - capabilityName
     - metricId
     - deviceHandle
     - protocolHandle
     - description
     - contextId
     - packetId
     - analysisType
     - messageStatus

    """


    def __init__(self, messageLevel=None, message=None, capabilityName=None, metricId=None, deviceHandle=None, protocolHandle=None, description=None, contextId=None, packetId=None, analysisType=None, messageStatus=None,):
        self.messageLevel = messageLevel
        self.message = message
        self.capabilityName = capabilityName
        self.metricId = metricId
        self.deviceHandle = deviceHandle
        self.protocolHandle = protocolHandle
        self.description = description
        self.contextId = contextId
        self.packetId = packetId
        self.analysisType = analysisType
        self.messageStatus = messageStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.messageLevel = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.metricId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.deviceHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.contextId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I16:
                    self.packetId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.analysisType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I16:
                    self.messageStatus = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilerMessage')
        if self.messageLevel is not None:
            oprot.writeFieldBegin('messageLevel', TType.I16, 1)
            oprot.writeI16(self.messageLevel)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 3)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.metricId is not None:
            oprot.writeFieldBegin('metricId', TType.I32, 4)
            oprot.writeI32(self.metricId)
            oprot.writeFieldEnd()
        if self.deviceHandle is not None:
            oprot.writeFieldBegin('deviceHandle', TType.I64, 5)
            oprot.writeI64(self.deviceHandle)
            oprot.writeFieldEnd()
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 6)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 7)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.contextId is not None:
            oprot.writeFieldBegin('contextId', TType.I16, 8)
            oprot.writeI16(self.contextId)
            oprot.writeFieldEnd()
        if self.packetId is not None:
            oprot.writeFieldBegin('packetId', TType.I16, 9)
            oprot.writeI16(self.packetId)
            oprot.writeFieldEnd()
        if self.analysisType is not None:
            oprot.writeFieldBegin('analysisType', TType.I16, 10)
            oprot.writeI16(self.analysisType)
            oprot.writeFieldEnd()
        if self.messageStatus is not None:
            oprot.writeFieldBegin('messageStatus', TType.I16, 11)
            oprot.writeI16(self.messageStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamingCapabilityInfoType(object):
    """
    Attributes:
     - capabilityId
     - capabilityName
     - metricIdList
     - persistenceType
     - availableStreamingRatesMs
     - customization
     - capabilityFriendlyName
     - capabilityDescription
     - capabilityHwId
     - capabilityDisplayCategory
     - displayType
     - streamingRateType
     - profilingFeatureType
     - availableSamplingRates

    """


    def __init__(self, capabilityId=None, capabilityName=None, metricIdList=None, persistenceType=None, availableStreamingRatesMs=None, customization=None, capabilityFriendlyName=None, capabilityDescription=None, capabilityHwId=None, capabilityDisplayCategory=None, displayType=None, streamingRateType=None, profilingFeatureType=None, availableSamplingRates=None,):
        self.capabilityId = capabilityId
        self.capabilityName = capabilityName
        self.metricIdList = metricIdList
        self.persistenceType = persistenceType
        self.availableStreamingRatesMs = availableStreamingRatesMs
        self.customization = customization
        self.capabilityFriendlyName = capabilityFriendlyName
        self.capabilityDescription = capabilityDescription
        self.capabilityHwId = capabilityHwId
        self.capabilityDisplayCategory = capabilityDisplayCategory
        self.displayType = displayType
        self.streamingRateType = streamingRateType
        self.profilingFeatureType = profilingFeatureType
        self.availableSamplingRates = availableSamplingRates

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.capabilityId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.metricIdList = []
                    (_etype549, _size546) = iprot.readListBegin()
                    for _i550 in range(_size546):
                        _elem551 = iprot.readI32()
                        self.metricIdList.append(_elem551)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.persistenceType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.availableStreamingRatesMs = []
                    (_etype555, _size552) = iprot.readListBegin()
                    for _i556 in range(_size552):
                        _elem557 = iprot.readI32()
                        self.availableStreamingRatesMs.append(_elem557)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.customization = StreamingCapabilityCustomization()
                    self.customization.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.capabilityFriendlyName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.capabilityDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.capabilityHwId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.capabilityDisplayCategory = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.displayType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.streamingRateType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.profilingFeatureType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.availableSamplingRates = []
                    (_etype561, _size558) = iprot.readListBegin()
                    for _i562 in range(_size558):
                        _elem563 = iprot.readI32()
                        self.availableSamplingRates.append(_elem563)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamingCapabilityInfoType')
        if self.capabilityId is not None:
            oprot.writeFieldBegin('capabilityId', TType.I32, 1)
            oprot.writeI32(self.capabilityId)
            oprot.writeFieldEnd()
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 2)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.metricIdList is not None:
            oprot.writeFieldBegin('metricIdList', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.metricIdList))
            for iter564 in self.metricIdList:
                oprot.writeI32(iter564)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.persistenceType is not None:
            oprot.writeFieldBegin('persistenceType', TType.I32, 4)
            oprot.writeI32(self.persistenceType)
            oprot.writeFieldEnd()
        if self.availableStreamingRatesMs is not None:
            oprot.writeFieldBegin('availableStreamingRatesMs', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.availableStreamingRatesMs))
            for iter565 in self.availableStreamingRatesMs:
                oprot.writeI32(iter565)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.customization is not None:
            oprot.writeFieldBegin('customization', TType.STRUCT, 6)
            self.customization.write(oprot)
            oprot.writeFieldEnd()
        if self.capabilityFriendlyName is not None:
            oprot.writeFieldBegin('capabilityFriendlyName', TType.STRING, 7)
            oprot.writeString(self.capabilityFriendlyName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityFriendlyName)
            oprot.writeFieldEnd()
        if self.capabilityDescription is not None:
            oprot.writeFieldBegin('capabilityDescription', TType.STRING, 8)
            oprot.writeString(self.capabilityDescription.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityDescription)
            oprot.writeFieldEnd()
        if self.capabilityHwId is not None:
            oprot.writeFieldBegin('capabilityHwId', TType.STRING, 9)
            oprot.writeString(self.capabilityHwId.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityHwId)
            oprot.writeFieldEnd()
        if self.capabilityDisplayCategory is not None:
            oprot.writeFieldBegin('capabilityDisplayCategory', TType.STRING, 10)
            oprot.writeString(self.capabilityDisplayCategory.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityDisplayCategory)
            oprot.writeFieldEnd()
        if self.displayType is not None:
            oprot.writeFieldBegin('displayType', TType.STRING, 11)
            oprot.writeString(self.displayType.encode('utf-8') if sys.version_info[0] == 2 else self.displayType)
            oprot.writeFieldEnd()
        if self.streamingRateType is not None:
            oprot.writeFieldBegin('streamingRateType', TType.I32, 12)
            oprot.writeI32(self.streamingRateType)
            oprot.writeFieldEnd()
        if self.profilingFeatureType is not None:
            oprot.writeFieldBegin('profilingFeatureType', TType.I32, 13)
            oprot.writeI32(self.profilingFeatureType)
            oprot.writeFieldEnd()
        if self.availableSamplingRates is not None:
            oprot.writeFieldBegin('availableSamplingRates', TType.LIST, 14)
            oprot.writeListBegin(TType.I32, len(self.availableSamplingRates))
            for iter566 in self.availableSamplingRates:
                oprot.writeI32(iter566)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmLoopbackRequest(object):
    """
    Attributes:
     - msg

    """


    def __init__(self, msg=None,):
        self.msg = msg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmLoopbackRequest')
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 1)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmLoopback(object):
    """
    Attributes:
     - status
     - msg

    """


    def __init__(self, status=None, msg=None,):
        self.status = status
        self.msg = msg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmLoopback')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QmLoopbackResponse(object):
    """
    Attributes:
     - loopbackList

    """


    def __init__(self, loopbackList=None,):
        self.loopbackList = loopbackList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.loopbackList = []
                    (_etype570, _size567) = iprot.readListBegin()
                    for _i571 in range(_size567):
                        _elem572 = QmLoopback()
                        _elem572.read(iprot)
                        self.loopbackList.append(_elem572)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QmLoopbackResponse')
        if self.loopbackList is not None:
            oprot.writeFieldBegin('loopbackList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.loopbackList))
            for iter573 in self.loopbackList:
                iter573.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingRawRequestParams(object):
    """
    Attributes:
     - rpcName
     - request
     - timeout
     - capabilityName
     - timeStampFormat
     - streamingRateMs

    """


    def __init__(self, rpcName=None, request=None, timeout=None, capabilityName=None, timeStampFormat=None, streamingRateMs=None,):
        self.rpcName = rpcName
        self.request = request
        self.timeout = timeout
        self.capabilityName = capabilityName
        self.timeStampFormat = timeStampFormat
        self.streamingRateMs = streamingRateMs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.rpcName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.request = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.timeStampFormat = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.streamingRateMs = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingRawRequestParams')
        if self.rpcName is not None:
            oprot.writeFieldBegin('rpcName', TType.STRING, 1)
            oprot.writeString(self.rpcName.encode('utf-8') if sys.version_info[0] == 2 else self.rpcName)
            oprot.writeFieldEnd()
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRING, 2)
            oprot.writeBinary(self.request)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 3)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 4)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.timeStampFormat is not None:
            oprot.writeFieldBegin('timeStampFormat', TType.I32, 5)
            oprot.writeI32(self.timeStampFormat)
            oprot.writeFieldEnd()
        if self.streamingRateMs is not None:
            oprot.writeFieldBegin('streamingRateMs', TType.I32, 6)
            oprot.writeI32(self.streamingRateMs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingRequestParams(object):
    """
    Attributes:
     - rpcName
     - jsonInput
     - returnConfig
     - timeout
     - timeStampFormat

    """


    def __init__(self, rpcName=None, jsonInput=None, returnConfig=None, timeout=None, timeStampFormat=None,):
        self.rpcName = rpcName
        self.jsonInput = jsonInput
        self.returnConfig = returnConfig
        self.timeout = timeout
        self.timeStampFormat = timeStampFormat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.rpcName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jsonInput = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.returnConfig = ProtoBufReturns()
                    self.returnConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.timeStampFormat = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingRequestParams')
        if self.rpcName is not None:
            oprot.writeFieldBegin('rpcName', TType.STRING, 1)
            oprot.writeString(self.rpcName.encode('utf-8') if sys.version_info[0] == 2 else self.rpcName)
            oprot.writeFieldEnd()
        if self.jsonInput is not None:
            oprot.writeFieldBegin('jsonInput', TType.STRING, 2)
            oprot.writeString(self.jsonInput.encode('utf-8') if sys.version_info[0] == 2 else self.jsonInput)
            oprot.writeFieldEnd()
        if self.returnConfig is not None:
            oprot.writeFieldBegin('returnConfig', TType.STRUCT, 3)
            self.returnConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 4)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.timeStampFormat is not None:
            oprot.writeFieldBegin('timeStampFormat', TType.I32, 5)
            oprot.writeI32(self.timeStampFormat)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingBackendParams(object):
    """
    Attributes:
     - backendName

    """


    def __init__(self, backendName=None,):
        self.backendName = backendName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.backendName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingBackendParams')
        if self.backendName is not None:
            oprot.writeFieldBegin('backendName', TType.STRING, 1)
            oprot.writeString(self.backendName.encode('utf-8') if sys.version_info[0] == 2 else self.backendName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingLoopbackParams(object):
    """
    Attributes:
     - backendName
     - loopbackRequest

    """


    def __init__(self, backendName=None, loopbackRequest=None,):
        self.backendName = backendName
        self.loopbackRequest = loopbackRequest

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.backendName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.loopbackRequest = QmLoopbackRequest()
                    self.loopbackRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingLoopbackParams')
        if self.backendName is not None:
            oprot.writeFieldBegin('backendName', TType.STRING, 1)
            oprot.writeString(self.backendName.encode('utf-8') if sys.version_info[0] == 2 else self.backendName)
            oprot.writeFieldEnd()
        if self.loopbackRequest is not None:
            oprot.writeFieldBegin('loopbackRequest', TType.STRUCT, 2)
            self.loopbackRequest.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingStartParams(object):
    """
    Attributes:
     - capabilityList
     - timeStampFormat

    """


    def __init__(self, capabilityList=None, timeStampFormat=None,):
        self.capabilityList = capabilityList
        self.timeStampFormat = timeStampFormat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.capabilityList = []
                    (_etype577, _size574) = iprot.readListBegin()
                    for _i578 in range(_size574):
                        _elem579 = StreamingCapabilitySelect()
                        _elem579.read(iprot)
                        self.capabilityList.append(_elem579)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.timeStampFormat = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingStartParams')
        if self.capabilityList is not None:
            oprot.writeFieldBegin('capabilityList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.capabilityList))
            for iter580 in self.capabilityList:
                iter580.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.timeStampFormat is not None:
            oprot.writeFieldBegin('timeStampFormat', TType.I32, 2)
            oprot.writeI32(self.timeStampFormat)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingMetadataParams(object):
    """
    Attributes:
     - rpcName
     - entityType

    """


    def __init__(self, rpcName=None, entityType=None,):
        self.rpcName = rpcName
        self.entityType = entityType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.rpcName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entityType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingMetadataParams')
        if self.rpcName is not None:
            oprot.writeFieldBegin('rpcName', TType.STRING, 1)
            oprot.writeString(self.rpcName.encode('utf-8') if sys.version_info[0] == 2 else self.rpcName)
            oprot.writeFieldEnd()
        if self.entityType is not None:
            oprot.writeFieldBegin('entityType', TType.I32, 2)
            oprot.writeI32(self.entityType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingStreamInfo(object):
    """
    Attributes:
     - txid
     - capabilityName
     - metricIdList

    """


    def __init__(self, txid=None, capabilityName=None, metricIdList=None,):
        self.txid = txid
        self.capabilityName = capabilityName
        self.metricIdList = metricIdList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.txid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.metricIdList = []
                    (_etype584, _size581) = iprot.readListBegin()
                    for _i585 in range(_size581):
                        _elem586 = iprot.readI32()
                        self.metricIdList.append(_elem586)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingStreamInfo')
        if self.txid is not None:
            oprot.writeFieldBegin('txid', TType.I64, 1)
            oprot.writeI64(self.txid)
            oprot.writeFieldEnd()
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 2)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.metricIdList is not None:
            oprot.writeFieldBegin('metricIdList', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.metricIdList))
            for iter587 in self.metricIdList:
                oprot.writeI32(iter587)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingEventGenericType(object):
    """
    Attributes:
     - string_param
     - int_param
     - long_param
     - double_param
     - boolean_param

    """


    def __init__(self, string_param=None, int_param=None, long_param=None, double_param=None, boolean_param=None,):
        self.string_param = string_param
        self.int_param = int_param
        self.long_param = long_param
        self.double_param = double_param
        self.boolean_param = boolean_param

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.string_param = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.int_param = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.long_param = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.double_param = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.boolean_param = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingEventGenericType')
        if self.string_param is not None:
            oprot.writeFieldBegin('string_param', TType.STRING, 1)
            oprot.writeString(self.string_param.encode('utf-8') if sys.version_info[0] == 2 else self.string_param)
            oprot.writeFieldEnd()
        if self.int_param is not None:
            oprot.writeFieldBegin('int_param', TType.I32, 2)
            oprot.writeI32(self.int_param)
            oprot.writeFieldEnd()
        if self.long_param is not None:
            oprot.writeFieldBegin('long_param', TType.I64, 3)
            oprot.writeI64(self.long_param)
            oprot.writeFieldEnd()
        if self.double_param is not None:
            oprot.writeFieldBegin('double_param', TType.DOUBLE, 4)
            oprot.writeDouble(self.double_param)
            oprot.writeFieldEnd()
        if self.boolean_param is not None:
            oprot.writeFieldBegin('boolean_param', TType.BOOL, 5)
            oprot.writeBool(self.boolean_param)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingEventGenericTypeByIndexOrName(object):
    """
    Attributes:
     - param_index
     - param_name
     - param_value

    """


    def __init__(self, param_index=None, param_name=None, param_value=None,):
        self.param_index = param_index
        self.param_name = param_name
        self.param_value = param_value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.param_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.param_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.param_value = ProfilingEventGenericType()
                    self.param_value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingEventGenericTypeByIndexOrName')
        if self.param_index is not None:
            oprot.writeFieldBegin('param_index', TType.I32, 1)
            oprot.writeI32(self.param_index)
            oprot.writeFieldEnd()
        if self.param_name is not None:
            oprot.writeFieldBegin('param_name', TType.STRING, 2)
            oprot.writeString(self.param_name.encode('utf-8') if sys.version_info[0] == 2 else self.param_name)
            oprot.writeFieldEnd()
        if self.param_value is not None:
            oprot.writeFieldBegin('param_value', TType.STRUCT, 3)
            self.param_value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingEventConfig(object):
    """
    Attributes:
     - configureId
     - params
     - paramsByIndexOrName

    """


    def __init__(self, configureId=None, params=None, paramsByIndexOrName=None,):
        self.configureId = configureId
        self.params = params
        self.paramsByIndexOrName = paramsByIndexOrName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.configureId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype591, _size588) = iprot.readListBegin()
                    for _i592 in range(_size588):
                        _elem593 = ProfilingEventGenericType()
                        _elem593.read(iprot)
                        self.params.append(_elem593)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.paramsByIndexOrName = []
                    (_etype597, _size594) = iprot.readListBegin()
                    for _i598 in range(_size594):
                        _elem599 = ProfilingEventGenericTypeByIndexOrName()
                        _elem599.read(iprot)
                        self.paramsByIndexOrName.append(_elem599)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingEventConfig')
        if self.configureId is not None:
            oprot.writeFieldBegin('configureId', TType.I32, 1)
            oprot.writeI32(self.configureId)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter600 in self.params:
                iter600.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.paramsByIndexOrName is not None:
            oprot.writeFieldBegin('paramsByIndexOrName', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.paramsByIndexOrName))
            for iter601 in self.paramsByIndexOrName:
                iter601.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingConfiguration(object):
    """
    Attributes:
     - config

    """


    def __init__(self, config=None,):
        self.config = config

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.config = ProfilingEventConfig()
                    self.config.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingConfiguration')
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRUCT, 1)
            self.config.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoggingQpbinOptions(object):
    """
    Attributes:
     - capabilityName
     - analysisType

    """


    def __init__(self, capabilityName=None, analysisType=None,):
        self.capabilityName = capabilityName
        self.analysisType = analysisType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.analysisType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoggingQpbinOptions')
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 1)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.analysisType is not None:
            oprot.writeFieldBegin('analysisType', TType.I32, 2)
            oprot.writeI32(self.analysisType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StartLoggingQpbinOptions(object):
    """
    Attributes:
     - loggingQpbinOptionsList

    """


    def __init__(self, loggingQpbinOptionsList=None,):
        self.loggingQpbinOptionsList = loggingQpbinOptionsList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.loggingQpbinOptionsList = []
                    (_etype605, _size602) = iprot.readListBegin()
                    for _i606 in range(_size602):
                        _elem607 = LoggingQpbinOptions()
                        _elem607.read(iprot)
                        self.loggingQpbinOptionsList.append(_elem607)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StartLoggingQpbinOptions')
        if self.loggingQpbinOptionsList is not None:
            oprot.writeFieldBegin('loggingQpbinOptionsList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.loggingQpbinOptionsList))
            for iter608 in self.loggingQpbinOptionsList:
                iter608.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StopLoggingQpbinOptions(object):
    """
    Attributes:
     - loggingQpbinOptionsList
     - saveFolderPath

    """


    def __init__(self, loggingQpbinOptionsList=None, saveFolderPath=None,):
        self.loggingQpbinOptionsList = loggingQpbinOptionsList
        self.saveFolderPath = saveFolderPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.loggingQpbinOptionsList = []
                    (_etype612, _size609) = iprot.readListBegin()
                    for _i613 in range(_size609):
                        _elem614 = LoggingQpbinOptions()
                        _elem614.read(iprot)
                        self.loggingQpbinOptionsList.append(_elem614)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.saveFolderPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StopLoggingQpbinOptions')
        if self.loggingQpbinOptionsList is not None:
            oprot.writeFieldBegin('loggingQpbinOptionsList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.loggingQpbinOptionsList))
            for iter615 in self.loggingQpbinOptionsList:
                iter615.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.saveFolderPath is not None:
            oprot.writeFieldBegin('saveFolderPath', TType.STRING, 2)
            oprot.writeString(self.saveFolderPath.encode('utf-8') if sys.version_info[0] == 2 else self.saveFolderPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoggingQpbinResult(object):
    """
    Attributes:
     - capabilityName
     - analysisType
     - pathList
     - errorType

    """


    def __init__(self, capabilityName=None, analysisType=None, pathList=None, errorType=None,):
        self.capabilityName = capabilityName
        self.analysisType = analysisType
        self.pathList = pathList
        self.errorType = errorType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.analysisType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.pathList = []
                    (_etype619, _size616) = iprot.readListBegin()
                    for _i620 in range(_size616):
                        _elem621 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.pathList.append(_elem621)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.errorType = ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoggingQpbinResult')
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 1)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.analysisType is not None:
            oprot.writeFieldBegin('analysisType', TType.I32, 2)
            oprot.writeI32(self.analysisType)
            oprot.writeFieldEnd()
        if self.pathList is not None:
            oprot.writeFieldBegin('pathList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.pathList))
            for iter622 in self.pathList:
                oprot.writeString(iter622.encode('utf-8') if sys.version_info[0] == 2 else iter622)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 4)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoggingQpbinResponse(object):
    """
    Attributes:
     - loggingQpbinResultList

    """


    def __init__(self, loggingQpbinResultList=None,):
        self.loggingQpbinResultList = loggingQpbinResultList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.loggingQpbinResultList = []
                    (_etype626, _size623) = iprot.readListBegin()
                    for _i627 in range(_size623):
                        _elem628 = LoggingQpbinResult()
                        _elem628.read(iprot)
                        self.loggingQpbinResultList.append(_elem628)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoggingQpbinResponse')
        if self.loggingQpbinResultList is not None:
            oprot.writeFieldBegin('loggingQpbinResultList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.loggingQpbinResultList))
            for iter629 in self.loggingQpbinResultList:
                iter629.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamingCapabilitySelect(object):
    """
    Attributes:
     - capabilityName
     - streamingRateMs
     - broadcast
     - customSelect
     - enableOrDisable
     - metricIdList
     - backendName
     - timeStampFormat
     - profilingConfig
     - profilingConfigJson
     - profilingSampleInterval
     - applicationPath
     - applicationArguments
     - packetType
     - profilingAnalysisType

    """


    def __init__(self, capabilityName=None, streamingRateMs=None, broadcast=None, customSelect=None, enableOrDisable=None, metricIdList=None, backendName=None, timeStampFormat=None, profilingConfig=None, profilingConfigJson=None, profilingSampleInterval=None, applicationPath=None, applicationArguments=None, packetType=None, profilingAnalysisType=None,):
        self.capabilityName = capabilityName
        self.streamingRateMs = streamingRateMs
        self.broadcast = broadcast
        self.customSelect = customSelect
        self.enableOrDisable = enableOrDisable
        self.metricIdList = metricIdList
        self.backendName = backendName
        self.timeStampFormat = timeStampFormat
        self.profilingConfig = profilingConfig
        self.profilingConfigJson = profilingConfigJson
        self.profilingSampleInterval = profilingSampleInterval
        self.applicationPath = applicationPath
        self.applicationArguments = applicationArguments
        self.packetType = packetType
        self.profilingAnalysisType = profilingAnalysisType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.streamingRateMs = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.broadcast = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.customSelect = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.enableOrDisable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.metricIdList = []
                    (_etype633, _size630) = iprot.readListBegin()
                    for _i634 in range(_size630):
                        _elem635 = iprot.readI32()
                        self.metricIdList.append(_elem635)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.backendName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.timeStampFormat = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.profilingConfig = ProfilingConfiguration()
                    self.profilingConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.profilingConfigJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.profilingSampleInterval = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.applicationPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.applicationArguments = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I16:
                    self.packetType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.profilingAnalysisType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamingCapabilitySelect')
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 1)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.streamingRateMs is not None:
            oprot.writeFieldBegin('streamingRateMs', TType.I32, 2)
            oprot.writeI32(self.streamingRateMs)
            oprot.writeFieldEnd()
        if self.broadcast is not None:
            oprot.writeFieldBegin('broadcast', TType.BOOL, 3)
            oprot.writeBool(self.broadcast)
            oprot.writeFieldEnd()
        if self.customSelect is not None:
            oprot.writeFieldBegin('customSelect', TType.STRING, 4)
            oprot.writeBinary(self.customSelect)
            oprot.writeFieldEnd()
        if self.enableOrDisable is not None:
            oprot.writeFieldBegin('enableOrDisable', TType.BOOL, 5)
            oprot.writeBool(self.enableOrDisable)
            oprot.writeFieldEnd()
        if self.metricIdList is not None:
            oprot.writeFieldBegin('metricIdList', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.metricIdList))
            for iter636 in self.metricIdList:
                oprot.writeI32(iter636)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.backendName is not None:
            oprot.writeFieldBegin('backendName', TType.STRING, 7)
            oprot.writeString(self.backendName.encode('utf-8') if sys.version_info[0] == 2 else self.backendName)
            oprot.writeFieldEnd()
        if self.timeStampFormat is not None:
            oprot.writeFieldBegin('timeStampFormat', TType.I32, 8)
            oprot.writeI32(self.timeStampFormat)
            oprot.writeFieldEnd()
        if self.profilingConfig is not None:
            oprot.writeFieldBegin('profilingConfig', TType.STRUCT, 9)
            self.profilingConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.profilingConfigJson is not None:
            oprot.writeFieldBegin('profilingConfigJson', TType.STRING, 10)
            oprot.writeString(self.profilingConfigJson.encode('utf-8') if sys.version_info[0] == 2 else self.profilingConfigJson)
            oprot.writeFieldEnd()
        if self.profilingSampleInterval is not None:
            oprot.writeFieldBegin('profilingSampleInterval', TType.I32, 11)
            oprot.writeI32(self.profilingSampleInterval)
            oprot.writeFieldEnd()
        if self.applicationPath is not None:
            oprot.writeFieldBegin('applicationPath', TType.STRING, 12)
            oprot.writeString(self.applicationPath.encode('utf-8') if sys.version_info[0] == 2 else self.applicationPath)
            oprot.writeFieldEnd()
        if self.applicationArguments is not None:
            oprot.writeFieldBegin('applicationArguments', TType.STRING, 13)
            oprot.writeString(self.applicationArguments.encode('utf-8') if sys.version_info[0] == 2 else self.applicationArguments)
            oprot.writeFieldEnd()
        if self.packetType is not None:
            oprot.writeFieldBegin('packetType', TType.I16, 14)
            oprot.writeI16(self.packetType)
            oprot.writeFieldEnd()
        if self.profilingAnalysisType is not None:
            oprot.writeFieldBegin('profilingAnalysisType', TType.I32, 15)
            oprot.writeI32(self.profilingAnalysisType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CapabilityList(object):
    """
    Attributes:
     - capabilityNames

    """


    def __init__(self, capabilityNames=None,):
        self.capabilityNames = capabilityNames

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.capabilityNames = []
                    (_etype640, _size637) = iprot.readListBegin()
                    for _i641 in range(_size637):
                        _elem642 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.capabilityNames.append(_elem642)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CapabilityList')
        if self.capabilityNames is not None:
            oprot.writeFieldBegin('capabilityNames', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.capabilityNames))
            for iter643 in self.capabilityNames:
                oprot.writeString(iter643.encode('utf-8') if sys.version_info[0] == 2 else iter643)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceLockInfo(object):
    """
    Attributes:
     - serviceName
     - deviceHandle
     - protocolHandle
     - pluginPort

    """


    def __init__(self, serviceName=None, deviceHandle=None, protocolHandle=None, pluginPort=None,):
        self.serviceName = serviceName
        self.deviceHandle = deviceHandle
        self.protocolHandle = protocolHandle
        self.pluginPort = pluginPort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.deviceHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pluginPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServiceLockInfo')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.deviceHandle is not None:
            oprot.writeFieldBegin('deviceHandle', TType.I64, 2)
            oprot.writeI64(self.deviceHandle)
            oprot.writeFieldEnd()
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 3)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.pluginPort is not None:
            oprot.writeFieldBegin('pluginPort', TType.I32, 4)
            oprot.writeI32(self.pluginPort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.serviceName is None:
            raise TProtocolException(message='Required field serviceName is unset!')
        if self.deviceHandle is None:
            raise TProtocolException(message='Required field deviceHandle is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SerialPacketFilter(object):
    """
    Attributes:
     - opCodeMask

    """


    def __init__(self, opCodeMask=None,):
        self.opCodeMask = opCodeMask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.opCodeMask = []
                    (_etype647, _size644) = iprot.readListBegin()
                    for _i648 in range(_size644):
                        _elem649 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.opCodeMask.append(_elem649)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SerialPacketFilter')
        if self.opCodeMask is not None:
            oprot.writeFieldBegin('opCodeMask', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.opCodeMask))
            for iter650 in self.opCodeMask:
                oprot.writeString(iter650.encode('utf-8') if sys.version_info[0] == 2 else iter650)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SerialReturnConfig(object):
    """
    Attributes:
     - flags

    """


    def __init__(self, flags=None,):
        self.flags = flags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SerialReturnConfig')
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 1)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SerialPacket(object):
    """
    Attributes:
     - errorCode
     - sessionIndex
     - protocolIndex
     - receiveTimeData
     - receiveTimeString
     - binaryPayload

    """


    def __init__(self, errorCode=None, sessionIndex=None, protocolIndex=None, receiveTimeData=None, receiveTimeString=None, binaryPayload=None,):
        self.errorCode = errorCode
        self.sessionIndex = sessionIndex
        self.protocolIndex = protocolIndex
        self.receiveTimeData = receiveTimeData
        self.receiveTimeString = receiveTimeString
        self.binaryPayload = binaryPayload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sessionIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.protocolIndex = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.receiveTimeData = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.receiveTimeString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SerialPacket')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.sessionIndex is not None:
            oprot.writeFieldBegin('sessionIndex', TType.I64, 2)
            oprot.writeI64(self.sessionIndex)
            oprot.writeFieldEnd()
        if self.protocolIndex is not None:
            oprot.writeFieldBegin('protocolIndex', TType.I64, 3)
            oprot.writeI64(self.protocolIndex)
            oprot.writeFieldEnd()
        if self.receiveTimeData is not None:
            oprot.writeFieldBegin('receiveTimeData', TType.I64, 4)
            oprot.writeI64(self.receiveTimeData)
            oprot.writeFieldEnd()
        if self.receiveTimeString is not None:
            oprot.writeFieldBegin('receiveTimeString', TType.STRING, 5)
            oprot.writeString(self.receiveTimeString.encode('utf-8') if sys.version_info[0] == 2 else self.receiveTimeString)
            oprot.writeFieldEnd()
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 6)
            oprot.writeBinary(self.binaryPayload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SaveOptions(object):
    """
    Attributes:
     - targetFilePath
     - protocolHandle
     - protocolDescription

    """


    def __init__(self, targetFilePath=None, protocolHandle=None, protocolDescription=None,):
        self.targetFilePath = targetFilePath
        self.protocolHandle = protocolHandle
        self.protocolDescription = protocolDescription

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.targetFilePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.protocolDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SaveOptions')
        if self.targetFilePath is not None:
            oprot.writeFieldBegin('targetFilePath', TType.STRING, 1)
            oprot.writeString(self.targetFilePath.encode('utf-8') if sys.version_info[0] == 2 else self.targetFilePath)
            oprot.writeFieldEnd()
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 2)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.protocolDescription is not None:
            oprot.writeFieldBegin('protocolDescription', TType.STRING, 3)
            oprot.writeString(self.protocolDescription.encode('utf-8') if sys.version_info[0] == 2 else self.protocolDescription)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HypervisorConfiguration(object):
    """
    Attributes:
     - isDiagIdCommandSupported
     - isDiagIdAsyncLoggingSupported
     - defaultDiagid
     - diagIdProcessorName

    """


    def __init__(self, isDiagIdCommandSupported=None, isDiagIdAsyncLoggingSupported=None, defaultDiagid=None, diagIdProcessorName=None,):
        self.isDiagIdCommandSupported = isDiagIdCommandSupported
        self.isDiagIdAsyncLoggingSupported = isDiagIdAsyncLoggingSupported
        self.defaultDiagid = defaultDiagid
        self.diagIdProcessorName = diagIdProcessorName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isDiagIdCommandSupported = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isDiagIdAsyncLoggingSupported = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.defaultDiagid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.diagIdProcessorName = {}
                    (_ktype652, _vtype653, _size651) = iprot.readMapBegin()
                    for _i655 in range(_size651):
                        _key656 = iprot.readI32()
                        _val657 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.diagIdProcessorName[_key656] = _val657
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HypervisorConfiguration')
        if self.isDiagIdCommandSupported is not None:
            oprot.writeFieldBegin('isDiagIdCommandSupported', TType.BOOL, 1)
            oprot.writeBool(self.isDiagIdCommandSupported)
            oprot.writeFieldEnd()
        if self.isDiagIdAsyncLoggingSupported is not None:
            oprot.writeFieldBegin('isDiagIdAsyncLoggingSupported', TType.BOOL, 2)
            oprot.writeBool(self.isDiagIdAsyncLoggingSupported)
            oprot.writeFieldEnd()
        if self.defaultDiagid is not None:
            oprot.writeFieldBegin('defaultDiagid', TType.I32, 3)
            oprot.writeI32(self.defaultDiagid)
            oprot.writeFieldEnd()
        if self.diagIdProcessorName is not None:
            oprot.writeFieldBegin('diagIdProcessorName', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.diagIdProcessorName))
            for kiter658, viter659 in self.diagIdProcessorName.items():
                oprot.writeI32(kiter658)
                oprot.writeString(viter659.encode('utf-8') if sys.version_info[0] == 2 else viter659)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ClientInfo)
ClientInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clientName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'licenseKey', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isAutomation', None, None, ),  # 3
    (4, TType.STRING, 'appName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'username', 'UTF8', None, ),  # 5
    (6, TType.I32, 'qutsOperatingMode', None, None, ),  # 6
)
all_structs.append(ErrorType)
ErrorType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'errorString', 'UTF8', None, ),  # 2
)
all_structs.append(AppException)
AppException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'errorString', 'UTF8', None, ),  # 2
)
all_structs.append(ProtocolUsageIndicator)
ProtocolUsageIndicator.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flowControlStatus', None, None, ),  # 1
    (2, TType.I32, 'flowControlLevel', None, None, ),  # 2
    (3, TType.I32, 'ioWatermark', None, None, ),  # 3
    (4, TType.I32, 'functionWatermark', None, None, ),  # 4
)
all_structs.append(UsageIndicators)
UsageIndicators.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isOptimal', None, None, ),  # 1
    (2, TType.MAP, 'indicators', (TType.I64, None, TType.STRUCT, [ProtocolUsageIndicator, None], False), None, ),  # 2
)
all_structs.append(LockStatus)
LockStatus.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'lockState', None, None, ),  # 1
    (2, TType.I64, 'clientId', None, None, ),  # 2
    (3, TType.STRING, 'reason', 'UTF8', None, ),  # 3
)
all_structs.append(MbnDownloadStatus)
MbnDownloadStatus.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'downloadState', None, None, ),  # 1
    (2, TType.I32, 'indicationToken', None, None, ),  # 2
    (3, TType.I32, 'configType', None, None, ),  # 3
    (4, TType.I32, 'subscriptionId', None, None, ),  # 4
    (5, TType.STRING, 'activeConfigId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'pendingConfigId', 'UTF8', None, ),  # 6
)
all_structs.append(ProtocolInfo)
ProtocolInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
    (2, TType.I64, 'deviceHandle', None, None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.I32, 'protocolType', None, None, ),  # 4
    (5, TType.I32, 'connectionType', None, None, ),  # 5
    (6, TType.I32, 'connectionStatus', None, None, ),  # 6
    (7, TType.I32, 'shareStatus', None, None, ),  # 7
    (8, TType.I32, 'protocolState', None, None, ),  # 8
    (9, TType.I32, 'localPort', None, None, ),  # 9
    (10, TType.I32, 'remotePort', None, None, ),  # 10
    (11, TType.I32, 'direction', None, None, ),  # 11
    (12, TType.STRING, 'alternateDescription', 'UTF8', None, ),  # 12
)
all_structs.append(DeviceInfo)
DeviceInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'deviceHandle', None, None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'protocols', (TType.STRUCT, [ProtocolInfo, None], False), None, ),  # 3
    (4, TType.LIST, 'services', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'serialNumber', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'adbSerialNumber', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'location', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'vid', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'pid', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'edlChipId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'devicePhysicalLocation', 'UTF8', None, ),  # 11
)
all_structs.append(KeyInfo)
KeyInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'keyClassification', None, None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
)
all_structs.append(RestrictedLogLicenseInfo)
RestrictedLogLicenseInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'restrictedLogLicenseStatus', None, None, ),  # 1
    (2, TType.I64, 'deviceHandle', None, None, ),  # 2
    (3, TType.I64, 'protocolHandle', None, None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
)
all_structs.append(InputLogMask)
InputLogMask.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dataSourceType', None, None, ),  # 1
    (2, TType.STRING, 'filename', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'maskFileContent', 'BINARY', None, ),  # 3
    (4, TType.I32, 'format', None, None, ),  # 4
)
all_structs.append(DiagPacketFilter)
DiagPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'idOrNameMask', (TType.I32, None, TType.LIST, (TType.STRUCT, [DiagIdFilterItem, None], False), False), None, ),  # 1
    (2, TType.LIST, 'subscriptionId', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRUCT, 'logMask', [InputLogMask, None], None, ),  # 3
    (4, TType.LIST, 'formatStringFilter', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.BOOL, 'enableMultiSim', None, None, ),  # 5
    (6, TType.LIST, 'miscellaneousId', (TType.I32, None, False), None, ),  # 6
    (7, TType.I32, 'internalPacketEnum', None, None, ),  # 7
    (8, TType.BOOL, 'includeAllOtaLogPackets', None, None, ),  # 8
    (9, TType.MAP, 'f3FormatStringFilter', (TType.I32, None, TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 9
    (10, TType.MAP, 'qtraceFormatStringFilter', (TType.I32, None, TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 10
    (11, TType.LIST, 'prefixFormatStringFilter', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.BOOL, 'excludeQEventsFromQTraceTypeFilter', None, None, ),  # 12
    (13, TType.MAP, 'subIdIdOrNameMask', (TType.I32, None, TType.MAP, (TType.I32, None, TType.LIST, (TType.STRUCT, [DiagIdFilterItem, None], False), False), False), None, ),  # 13
    (14, TType.MAP, 'variantIdToPacketIdMap', (TType.I32, None, TType.MAP, (TType.I32, None, TType.SET, (TType.STRING, 'UTF8', False), False), False), None, ),  # 14
)
all_structs.append(DiagSearchSettings)
DiagSearchSettings.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'searchString', 'UTF8', None, ),  # 1
    (2, TType.I32, 'options', None, None, ),  # 2
    (3, TType.I32, 'fields', None, None, ),  # 3
    (4, TType.I32, 'extfields', None, None, ),  # 4
    (5, TType.BOOL, 'alwaysIncludePacketId', None, None, ),  # 5
)
all_structs.append(FieldQuerySettings)
FieldQuerySettings.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'enumReturnForFieldQuery', None, None, ),  # 1
)
all_structs.append(DiagIdFilterItem)
DiagIdFilterItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'idOrName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'regexFilter', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'summaryRegexFilter', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'caseInsensitive', None, None, ),  # 4
    (5, TType.STRUCT, 'searchSettings', [DiagSearchSettings, None], None, ),  # 5
)
all_structs.append(DiagReturns)
DiagReturns.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
    (2, TType.LIST, 'queries', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'extFlags', None, None, ),  # 3
)
all_structs.append(DiagReturnConfig)
DiagReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
    (2, TType.MAP, 'fieldQueries', (TType.I32, None, TType.MAP, (TType.STRING, 'UTF8', TType.STRUCT, [DiagReturns, None], False), False), None, ),  # 2
    (3, TType.BOOL, 'diagTimeSorted', None, None, ),  # 3
    (4, TType.MAP, 'formatStringArguments', (TType.STRING, 'UTF8', TType.SET, (TType.I32, None, False), False), None, ),  # 4
    (5, TType.I32, 'extFlags', None, None, ),  # 5
    (6, TType.BOOL, 'enumReturnRawValue', None, None, ),  # 6
    (7, TType.BOOL, 'useFormatForFieldQuery', None, None, ),  # 7
    (8, TType.BOOL, 'bShowHiddenField', None, None, ),  # 8
    (9, TType.BOOL, 'useStringForArrayIndex', None, None, ),  # 9
    (10, TType.STRUCT, 'fieldQuerySettings', [FieldQuerySettings, None], None, ),  # 10
)
all_structs.append(DiagPacket)
DiagPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I32, 'packetType', None, None, ),  # 2
    (3, TType.STRING, 'packetId', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'moreResponsesFlag', None, None, ),  # 4
    (5, TType.I64, 'sessionIndex', None, None, ),  # 5
    (6, TType.I64, 'protocolIndex', None, None, ),  # 6
    (7, TType.STRING, 'packetName', 'UTF8', None, ),  # 7
    (8, TType.I64, 'timeStampData', None, None, ),  # 8
    (9, TType.STRING, 'timeStampString', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 10
    (11, TType.STRING, 'parsedText', 'UTF8', None, ),  # 11
    (12, TType.I32, 'subscriptionId', None, None, ),  # 12
    (13, TType.I16, 'processorId', None, None, ),  # 13
    (14, TType.I64, 'hwTimeStampData', None, None, ),  # 14
    (15, TType.STRING, 'hwTimeStampString', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'ulogSource', 'UTF8', None, ),  # 16
    (17, TType.I64, 'receiveTimeData', None, None, ),  # 17
    (18, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'queryResultJson', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'summaryText', 'UTF8', None, ),  # 20
    (21, TType.I64, 'transactionId', None, None, ),  # 21
    (22, TType.I16, 'qdssChannelId', None, None, ),  # 22
    (23, TType.I16, 'qdssMasterId', None, None, ),  # 23
    (24, TType.BYTE, 'qdssAtid', None, None, ),  # 24
    (25, TType.STRING, 'defaultFormatText', 'UTF8', None, ),  # 25
    (26, TType.I16, 'callFrameNumber', None, None, ),  # 26
    (27, TType.I64, 'timeStampTodAdjustedData', None, None, ),  # 27
    (28, TType.STRING, 'timeStampTodAdjustedString', 'UTF8', None, ),  # 28
    (29, TType.LIST, 'formatStringArguments', (TType.STRING, 'UTF8', False), None, ),  # 29
    (30, TType.I16, 'packetSize', None, None, ),  # 30
    (31, TType.LIST, 'qtraceTags', (TType.STRING, 'UTF8', False), None, ),  # 31
    (32, TType.I32, 'miscellaneousId', None, None, ),  # 32
    (33, TType.STRING, 'queryResultPickled', 'BINARY', None, ),  # 33
    (34, TType.I64, 'formatStringHash', None, None, ),  # 34
    (35, TType.STRUCT, 'encryptionKeyInfo', [KeyInfo, None], None, ),  # 35
    (36, TType.I32, 'exceptionMessageType', None, None, ),  # 36
    (37, TType.STRING, 'parsedTextJson', 'UTF8', None, ),  # 37
    (38, TType.I16, 'diagId', None, None, ),  # 38
    (39, TType.STRING, 'diagIdProcessorName', 'UTF8', None, ),  # 39
)
all_structs.append(AnnotationSearchSettings)
AnnotationSearchSettings.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'searchString', 'UTF8', None, ),  # 1
    (2, TType.I32, 'options', None, None, ),  # 2
    (3, TType.I32, 'fields', None, None, ),  # 3
)
all_structs.append(AnnotationFilterItem)
AnnotationFilterItem.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'messageId', None, None, ),  # 1
    (2, TType.STRUCT, 'searchSettings', [AnnotationSearchSettings, None], None, ),  # 2
)
all_structs.append(AnnotationPacketFilter)
AnnotationPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'includeAnnotations', None, None, ),  # 1
    (2, TType.LIST, 'messageIdFilter', (TType.I64, None, False), None, ),  # 2
    (3, TType.LIST, 'filter', (TType.STRUCT, [AnnotationFilterItem, None], False), None, ),  # 3
)
all_structs.append(AnnotationPacket)
AnnotationPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.STRING, 'parsedText', 'UTF8', None, ),  # 4
    (5, TType.I64, 'messageId', None, None, ),  # 5
    (6, TType.I64, 'receiveTimeData', None, None, ),  # 6
    (7, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 7
)
all_structs.append(QmiPacketFilter)
QmiPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'idOrNameMask', (TType.I32, None, TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 1
)
all_structs.append(QmiReturns)
QmiReturns.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
    (2, TType.LIST, 'queries', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(QmiReturnConfig)
QmiReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
    (2, TType.MAP, 'fieldQueries', (TType.I32, None, TType.MAP, (TType.STRING, 'UTF8', TType.STRUCT, [QmiReturns, None], False), False), None, ),  # 2
)
all_structs.append(QmiPacket)
QmiPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I32, 'packetType', None, None, ),  # 2
    (3, TType.I32, 'serviceId', None, None, ),  # 3
    (4, TType.I16, 'messageId', None, None, ),  # 4
    (5, TType.I64, 'sessionIndex', None, None, ),  # 5
    (6, TType.I64, 'protocolIndex', None, None, ),  # 6
    (7, TType.STRING, 'packetName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 8
    (9, TType.STRING, 'parsedXml', 'UTF8', None, ),  # 9
    (10, TType.I64, 'receiveTimeData', None, None, ),  # 10
    (11, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'queryResultJson', 'UTF8', None, ),  # 12
    (13, TType.I64, 'transactionId', None, None, ),  # 13
)
all_structs.append(AdbPacketFilter)
AdbPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'regexFilter', 'UTF8', None, ),  # 1
)
all_structs.append(AdbReturnConfig)
AdbReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(AdbPacket)
AdbPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.STRING, 'packetText', 'UTF8', None, ),  # 4
    (5, TType.I64, 'receiveTimeData', None, None, ),  # 5
    (6, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 6
)
all_structs.append(TelnetPacketFilter)
TelnetPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'regexFilter', 'UTF8', None, ),  # 1
)
all_structs.append(TelnetReturnConfig)
TelnetReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(TelnetPacket)
TelnetPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.STRING, 'packetText', 'UTF8', None, ),  # 4
    (5, TType.I64, 'receiveTimeData', None, None, ),  # 5
    (6, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 6
)
all_structs.append(SaharaPacketFilter)
SaharaPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'idOrNameMask', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(SaharaReturnConfig)
SaharaReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(SaharaPacket)
SaharaPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I32, 'packetId', None, None, ),  # 2
    (3, TType.I64, 'sessionIndex', None, None, ),  # 3
    (4, TType.I64, 'protocolIndex', None, None, ),  # 4
    (5, TType.STRING, 'packetName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 6
    (7, TType.I64, 'receiveTimeData', None, None, ),  # 7
    (8, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 8
)
all_structs.append(FastbootPacketFilter)
FastbootPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'regexFilter', 'UTF8', None, ),  # 1
)
all_structs.append(FastbootReturnConfig)
FastbootReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(FastbootPacket)
FastbootPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.STRING, 'packetText', 'UTF8', None, ),  # 4
    (5, TType.I64, 'receiveTimeData', None, None, ),  # 5
    (6, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 6
)
all_structs.append(EudPacketFilter)
EudPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'opCodeMask', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(EudReturnConfig)
EudReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(EudPacket)
EudPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I32, 'packetId', None, None, ),  # 2
    (3, TType.I64, 'sessionIndex', None, None, ),  # 3
    (4, TType.I64, 'protocolIndex', None, None, ),  # 4
    (5, TType.STRING, 'packetName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 6
    (7, TType.I64, 'receiveTimeData', None, None, ),  # 7
    (8, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 8
)
all_structs.append(RpcCapabilityFilterMap)
RpcCapabilityFilterMap.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'rpcCapabilityFilterList', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [CapabilityFilter, None], False), False), None, ),  # 1
)
all_structs.append(CapabilityFilter)
CapabilityFilter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'metricIdList', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRING, 'capabilityType', 'UTF8', None, ),  # 3
    (4, TType.I32, 'packetType', None, None, ),  # 4
    (5, TType.STRING, 'threadName', 'UTF8', None, ),  # 5
)
all_structs.append(ProtoBufPacketFilter)
ProtoBufPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'packetTypeRpcCapabilityFilterMap', (TType.I32, None, TType.STRUCT, [RpcCapabilityFilterMap, None], False), None, ),  # 1
    (2, TType.LIST, 'capabilityFilterList', (TType.STRUCT, [CapabilityFilter, None], False), None, ),  # 2
)
all_structs.append(ProtoBufReturns)
ProtoBufReturns.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
    (2, TType.LIST, 'queries', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ProtoBufReturnConfig)
ProtoBufReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
    (2, TType.MAP, 'fieldQueries', (TType.I32, None, TType.MAP, (TType.STRING, 'UTF8', TType.STRUCT, [ProtoBufReturns, None], False), False), None, ),  # 2
)
all_structs.append(ProtoBufPacket)
ProtoBufPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I32, 'packetType', None, None, ),  # 2
    (3, TType.I64, 'rpcId', None, None, ),  # 3
    (4, TType.I16, 'messageId', None, None, ),  # 4
    (5, TType.I64, 'sessionIndex', None, None, ),  # 5
    (6, TType.I64, 'protocolIndex', None, None, ),  # 6
    (7, TType.STRING, 'packetName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 8
    (9, TType.STRING, 'parsedText', 'UTF8', None, ),  # 9
    (10, TType.I64, 'receiveTimeData', None, None, ),  # 10
    (11, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'queryResultJson', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'queryResultPickled', 'BINARY', None, ),  # 13
    (14, TType.STRING, 'parsedTextJson', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 15
)
all_structs.append(QspsPacketFilter)
QspsPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'capabilityFilterList', (TType.STRUCT, [CapabilityFilter, None], False), None, ),  # 1
)
all_structs.append(QspsReturns)
QspsReturns.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(QspsReturnConfig)
QspsReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(QspsPacket)
QspsPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I32, 'packetType', None, None, ),  # 2
    (3, TType.I64, 'rpcId', None, None, ),  # 3
    (4, TType.I16, 'messageId', None, None, ),  # 4
    (5, TType.I64, 'sessionIndex', None, None, ),  # 5
    (6, TType.I64, 'protocolIndex', None, None, ),  # 6
    (7, TType.STRING, 'packetName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 8
    (9, TType.STRING, 'parsedText', 'UTF8', None, ),  # 9
    (10, TType.I64, 'receiveTimeData', None, None, ),  # 10
    (11, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'queryResultJson', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'queryResultPickled', 'BINARY', None, ),  # 13
    (14, TType.STRING, 'parsedTextJson', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'parsedTextCsv', 'UTF8', None, ),  # 16
    (17, TType.I32, 'profilingPacketType', None, None, ),  # 17
)
all_structs.append(RxTxInfo)
RxTxInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rxTotalPacketCount', None, None, ),  # 1
    (2, TType.I64, 'txTotalPacketCount', None, None, ),  # 2
    (3, TType.I64, 'rxTotalByteCount', None, None, ),  # 3
    (4, TType.I64, 'txTotalByteCount', None, None, ),  # 4
    (5, TType.DOUBLE, 'rxInstThroughput', None, None, ),  # 5
    (6, TType.DOUBLE, 'txInstThroughput', None, None, ),  # 6
)
all_structs.append(AdplReturnConfig)
AdplReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(AdplPacket)
AdplPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.BYTE, 'version', None, None, ),  # 4
    (5, TType.STRING, 'binaryPayload', 'UTF8', None, ),  # 5
    (6, TType.I64, 'receiveTimeData', None, None, ),  # 6
    (7, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 7
    (8, TType.I64, 'modemTimeData', None, None, ),  # 8
    (9, TType.STRING, 'modemTimeDataString', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'diagBinaryPayload', 'UTF8', None, ),  # 10
)
all_structs.append(BuildInfo)
BuildInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'msmRevision', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'mobileModelId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'mobileSoftwareRevision', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'mobileModelName', 'UTF8', None, ),  # 4
)
all_structs.append(ImageInfo)
ImageInfo.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'index', None, None, ),  # 1
    (2, TType.STRING, 'imageVersion', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'variant', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'oemVersion', 'UTF8', None, ),  # 4
)
all_structs.append(GpsPacket)
GpsPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'latitude', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'longitude', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'altitude', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'speed', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'time', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'date', 'UTF8', None, ),  # 7
)
all_structs.append(NvItem)
NvItem.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'category', 'UTF8', None, ),  # 4
)
all_structs.append(MbnNvItemDiffDetails)
MbnNvItemDiffDetails.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.STRUCT, 'itemDescriptor', [NvItem, None], None, ),  # 2
    (3, TType.BYTE, 'index', None, None, ),  # 3
    (4, TType.STRING, 'mbnPayload', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'phonePayload', 'BINARY', None, ),  # 5
)
all_structs.append(MbnNvDiffDetailsPerSub)
MbnNvDiffDetailsPerSub.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'subscriptionId', None, None, ),  # 1
    (2, TType.LIST, 'mbnNvItemDiffDetails', (TType.STRUCT, [MbnNvItemDiffDetails, None], False), None, ),  # 2
)
all_structs.append(MbnDiffGroupHeader)
MbnDiffGroupHeader.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'groupName', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'path', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(MbnDiffResult)
MbnDiffResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mbnGroupHeader', [MbnDiffGroupHeader, None], None, ),  # 1
    (2, TType.STRUCT, 'phoneGroupHeader', [MbnDiffGroupHeader, None], None, ),  # 2
    (3, TType.LIST, 'mbnNvPerSub', (TType.STRUCT, [MbnNvDiffDetailsPerSub, None], False), None, ),  # 3
)
all_structs.append(NmeaReturnConfig)
NmeaReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(NmeaPacket)
NmeaPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.STRING, 'packetText', 'UTF8', None, ),  # 4
    (5, TType.I64, 'receiveTimeData', None, None, ),  # 5
    (6, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'packetId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 8
)
all_structs.append(NmeaPacketFilter)
NmeaPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'nameMask', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(QmiUnpackReturn)
QmiUnpackReturn.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'msgName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tlvXml', 'UTF8', None, ),  # 2
)
all_structs.append(QdssPacketFilter)
QdssPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'atIds', (TType.I32, None, False), None, ),  # 1
)
all_structs.append(LaneConfiguration)
LaneConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'laneId', None, None, ),  # 1
    (2, TType.STRING, 'rlmName', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'mode', None, None, ),  # 3
)
all_structs.append(OclaConfiguration)
OclaConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'atIds', (TType.I16, None, False), None, ),  # 1
    (2, TType.LIST, 'laneConfigurations', (TType.STRUCT, [LaneConfiguration, None], False), None, ),  # 2
    (3, TType.I32, 'version', None, None, ),  # 3
    (4, TType.I64, 'deviceId', None, None, ),  # 4
)
all_structs.append(QdssReturnConfig)
QdssReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
    (2, TType.LIST, 'oclaConfigurations', (TType.STRUCT, [OclaConfiguration, None], False), None, ),  # 2
)
all_structs.append(QdssPacket)
QdssPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.I64, 'receiveTimeData', None, None, ),  # 4
    (5, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 5
    (6, TType.BYTE, 'atid', None, None, ),  # 6
    (7, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 7
    (8, TType.I64, 'hwTimeStampData', None, None, ),  # 8
    (9, TType.STRING, 'hwTimeStampString', 'UTF8', None, ),  # 9
    (10, TType.I16, 'channelId', None, None, ),  # 10
    (11, TType.I16, 'masterId', None, None, ),  # 11
    (12, TType.I16, 'laneId', None, None, ),  # 12
    (13, TType.STRING, 'parsedText', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'parsedTextJson', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'parsedTextCsv', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'parsedTextPerfetto', 'UTF8', None, ),  # 16
)
all_structs.append(DunPacketFilter)
DunPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'commandMask', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(DunReturnConfig)
DunReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(DunPacket)
DunPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.STRING, 'packetId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'packetText', 'UTF8', None, ),  # 5
    (6, TType.I64, 'receiveTimeData', None, None, ),  # 6
    (7, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 7
)
all_structs.append(DiagPacketIdList)
DiagPacketIdList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'idOrName', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.MAP, 'packetIdFieldQueryMap', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
)
all_structs.append(DiagPacketMap)
DiagPacketMap.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'subIdTypeIdMaskMap', (TType.I32, None, TType.MAP, (TType.I32, None, TType.STRUCT, [DiagPacketIdList, None], False), False), None, ),  # 1
)
all_structs.append(QmiConnectionOptions)
QmiConnectionOptions.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
)
all_structs.append(LogOptions)
LogOptions.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'level', None, None, ),  # 1
    (2, TType.I32, 'format', None, None, ),  # 2
    (3, TType.LIST, 'layout', (TType.I32, None, False), None, ),  # 3
    (4, TType.I32, 'sizeRotationKB', None, None, ),  # 4
    (5, TType.STRING, 'savePath', 'UTF8', None, ),  # 5
    (6, TType.I32, 'maxDataPrintSize', None, None, ),  # 6
)
all_structs.append(PhoneProperty)
PhoneProperty.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'esn', None, None, ),  # 1
    (2, TType.I32, 'phoneModel', None, None, ),  # 2
    (3, TType.I32, 'nvMajor', None, None, ),  # 3
    (4, TType.I32, 'nvMinor', None, None, ),  # 4
    (5, TType.STRING, 'swVersion', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'clientName', 'UTF8', None, ),  # 6
)
all_structs.append(QcnHeader)
QcnHeader.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'configurationName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'fileMajor', None, None, ),  # 2
    (3, TType.I32, 'fileMinor', None, None, ),  # 3
    (4, TType.I32, 'fileRevision', None, None, ),  # 4
    (5, TType.STRUCT, 'phoneProperty', [PhoneProperty, None], None, ),  # 5
)
all_structs.append(QcnItemDiffDetails)
QcnItemDiffDetails.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.I32, 'nvId', None, None, ),  # 2
    (3, TType.I32, 'subscriptionId', None, None, ),  # 3
    (4, TType.I32, 'index', None, None, ),  # 4
    (5, TType.STRING, 'efsFilePath', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'payload1', 'BINARY', None, ),  # 6
    (7, TType.STRING, 'payload2', 'BINARY', None, ),  # 7
)
all_structs.append(QcnFeatureMaskDiffDetails)
QcnFeatureMaskDiffDetails.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.STRING, 'payload1', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'payload2', 'BINARY', None, ),  # 3
)
all_structs.append(QcnPrlDiffDetails)
QcnPrlDiffDetails.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'result', None, None, ),  # 1
    (2, TType.I32, 'subscriptionId', None, None, ),  # 2
    (3, TType.I32, 'nam', None, None, ),  # 3
    (4, TType.STRING, 'payload1', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'payload2', 'BINARY', None, ),  # 5
)
all_structs.append(QcnDiffResult)
QcnDiffResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'header1', [QcnHeader, None], None, ),  # 1
    (2, TType.STRUCT, 'header2', [QcnHeader, None], None, ),  # 2
    (3, TType.STRUCT, 'featureMask', [QcnFeatureMaskDiffDetails, None], None, ),  # 3
    (4, TType.LIST, 'prls', (TType.STRUCT, [QcnPrlDiffDetails, None], False), None, ),  # 4
    (5, TType.LIST, 'items', (TType.STRUCT, [QcnItemDiffDetails, None], False), None, ),  # 5
)
all_structs.append(QcnPrl)
QcnPrl.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'nam', None, None, ),  # 1
    (2, TType.STRING, 'payload', 'BINARY', None, ),  # 2
)
all_structs.append(QcnPrlList)
QcnPrlList.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'subscriptionId', None, None, ),  # 1
    (2, TType.LIST, 'prls', (TType.STRUCT, [QcnPrl, None], False), None, ),  # 2
)
all_structs.append(QcnNumberedNv)
QcnNumberedNv.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'nvId', None, None, ),  # 1
    (2, TType.BYTE, 'index', None, None, ),  # 2
    (3, TType.STRING, 'payload', 'BINARY', None, ),  # 3
)
all_structs.append(QcnNumberedNvList)
QcnNumberedNvList.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'subscriptionId', None, None, ),  # 1
    (2, TType.LIST, 'nvs', (TType.STRUCT, [QcnNumberedNv, None], False), None, ),  # 2
)
all_structs.append(QcnEfsFile)
QcnEfsFile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'efsPath', 'UTF8', None, ),  # 1
    (2, TType.I16, 'flags', None, None, ),  # 2
    (3, TType.BYTE, 'bufferingOption', None, None, ),  # 3
    (4, TType.BYTE, 'cleanupOption', None, None, ),  # 4
    (5, TType.I32, 'fileCreationTimeStamp', None, None, ),  # 5
    (6, TType.STRING, 'payload', 'BINARY', None, ),  # 6
)
all_structs.append(QcnEfsItem)
QcnEfsItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'efsPath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'payload', 'BINARY', None, ),  # 2
)
all_structs.append(QcnEfsItemList)
QcnEfsItemList.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'subscriptionId', None, None, ),  # 1
    (2, TType.LIST, 'efsItems', (TType.STRUCT, [QcnEfsItem, None], False), None, ),  # 2
)
all_structs.append(QcnContent)
QcnContent.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'header', [QcnHeader, None], None, ),  # 1
    (2, TType.STRING, 'featureMask', 'BINARY', None, ),  # 2
    (3, TType.LIST, 'prlLists', (TType.STRUCT, [QcnPrlList, None], False), None, ),  # 3
    (4, TType.LIST, 'nvLists', (TType.STRUCT, [QcnNumberedNvList, None], False), None, ),  # 4
    (5, TType.LIST, 'efsItemLists', (TType.STRUCT, [QcnEfsItemList, None], False), None, ),  # 5
    (6, TType.LIST, 'efsFiles', (TType.STRUCT, [QcnEfsFile, None], False), None, ),  # 6
)
all_structs.append(ProtocolConfiguration)
ProtocolConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
    (2, TType.I32, 'overrideProtocolType', None, None, ),  # 2
    (3, TType.I32, 'baudRate', None, None, ),  # 3
    (4, TType.I64, 'timeout', None, None, ),  # 4
    (5, TType.BOOL, 'enableHdlcOnly', None, None, ),  # 5
    (6, TType.BOOL, 'blockingLogMaskClearOnConnection', None, None, ),  # 6
    (7, TType.BOOL, 'clearLogMaskOnDisconnect', None, None, ),  # 7
    (8, TType.BOOL, 'disablePolling', None, None, ),  # 8
)
all_structs.append(DiagProtocolConnectionOptions)
DiagProtocolConnectionOptions.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
    (2, TType.BOOL, 'openQdssPort', None, None, ),  # 2
    (3, TType.BOOL, 'enableDefaultQdssConfiguration', None, None, ),  # 3
    (4, TType.I32, 'hdlcMode', None, None, ),  # 4
)
all_structs.append(InternetConnectionOptions)
InternetConnectionOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
    (3, TType.I32, 'telnetPort', None, None, ),  # 3
    (4, TType.I32, 'ftpPort', None, None, ),  # 4
    (5, TType.BOOL, 'isSecure', None, None, ),  # 5
)
all_structs.append(ProtocolConnectionOptions)
ProtocolConnectionOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'diagProtocolConfiguration', [DiagProtocolConnectionOptions, None], None, ),  # 1
    (2, TType.STRUCT, 'internetConnectionConfiguration', [InternetConnectionOptions, None], None, ),  # 2
)
all_structs.append(TcpOptions)
TcpOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'description', 'UTF8', None, ),  # 1
    (2, TType.I32, 'protocolType', None, None, ),  # 2
    (3, TType.BOOL, 'isClient', None, None, ),  # 3
    (4, TType.I64, 'deviceHandle', None, None, ),  # 4
    (5, TType.STRING, 'adbSerialNumber', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'chipSerialNumber', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'protocolConnectionOptions', [ProtocolConnectionOptions, None], None, ),  # 7
    (8, TType.BOOL, 'useExistingConnectionIfAvailable', None, None, ),  # 8
    (9, TType.I32, 'profilingTargetType', None, None, ),  # 9
)
all_structs.append(TransferFileOptions)
TransferFileOptions.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
    (2, TType.I32, 'protocolType', None, None, ),  # 2
    (3, TType.STRING, 'wildcardPattern', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'skipIfDestinationFileExists', None, None, ),  # 4
)
all_structs.append(TransferFileResult)
TransferFileResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'errorType', [ErrorType, None], None, ),  # 1
    (2, TType.STRING, 'sequence', 'UTF8', None, ),  # 2
)
all_structs.append(ClientCloseRequest)
ClientCloseRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'purpose', 'UTF8', None, ),  # 1
)
all_structs.append(ClientCloseReason)
ClientCloseReason.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'reason', 'UTF8', None, ),  # 1
)
all_structs.append(ProtocolConfigurationResult)
ProtocolConfigurationResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'errorType', [ErrorType, None], None, ),  # 1
    (2, TType.I64, 'protocolHandle', None, None, ),  # 2
    (3, TType.I32, 'protocolType', None, None, ),  # 3
    (4, TType.I32, 'baudRate', None, None, ),  # 4
    (5, TType.I64, 'timeout', None, None, ),  # 5
    (6, TType.I32, 'hdlcOnlyMode', None, None, ),  # 6
    (7, TType.BOOL, 'disablePolling', None, None, ),  # 7
)
all_structs.append(XqcnRestoreOptions)
XqcnRestoreOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'xqcnFileContents', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sourceFilePath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'serviceProgrammingCode', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'bAllowEsnMismatch', None, None, ),  # 4
    (5, TType.BOOL, 'bResetUponCompletion', None, None, ),  # 5
    (6, TType.I32, 'resetTimeout', None, None, ),  # 6
    (7, TType.STRING, 'filterFileContents', 'UTF8', None, ),  # 7
)
all_structs.append(XqcnBackupOptions)
XqcnBackupOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceProgrammingCode', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'bResetUponCompletion', None, None, ),  # 2
    (3, TType.I32, 'resetTimeout', None, None, ),  # 3
    (4, TType.STRING, 'filterFileContents', 'UTF8', None, ),  # 4
)
all_structs.append(DeviceConfigResp)
DeviceConfigResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'returnCode', None, None, ),  # 1
    (2, TType.STRING, 'xqcnFileContents', 'UTF8', None, ),  # 2
)
all_structs.append(QmBackendInfoType)
QmBackendInfoType.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'backendName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'backendId', None, None, ),  # 2
)
all_structs.append(QmBackendInfo)
QmBackendInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.LIST, 'backendInfoList', (TType.STRUCT, [QmBackendInfoType, None], False), None, ),  # 2
)
all_structs.append(QmBackendInfoResponse)
QmBackendInfoResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'backendInfo', (TType.STRUCT, [QmBackendInfo, None], False), None, ),  # 1
)
all_structs.append(QmCapabilitiesInfo)
QmCapabilitiesInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.LIST, 'capabilityInfoList', (TType.STRUCT, [StreamingCapabilityInfoType, None], False), None, ),  # 2
)
all_structs.append(QmCapabilitiesInfoResponse)
QmCapabilitiesInfoResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'capabilityInfo', (TType.STRUCT, [QmCapabilitiesInfo, None], False), None, ),  # 1
)
all_structs.append(StreamingCapabilityCustomization)
StreamingCapabilityCustomization.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'customParam', 'BINARY', None, ),  # 1
)
all_structs.append(ProfilerMessage)
ProfilerMessage.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'messageLevel', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'metricId', None, None, ),  # 4
    (5, TType.I64, 'deviceHandle', None, None, ),  # 5
    (6, TType.I64, 'protocolHandle', None, None, ),  # 6
    (7, TType.STRING, 'description', 'UTF8', None, ),  # 7
    (8, TType.I16, 'contextId', None, None, ),  # 8
    (9, TType.I16, 'packetId', None, None, ),  # 9
    (10, TType.I16, 'analysisType', None, None, ),  # 10
    (11, TType.I16, 'messageStatus', None, None, ),  # 11
)
all_structs.append(StreamingCapabilityInfoType)
StreamingCapabilityInfoType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'capabilityId', None, None, ),  # 1
    (2, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'metricIdList', (TType.I32, None, False), None, ),  # 3
    (4, TType.I32, 'persistenceType', None, None, ),  # 4
    (5, TType.LIST, 'availableStreamingRatesMs', (TType.I32, None, False), None, ),  # 5
    (6, TType.STRUCT, 'customization', [StreamingCapabilityCustomization, None], None, ),  # 6
    (7, TType.STRING, 'capabilityFriendlyName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'capabilityDescription', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'capabilityHwId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'capabilityDisplayCategory', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'displayType', 'UTF8', None, ),  # 11
    (12, TType.I32, 'streamingRateType', None, None, ),  # 12
    (13, TType.I32, 'profilingFeatureType', None, None, ),  # 13
    (14, TType.LIST, 'availableSamplingRates', (TType.I32, None, False), None, ),  # 14
)
all_structs.append(QmLoopbackRequest)
QmLoopbackRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'msg', 'UTF8', None, ),  # 1
)
all_structs.append(QmLoopback)
QmLoopback.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
)
all_structs.append(QmLoopbackResponse)
QmLoopbackResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'loopbackList', (TType.STRUCT, [QmLoopback, None], False), None, ),  # 1
)
all_structs.append(ProfilingRawRequestParams)
ProfilingRawRequestParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'rpcName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'request', 'BINARY', None, ),  # 2
    (3, TType.I32, 'timeout', None, None, ),  # 3
    (4, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 4
    (5, TType.I32, 'timeStampFormat', None, None, ),  # 5
    (6, TType.I32, 'streamingRateMs', None, None, ),  # 6
)
all_structs.append(ProfilingRequestParams)
ProfilingRequestParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'rpcName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jsonInput', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'returnConfig', [ProtoBufReturns, None], None, ),  # 3
    (4, TType.I32, 'timeout', None, None, ),  # 4
    (5, TType.I32, 'timeStampFormat', None, None, ),  # 5
)
all_structs.append(ProfilingBackendParams)
ProfilingBackendParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'backendName', 'UTF8', None, ),  # 1
)
all_structs.append(ProfilingLoopbackParams)
ProfilingLoopbackParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'backendName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'loopbackRequest', [QmLoopbackRequest, None], None, ),  # 2
)
all_structs.append(ProfilingStartParams)
ProfilingStartParams.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'capabilityList', (TType.STRUCT, [StreamingCapabilitySelect, None], False), None, ),  # 1
    (2, TType.I32, 'timeStampFormat', None, None, ),  # 2
)
all_structs.append(ProfilingMetadataParams)
ProfilingMetadataParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'rpcName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'entityType', None, None, ),  # 2
)
all_structs.append(ProfilingStreamInfo)
ProfilingStreamInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'txid', None, None, ),  # 1
    (2, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'metricIdList', (TType.I32, None, False), None, ),  # 3
)
all_structs.append(ProfilingEventGenericType)
ProfilingEventGenericType.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'string_param', 'UTF8', None, ),  # 1
    (2, TType.I32, 'int_param', None, None, ),  # 2
    (3, TType.I64, 'long_param', None, None, ),  # 3
    (4, TType.DOUBLE, 'double_param', None, None, ),  # 4
    (5, TType.BOOL, 'boolean_param', None, None, ),  # 5
)
all_structs.append(ProfilingEventGenericTypeByIndexOrName)
ProfilingEventGenericTypeByIndexOrName.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'param_index', None, None, ),  # 1
    (2, TType.STRING, 'param_name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'param_value', [ProfilingEventGenericType, None], None, ),  # 3
)
all_structs.append(ProfilingEventConfig)
ProfilingEventConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'configureId', None, None, ),  # 1
    (2, TType.LIST, 'params', (TType.STRUCT, [ProfilingEventGenericType, None], False), None, ),  # 2
    (3, TType.LIST, 'paramsByIndexOrName', (TType.STRUCT, [ProfilingEventGenericTypeByIndexOrName, None], False), None, ),  # 3
)
all_structs.append(ProfilingConfiguration)
ProfilingConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'config', [ProfilingEventConfig, None], None, ),  # 1
)
all_structs.append(LoggingQpbinOptions)
LoggingQpbinOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'analysisType', None, None, ),  # 2
)
all_structs.append(StartLoggingQpbinOptions)
StartLoggingQpbinOptions.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'loggingQpbinOptionsList', (TType.STRUCT, [LoggingQpbinOptions, None], False), None, ),  # 1
)
all_structs.append(StopLoggingQpbinOptions)
StopLoggingQpbinOptions.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'loggingQpbinOptionsList', (TType.STRUCT, [LoggingQpbinOptions, None], False), None, ),  # 1
    (2, TType.STRING, 'saveFolderPath', 'UTF8', None, ),  # 2
)
all_structs.append(LoggingQpbinResult)
LoggingQpbinResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'analysisType', None, None, ),  # 2
    (3, TType.LIST, 'pathList', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRUCT, 'errorType', [ErrorType, None], None, ),  # 4
)
all_structs.append(LoggingQpbinResponse)
LoggingQpbinResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'loggingQpbinResultList', (TType.STRUCT, [LoggingQpbinResult, None], False), None, ),  # 1
)
all_structs.append(StreamingCapabilitySelect)
StreamingCapabilitySelect.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'streamingRateMs', None, None, ),  # 2
    (3, TType.BOOL, 'broadcast', None, None, ),  # 3
    (4, TType.STRING, 'customSelect', 'BINARY', None, ),  # 4
    (5, TType.BOOL, 'enableOrDisable', None, None, ),  # 5
    (6, TType.LIST, 'metricIdList', (TType.I32, None, False), None, ),  # 6
    (7, TType.STRING, 'backendName', 'UTF8', None, ),  # 7
    (8, TType.I32, 'timeStampFormat', None, None, ),  # 8
    (9, TType.STRUCT, 'profilingConfig', [ProfilingConfiguration, None], None, ),  # 9
    (10, TType.STRING, 'profilingConfigJson', 'UTF8', None, ),  # 10
    (11, TType.I32, 'profilingSampleInterval', None, None, ),  # 11
    (12, TType.STRING, 'applicationPath', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'applicationArguments', 'UTF8', None, ),  # 13
    (14, TType.I16, 'packetType', None, None, ),  # 14
    (15, TType.I32, 'profilingAnalysisType', None, None, ),  # 15
)
all_structs.append(CapabilityList)
CapabilityList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'capabilityNames', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(ServiceLockInfo)
ServiceLockInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
    (2, TType.I64, 'deviceHandle', None, None, ),  # 2
    (3, TType.I64, 'protocolHandle', None, None, ),  # 3
    (4, TType.I32, 'pluginPort', None, None, ),  # 4
)
all_structs.append(SerialPacketFilter)
SerialPacketFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'opCodeMask', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(SerialReturnConfig)
SerialReturnConfig.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'flags', None, None, ),  # 1
)
all_structs.append(SerialPacket)
SerialPacket.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'sessionIndex', None, None, ),  # 2
    (3, TType.I64, 'protocolIndex', None, None, ),  # 3
    (4, TType.I64, 'receiveTimeData', None, None, ),  # 4
    (5, TType.STRING, 'receiveTimeString', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'binaryPayload', 'BINARY', None, ),  # 6
)
all_structs.append(SaveOptions)
SaveOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'targetFilePath', 'UTF8', None, ),  # 1
    (2, TType.I64, 'protocolHandle', None, None, ),  # 2
    (3, TType.STRING, 'protocolDescription', 'UTF8', None, ),  # 3
)
all_structs.append(HypervisorConfiguration)
HypervisorConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isDiagIdCommandSupported', None, None, ),  # 1
    (2, TType.BOOL, 'isDiagIdAsyncLoggingSupported', None, None, ),  # 2
    (3, TType.I32, 'defaultDiagid', None, None, ),  # 3
    (4, TType.MAP, 'diagIdProcessorName', (TType.I32, None, TType.STRING, 'UTF8', False), None, ),  # 4
)
fix_spec(all_structs)
del all_structs
