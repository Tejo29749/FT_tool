#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from UtilityService import UtilityService
from UtilityService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ErrorType getLastError()')
    print('  string qmiPack(string serviceIdOrName, string messageIdOrName, string xmlRequest)')
    print('  QmiUnpackReturn qmiUnPack(string serviceIdOrName, string input)')
    print('   nvGetAllItems()')
    print('  string nvGetItemDefinition(string nvItemNameOrId)')
    print('  ErrorCode createDigestsForVipDownload(string buildPath, DownloadBuildOptions options, string outputPath)')
    print('  ErrorCode createDigestsForBuildValidation(string buildPath, DownloadBuildOptions options, string outputPath)')
    print('  string generateCfg(DiagPacketMap mask, LogMaskFormat format)')
    print('   convertToHdf( logFiles, string saveFolder)')
    print('  QcnDiffResult qcnDiff(string xqcnContents1, string xqcnContents2, bool showSame)')
    print('  DiagPacketMap extractFromCfg(string cfgContents, LogMaskFormat format)')
    print('  DiagPacketMap extractFromAwsi(string awsiContents)')
    print('  i32 getDiagId(DiagPacketType packetType, string idOrName)')
    print('  i32 getQmiId(QmiPacketType packetType, string idOrName)')
    print('  i32 getSaharaId(string idOrName)')
    print('  QcnContent deserializeXqcnXml(string xqcnFileContents)')
    print('  string serializeXqcnXml(QcnContent xqcnContents)')
    print('  NvParserResult deserializeNvItem(string nvIdOrEfsPath, i32 subscriptionId, i8 index, NvReturns returnConfig, string payload)')
    print('  string serializeNvItem(string nvIdOrEfsPath, i32 subscriptionId, string valueList)')
    print('  ErrorCode compressEncryptedFile(string originalFile, string outputFile)')
    print('  MbnDiffResult parseMBN(string mbnOrXmlPath)')
    print('  string getCapabilityMetaData(CapabilityList capabilityList)')
    print('  string getCapabilityConfiguration(CapabilityList CapabilityList)')
    print('  string validateCapabilityConfiguration(string capabilityConfigurationJson)')
    print('  UserDllProtocolToPacketIdMap getSupportedUserParsingDllMap()')
    print('  string getProfilingReportMetadataJson()')
    print('  QdssQmlTargetListResp getQdssQmlTargetList()')
    print('  QdssQmlPacketIdResp getQdssQmlPacketId(string rlmName, string rlmMode)')
    print('  QdssQmlPacketVersionsResp getQdssQmlPacketVersions(i64 target, i64 packetId)')
    print('  QdssQmlVersionRangeResp getQdssQmlVersionRangeForTarget(i64 target)')
    print('  QdssQmlPacketMetadataResp getQdssQmlPacketMetaData(i64 packetId, i64 packetVersion)')
    print('  QdssQmlHweMetaDataAsJsonResp getQdssQmlQdssHweMetadataAsJson(i64 target)')
    print('  QdssQmlRegistersByTargetResp getQdssQmlRegistersByTarget(i64 target)')
    print('  QdssQmlAtidsAsJsonResp getQdssQmlAtidsAsJson()')
    print('  QdssHweDecodingDataResp getHweDecodingData(QdssHweDecodingDataReq qdssHweDecodingDataReq)')
    print('  QdssHweConfigurationDataResp getHweConfigurationData(QdssHweConfigurationDataReq qdssHweConfigurationDataReq)')
    print('  QdssQmlFtraceEventResp getQdssQmlFtraceEventDetails(i64 target)')
    print('  QdssHweFilteredDataResp getQdssHweFilteredData(QdssHweFilteredDataReq qdssHweFilteredDataReq)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = UtilityService.Client(protocol)
transport.open()

if cmd == 'getLastError':
    if len(args) != 0:
        print('getLastError requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastError())

elif cmd == 'qmiPack':
    if len(args) != 3:
        print('qmiPack requires 3 args')
        sys.exit(1)
    pp.pprint(client.qmiPack(args[0], args[1], args[2],))

elif cmd == 'qmiUnPack':
    if len(args) != 2:
        print('qmiUnPack requires 2 args')
        sys.exit(1)
    pp.pprint(client.qmiUnPack(args[0], args[1],))

elif cmd == 'nvGetAllItems':
    if len(args) != 0:
        print('nvGetAllItems requires 0 args')
        sys.exit(1)
    pp.pprint(client.nvGetAllItems())

elif cmd == 'nvGetItemDefinition':
    if len(args) != 1:
        print('nvGetItemDefinition requires 1 args')
        sys.exit(1)
    pp.pprint(client.nvGetItemDefinition(args[0],))

elif cmd == 'createDigestsForVipDownload':
    if len(args) != 3:
        print('createDigestsForVipDownload requires 3 args')
        sys.exit(1)
    pp.pprint(client.createDigestsForVipDownload(args[0], eval(args[1]), args[2],))

elif cmd == 'createDigestsForBuildValidation':
    if len(args) != 3:
        print('createDigestsForBuildValidation requires 3 args')
        sys.exit(1)
    pp.pprint(client.createDigestsForBuildValidation(args[0], eval(args[1]), args[2],))

elif cmd == 'generateCfg':
    if len(args) != 2:
        print('generateCfg requires 2 args')
        sys.exit(1)
    pp.pprint(client.generateCfg(eval(args[0]), eval(args[1]),))

elif cmd == 'convertToHdf':
    if len(args) != 2:
        print('convertToHdf requires 2 args')
        sys.exit(1)
    pp.pprint(client.convertToHdf(eval(args[0]), args[1],))

elif cmd == 'qcnDiff':
    if len(args) != 3:
        print('qcnDiff requires 3 args')
        sys.exit(1)
    pp.pprint(client.qcnDiff(args[0], args[1], eval(args[2]),))

elif cmd == 'extractFromCfg':
    if len(args) != 2:
        print('extractFromCfg requires 2 args')
        sys.exit(1)
    pp.pprint(client.extractFromCfg(args[0], eval(args[1]),))

elif cmd == 'extractFromAwsi':
    if len(args) != 1:
        print('extractFromAwsi requires 1 args')
        sys.exit(1)
    pp.pprint(client.extractFromAwsi(args[0],))

elif cmd == 'getDiagId':
    if len(args) != 2:
        print('getDiagId requires 2 args')
        sys.exit(1)
    pp.pprint(client.getDiagId(eval(args[0]), args[1],))

elif cmd == 'getQmiId':
    if len(args) != 2:
        print('getQmiId requires 2 args')
        sys.exit(1)
    pp.pprint(client.getQmiId(eval(args[0]), args[1],))

elif cmd == 'getSaharaId':
    if len(args) != 1:
        print('getSaharaId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSaharaId(args[0],))

elif cmd == 'deserializeXqcnXml':
    if len(args) != 1:
        print('deserializeXqcnXml requires 1 args')
        sys.exit(1)
    pp.pprint(client.deserializeXqcnXml(args[0],))

elif cmd == 'serializeXqcnXml':
    if len(args) != 1:
        print('serializeXqcnXml requires 1 args')
        sys.exit(1)
    pp.pprint(client.serializeXqcnXml(eval(args[0]),))

elif cmd == 'deserializeNvItem':
    if len(args) != 5:
        print('deserializeNvItem requires 5 args')
        sys.exit(1)
    pp.pprint(client.deserializeNvItem(args[0], eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'serializeNvItem':
    if len(args) != 3:
        print('serializeNvItem requires 3 args')
        sys.exit(1)
    pp.pprint(client.serializeNvItem(args[0], eval(args[1]), args[2],))

elif cmd == 'compressEncryptedFile':
    if len(args) != 2:
        print('compressEncryptedFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.compressEncryptedFile(args[0], args[1],))

elif cmd == 'parseMBN':
    if len(args) != 1:
        print('parseMBN requires 1 args')
        sys.exit(1)
    pp.pprint(client.parseMBN(args[0],))

elif cmd == 'getCapabilityMetaData':
    if len(args) != 1:
        print('getCapabilityMetaData requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCapabilityMetaData(eval(args[0]),))

elif cmd == 'getCapabilityConfiguration':
    if len(args) != 1:
        print('getCapabilityConfiguration requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCapabilityConfiguration(eval(args[0]),))

elif cmd == 'validateCapabilityConfiguration':
    if len(args) != 1:
        print('validateCapabilityConfiguration requires 1 args')
        sys.exit(1)
    pp.pprint(client.validateCapabilityConfiguration(args[0],))

elif cmd == 'getSupportedUserParsingDllMap':
    if len(args) != 0:
        print('getSupportedUserParsingDllMap requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSupportedUserParsingDllMap())

elif cmd == 'getProfilingReportMetadataJson':
    if len(args) != 0:
        print('getProfilingReportMetadataJson requires 0 args')
        sys.exit(1)
    pp.pprint(client.getProfilingReportMetadataJson())

elif cmd == 'getQdssQmlTargetList':
    if len(args) != 0:
        print('getQdssQmlTargetList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlTargetList())

elif cmd == 'getQdssQmlPacketId':
    if len(args) != 2:
        print('getQdssQmlPacketId requires 2 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlPacketId(args[0], args[1],))

elif cmd == 'getQdssQmlPacketVersions':
    if len(args) != 2:
        print('getQdssQmlPacketVersions requires 2 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlPacketVersions(eval(args[0]), eval(args[1]),))

elif cmd == 'getQdssQmlVersionRangeForTarget':
    if len(args) != 1:
        print('getQdssQmlVersionRangeForTarget requires 1 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlVersionRangeForTarget(eval(args[0]),))

elif cmd == 'getQdssQmlPacketMetaData':
    if len(args) != 2:
        print('getQdssQmlPacketMetaData requires 2 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlPacketMetaData(eval(args[0]), eval(args[1]),))

elif cmd == 'getQdssQmlQdssHweMetadataAsJson':
    if len(args) != 1:
        print('getQdssQmlQdssHweMetadataAsJson requires 1 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlQdssHweMetadataAsJson(eval(args[0]),))

elif cmd == 'getQdssQmlRegistersByTarget':
    if len(args) != 1:
        print('getQdssQmlRegistersByTarget requires 1 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlRegistersByTarget(eval(args[0]),))

elif cmd == 'getQdssQmlAtidsAsJson':
    if len(args) != 0:
        print('getQdssQmlAtidsAsJson requires 0 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlAtidsAsJson())

elif cmd == 'getHweDecodingData':
    if len(args) != 1:
        print('getHweDecodingData requires 1 args')
        sys.exit(1)
    pp.pprint(client.getHweDecodingData(eval(args[0]),))

elif cmd == 'getHweConfigurationData':
    if len(args) != 1:
        print('getHweConfigurationData requires 1 args')
        sys.exit(1)
    pp.pprint(client.getHweConfigurationData(eval(args[0]),))

elif cmd == 'getQdssQmlFtraceEventDetails':
    if len(args) != 1:
        print('getQdssQmlFtraceEventDetails requires 1 args')
        sys.exit(1)
    pp.pprint(client.getQdssQmlFtraceEventDetails(eval(args[0]),))

elif cmd == 'getQdssHweFilteredData':
    if len(args) != 1:
        print('getQdssHweFilteredData requires 1 args')
        sys.exit(1)
    pp.pprint(client.getQdssHweFilteredData(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
