#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from FactoryService import FactoryService
from FactoryService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ErrorType initializeService()')
    print('  ErrorType initializeServiceByProtocol(i64 protocolHandle)')
    print('  ErrorType destroyService()')
    print('  ImeiResponse getImei(SubscriptionType subType)')
    print('  ErrorType setImei(SubscriptionType subType, string imei)')
    print('  MeidResponse getMeid(SubscriptionType subType)')
    print('  ErrorType setMeid(SubscriptionType subType, string meid)')
    print('  string getEsn(SubscriptionType subType)')
    print('  OperatingMode getOperatingMode()')
    print('  ErrorType setOperatingMode(OperatingMode operatingMode)')
    print('  bool validateSpc(string spc)')
    print('  ErrorType provisionSpc(string currentSpc, string newSpc)')
    print('  ErrorType wcnssBackupBinFile(WcnssOptions wcnssOptions)')
    print('  ErrorType wcnssRestoreBinFile(WcnssOptions wcnssOptions)')
    print('  string wcnssReadMacAddress(WcnssOptions wcnssOptions)')
    print('  ErrorType wcnssWriteMacAddress(WcnssOptions wcnssOptions)')
    print('  FlattenResponse flattenMetaBuild(DownloadBuildOptions downloadBuildOptions, string outputPath)')
    print('  ErrorType createDigestForVipDownload(DownloadBuildOptions downloadBuildOptions, string outputPath)')
    print('  ErrorType downloadBuild(DownloadBuildOptions downloadBuildOptions)')
    print('  BuildResponse buildInfo(DownloadBuildOptions downloadBuildOptions)')
    print('  string prlGetVersion(string prlFilePath)')
    print('  string simlockGenerateRandomSaltData()')
    print('  string simlockGenerateRandomCkData(i8 length)')
    print('  string simlockGenerateHckData(string ckData, string saltData, i16 iterations)')
    print('  ErrorType simlockCreateXmlFile(string filePath)')
    print('  SimlockCategoryDataResponse simlockGetDataConfigurationsFromXmlFile(SimlockOptions simlockOptions, string filePath)')
    print('  SimlockLockResponse simlockGetLockStatus()')
    print('  SimlockCommonResponse simlockSetPolicy(SimlockOptions simlockOptions)')
    print('  SimlockCommonResponse simlockCkLock(SimlockOptions simlockOptions)')
    print('  SimlockCommonResponse simlockHckLock(SimlockOptions simlockOptions)')
    print('  SimlockUnlockResponse simlockUnlock(SimlockOptions simlockOptions)')
    print('  SimlockCategoryDataResponse simlockGetCategoryData(SimlockOptions simlockOptions)')
    print('  SimlockCategoryDataExtResponse simlockGetCategoryDataExt(SimlockOptions simlockOptions)')
    print('  SimlockCategoryDataByteResponse simlockSerializeDataConfigurations(SimlockOptions simlockOptions)')
    print('  SimlockCategoryDataResponse simlockDeserializeDataConfigurations(SimlockOptions simlockOptions,  simlockDataByteConfigurations, i8 numOfCodes)')
    print('  ErrorCode setNvItem(string nvItemNameOrId, string valueJson, SubscriptionId subscriptionId)')
    print('  bool WaitForProtocolState(i64 deviceHandle, i64 protocolHandle, ProtocolState protocolState, i32 timeout)')
    print('  ErrorType getLastError()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = FactoryService.Client(protocol)
transport.open()

if cmd == 'initializeService':
    if len(args) != 0:
        print('initializeService requires 0 args')
        sys.exit(1)
    pp.pprint(client.initializeService())

elif cmd == 'initializeServiceByProtocol':
    if len(args) != 1:
        print('initializeServiceByProtocol requires 1 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceByProtocol(eval(args[0]),))

elif cmd == 'destroyService':
    if len(args) != 0:
        print('destroyService requires 0 args')
        sys.exit(1)
    pp.pprint(client.destroyService())

elif cmd == 'getImei':
    if len(args) != 1:
        print('getImei requires 1 args')
        sys.exit(1)
    pp.pprint(client.getImei(eval(args[0]),))

elif cmd == 'setImei':
    if len(args) != 2:
        print('setImei requires 2 args')
        sys.exit(1)
    pp.pprint(client.setImei(eval(args[0]), args[1],))

elif cmd == 'getMeid':
    if len(args) != 1:
        print('getMeid requires 1 args')
        sys.exit(1)
    pp.pprint(client.getMeid(eval(args[0]),))

elif cmd == 'setMeid':
    if len(args) != 2:
        print('setMeid requires 2 args')
        sys.exit(1)
    pp.pprint(client.setMeid(eval(args[0]), args[1],))

elif cmd == 'getEsn':
    if len(args) != 1:
        print('getEsn requires 1 args')
        sys.exit(1)
    pp.pprint(client.getEsn(eval(args[0]),))

elif cmd == 'getOperatingMode':
    if len(args) != 0:
        print('getOperatingMode requires 0 args')
        sys.exit(1)
    pp.pprint(client.getOperatingMode())

elif cmd == 'setOperatingMode':
    if len(args) != 1:
        print('setOperatingMode requires 1 args')
        sys.exit(1)
    pp.pprint(client.setOperatingMode(eval(args[0]),))

elif cmd == 'validateSpc':
    if len(args) != 1:
        print('validateSpc requires 1 args')
        sys.exit(1)
    pp.pprint(client.validateSpc(args[0],))

elif cmd == 'provisionSpc':
    if len(args) != 2:
        print('provisionSpc requires 2 args')
        sys.exit(1)
    pp.pprint(client.provisionSpc(args[0], args[1],))

elif cmd == 'wcnssBackupBinFile':
    if len(args) != 1:
        print('wcnssBackupBinFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.wcnssBackupBinFile(eval(args[0]),))

elif cmd == 'wcnssRestoreBinFile':
    if len(args) != 1:
        print('wcnssRestoreBinFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.wcnssRestoreBinFile(eval(args[0]),))

elif cmd == 'wcnssReadMacAddress':
    if len(args) != 1:
        print('wcnssReadMacAddress requires 1 args')
        sys.exit(1)
    pp.pprint(client.wcnssReadMacAddress(eval(args[0]),))

elif cmd == 'wcnssWriteMacAddress':
    if len(args) != 1:
        print('wcnssWriteMacAddress requires 1 args')
        sys.exit(1)
    pp.pprint(client.wcnssWriteMacAddress(eval(args[0]),))

elif cmd == 'flattenMetaBuild':
    if len(args) != 2:
        print('flattenMetaBuild requires 2 args')
        sys.exit(1)
    pp.pprint(client.flattenMetaBuild(eval(args[0]), args[1],))

elif cmd == 'createDigestForVipDownload':
    if len(args) != 2:
        print('createDigestForVipDownload requires 2 args')
        sys.exit(1)
    pp.pprint(client.createDigestForVipDownload(eval(args[0]), args[1],))

elif cmd == 'downloadBuild':
    if len(args) != 1:
        print('downloadBuild requires 1 args')
        sys.exit(1)
    pp.pprint(client.downloadBuild(eval(args[0]),))

elif cmd == 'buildInfo':
    if len(args) != 1:
        print('buildInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.buildInfo(eval(args[0]),))

elif cmd == 'prlGetVersion':
    if len(args) != 1:
        print('prlGetVersion requires 1 args')
        sys.exit(1)
    pp.pprint(client.prlGetVersion(args[0],))

elif cmd == 'simlockGenerateRandomSaltData':
    if len(args) != 0:
        print('simlockGenerateRandomSaltData requires 0 args')
        sys.exit(1)
    pp.pprint(client.simlockGenerateRandomSaltData())

elif cmd == 'simlockGenerateRandomCkData':
    if len(args) != 1:
        print('simlockGenerateRandomCkData requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockGenerateRandomCkData(eval(args[0]),))

elif cmd == 'simlockGenerateHckData':
    if len(args) != 3:
        print('simlockGenerateHckData requires 3 args')
        sys.exit(1)
    pp.pprint(client.simlockGenerateHckData(args[0], args[1], eval(args[2]),))

elif cmd == 'simlockCreateXmlFile':
    if len(args) != 1:
        print('simlockCreateXmlFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockCreateXmlFile(args[0],))

elif cmd == 'simlockGetDataConfigurationsFromXmlFile':
    if len(args) != 2:
        print('simlockGetDataConfigurationsFromXmlFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.simlockGetDataConfigurationsFromXmlFile(eval(args[0]), args[1],))

elif cmd == 'simlockGetLockStatus':
    if len(args) != 0:
        print('simlockGetLockStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.simlockGetLockStatus())

elif cmd == 'simlockSetPolicy':
    if len(args) != 1:
        print('simlockSetPolicy requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockSetPolicy(eval(args[0]),))

elif cmd == 'simlockCkLock':
    if len(args) != 1:
        print('simlockCkLock requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockCkLock(eval(args[0]),))

elif cmd == 'simlockHckLock':
    if len(args) != 1:
        print('simlockHckLock requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockHckLock(eval(args[0]),))

elif cmd == 'simlockUnlock':
    if len(args) != 1:
        print('simlockUnlock requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockUnlock(eval(args[0]),))

elif cmd == 'simlockGetCategoryData':
    if len(args) != 1:
        print('simlockGetCategoryData requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockGetCategoryData(eval(args[0]),))

elif cmd == 'simlockGetCategoryDataExt':
    if len(args) != 1:
        print('simlockGetCategoryDataExt requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockGetCategoryDataExt(eval(args[0]),))

elif cmd == 'simlockSerializeDataConfigurations':
    if len(args) != 1:
        print('simlockSerializeDataConfigurations requires 1 args')
        sys.exit(1)
    pp.pprint(client.simlockSerializeDataConfigurations(eval(args[0]),))

elif cmd == 'simlockDeserializeDataConfigurations':
    if len(args) != 3:
        print('simlockDeserializeDataConfigurations requires 3 args')
        sys.exit(1)
    pp.pprint(client.simlockDeserializeDataConfigurations(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'setNvItem':
    if len(args) != 3:
        print('setNvItem requires 3 args')
        sys.exit(1)
    pp.pprint(client.setNvItem(args[0], args[1], eval(args[2]),))

elif cmd == 'WaitForProtocolState':
    if len(args) != 4:
        print('WaitForProtocolState requires 4 args')
        sys.exit(1)
    pp.pprint(client.WaitForProtocolState(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getLastError':
    if len(args) != 0:
        print('getLastError requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastError())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
