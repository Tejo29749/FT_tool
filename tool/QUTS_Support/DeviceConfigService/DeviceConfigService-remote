#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from DeviceConfigService import DeviceConfigService
from DeviceConfigService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ErrorType getLastError()')
    print('  i64 getDevice()')
    print('  ErrorCode initializeService()')
    print('  ErrorCode initializeServiceByProtocol(i64 diagProtocolHandle, i64 qmiProtocolHandle)')
    print('  ErrorCode initializeServiceWithOptions(DeviceConfigConnectionOptions connectionOptions)')
    print('  ErrorCode destroyService()')
    print('  DeviceConfigResp doXqcnOperation(DeviceConfigOptions deviceConfigOptions)')
    print('  string backupToXqcn(string serviceProgrammingCode, bool resetUponCompletion, i32 resetTimeout, string filterFileContents)')
    print('  ErrorCode restoreFromXqcn(string xqcnFileContents, string serviceProgrammingCode, bool allowEsnMismatch, bool resetUponCompletion, i32 resetTimeout, string filterFileContents)')
    print('  i64 pdcGetMbnMaxStorage(PdcMbnType mbnType)')
    print('  i64 pdcGetMbnStorageUsage(PdcMbnType mbnType)')
    print('  i64 pdcGetMbnCount(PdcMbnType mbnType)')
    print('   pdcGetMbnList(PdcMbnType mbnType)')
    print('  PdcMbnInfo pdcGetDefaultMbnInfo(PdcMbnType mbnType)')
    print('  string pdcGetMbnId(string mbnContent)')
    print('  ErrorCode pdcWriteMbn(PdcMbnType mbnType, string mbnContent)')
    print('  string pdcReadMbn(PdcMbnType mbnType, string mbnId, i32 subId)')
    print('  ErrorCode pdcRemoveMbn(PdcMbnType mbnType, string mbnId)')
    print('  string pdcGetActiveMbn(PdcMbnType mbnType, i32 subId, i32 slotId)')
    print('  string pdcGetPendingMbn(PdcMbnType mbnType, i32 subId, i32 slotId)')
    print('  PdcMbnResult pdcValidateMbn(PdcMbnType mbnType, string mbnId, i32 subId, string remotePath)')
    print('  ErrorCode pdcSelectMbn(PdcMbnType mbnType, string mbnId, i32 subId, i32 slotId)')
    print('  ErrorCode pdcActivateMbn(PdcMbnType mbnType, i32 subId, i32 slotId, i32 mode, i32 timeout)')
    print('  ErrorCode pdcDeactivateMbn(PdcMbnType mbnType, i32 subId)')
    print('  i32 pdcGetConfiguration(i32 slotId, PdcConfigurationType feature)')
    print('  ErrorCode pdcSetConfiguration(i32 slotId, PdcConfigurationType feature, i32 value)')
    print('  bool nvIsItemSupported(string nvItemNameOrId, i32 subscriptionId)')
    print('  NvData nvReadItem(string nvItemNameOrId, i32 subscriptionId, i8 index, NvReturns returnConfig)')
    print('  ErrorCode nvSetItem(string nvItemNameOrId, string valueList, i32 subscriptionId)')
    print('  ErrorCode nvSetOtpItem(string nvItemNameOrId, string valueList, i32 subscriptionId)')
    print('   nvGetAllItems()')
    print('  string nvGetItemDefinition(string nvItemNameOrId)')
    print('  bool efsHasAlternateFileSystem()')
    print('  ErrorCode efsCreateDirectory(string pathName, FileSystem efsSystem)')
    print('  ErrorCode efsRemoveDirectory(string pathName, FileSystem efsSystem)')
    print('  ErrorCode efsRemoveTree(string pathName, FileSystem efsSytem)')
    print('   efsGetDirectoryContents(string pathName, FileSystem efsSystem)')
    print('  ErrorCode efsPutFile(string pathName, string buffer, FileSystem efsSystem)')
    print('  string efsGetFile(string pathName, FileSystem efsSystem)')
    print('  ErrorCode efsDeleteFile(string pathName, FileSystem efsSystem)')
    print('  ErrorCode efsRename(string existingName, string newName, FileSystem efsSystem)')
    print('  bool efsPathExists(string pathName, FileSystem efsSystem)')
    print('  bool efsIsDirectory(string pathName, FileSystem efsSystem)')
    print('  bool efsIsFile(string pathName, FileSystem efsSystem)')
    print('  i64 efsGetFileSize(string pathName, FileSystem efsSystem)')
    print('  i64 efsGetAvailableSpace(FileSystem efsSystem)')
    print('  string efsGetFileCheckSum(string pathName, FileSystem efsSystem)')
    print('  EfsFileAttributes efsGetFileAttributes(string pathName, FileSystem efsSystem)')
    print('  bool efsIsReady()')
    print('  ErrorCode createGoldenCopy(string pathName, FileSystem efsSystem)')
    print('  ErrorCode createGoldenCopyV2(CreateGoldenCopyV2Options createGoldenCopyV2Options, FileSystem efsSystem)')
    print('  ErrorCode createCefsCopy(string cefsSavePath, FileSystem efsSystem)')
    print('  ErrorCode createFactoryEfsCopy(FileSystem efsSystem, FactoryEfsCopyOptions factoryEfsCopyOptions)')
    print('  string requestPrl(i32 subscriptionId, i8 index)')
    print('  string backupPrl()')
    print('  ErrorCode restorePrl(string xqcnFileContents)')
    print('  ErrorCode sendPrl(i32 subscriptionId, i8 index, string prlFileContents)')
    print('  ErrorCode forceEfsSync(string pathName, FileSystem efsSystem)')
    print('  i32 getEsn()')
    print('  ErrorCode setEsn(i32 esn)')
    print('  string getImei(i32 subscriptionId)')
    print('  ErrorCode setImei(string imei, i32 subscriptionId)')
    print('  i64 getMeid(i32 subscriptionId)')
    print('  ErrorCode setMeid(i64 meid, i32 subscriptionId)')
    print('  bool checkSpc(string spc)')
    print('  bool provisionSpc(string currentSpc, string newSpc)')
    print('  string efsReadFromModemLog()')
    print('  ErrorCode configureService(DeviceConfigOptions deviceConfigOptions)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = DeviceConfigService.Client(protocol)
transport.open()

if cmd == 'getLastError':
    if len(args) != 0:
        print('getLastError requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastError())

elif cmd == 'getDevice':
    if len(args) != 0:
        print('getDevice requires 0 args')
        sys.exit(1)
    pp.pprint(client.getDevice())

elif cmd == 'initializeService':
    if len(args) != 0:
        print('initializeService requires 0 args')
        sys.exit(1)
    pp.pprint(client.initializeService())

elif cmd == 'initializeServiceByProtocol':
    if len(args) != 2:
        print('initializeServiceByProtocol requires 2 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceByProtocol(eval(args[0]), eval(args[1]),))

elif cmd == 'initializeServiceWithOptions':
    if len(args) != 1:
        print('initializeServiceWithOptions requires 1 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceWithOptions(eval(args[0]),))

elif cmd == 'destroyService':
    if len(args) != 0:
        print('destroyService requires 0 args')
        sys.exit(1)
    pp.pprint(client.destroyService())

elif cmd == 'doXqcnOperation':
    if len(args) != 1:
        print('doXqcnOperation requires 1 args')
        sys.exit(1)
    pp.pprint(client.doXqcnOperation(eval(args[0]),))

elif cmd == 'backupToXqcn':
    if len(args) != 4:
        print('backupToXqcn requires 4 args')
        sys.exit(1)
    pp.pprint(client.backupToXqcn(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'restoreFromXqcn':
    if len(args) != 6:
        print('restoreFromXqcn requires 6 args')
        sys.exit(1)
    pp.pprint(client.restoreFromXqcn(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'pdcGetMbnMaxStorage':
    if len(args) != 1:
        print('pdcGetMbnMaxStorage requires 1 args')
        sys.exit(1)
    pp.pprint(client.pdcGetMbnMaxStorage(eval(args[0]),))

elif cmd == 'pdcGetMbnStorageUsage':
    if len(args) != 1:
        print('pdcGetMbnStorageUsage requires 1 args')
        sys.exit(1)
    pp.pprint(client.pdcGetMbnStorageUsage(eval(args[0]),))

elif cmd == 'pdcGetMbnCount':
    if len(args) != 1:
        print('pdcGetMbnCount requires 1 args')
        sys.exit(1)
    pp.pprint(client.pdcGetMbnCount(eval(args[0]),))

elif cmd == 'pdcGetMbnList':
    if len(args) != 1:
        print('pdcGetMbnList requires 1 args')
        sys.exit(1)
    pp.pprint(client.pdcGetMbnList(eval(args[0]),))

elif cmd == 'pdcGetDefaultMbnInfo':
    if len(args) != 1:
        print('pdcGetDefaultMbnInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.pdcGetDefaultMbnInfo(eval(args[0]),))

elif cmd == 'pdcGetMbnId':
    if len(args) != 1:
        print('pdcGetMbnId requires 1 args')
        sys.exit(1)
    pp.pprint(client.pdcGetMbnId(args[0],))

elif cmd == 'pdcWriteMbn':
    if len(args) != 2:
        print('pdcWriteMbn requires 2 args')
        sys.exit(1)
    pp.pprint(client.pdcWriteMbn(eval(args[0]), args[1],))

elif cmd == 'pdcReadMbn':
    if len(args) != 3:
        print('pdcReadMbn requires 3 args')
        sys.exit(1)
    pp.pprint(client.pdcReadMbn(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'pdcRemoveMbn':
    if len(args) != 2:
        print('pdcRemoveMbn requires 2 args')
        sys.exit(1)
    pp.pprint(client.pdcRemoveMbn(eval(args[0]), args[1],))

elif cmd == 'pdcGetActiveMbn':
    if len(args) != 3:
        print('pdcGetActiveMbn requires 3 args')
        sys.exit(1)
    pp.pprint(client.pdcGetActiveMbn(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pdcGetPendingMbn':
    if len(args) != 3:
        print('pdcGetPendingMbn requires 3 args')
        sys.exit(1)
    pp.pprint(client.pdcGetPendingMbn(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pdcValidateMbn':
    if len(args) != 4:
        print('pdcValidateMbn requires 4 args')
        sys.exit(1)
    pp.pprint(client.pdcValidateMbn(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'pdcSelectMbn':
    if len(args) != 4:
        print('pdcSelectMbn requires 4 args')
        sys.exit(1)
    pp.pprint(client.pdcSelectMbn(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'pdcActivateMbn':
    if len(args) != 5:
        print('pdcActivateMbn requires 5 args')
        sys.exit(1)
    pp.pprint(client.pdcActivateMbn(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'pdcDeactivateMbn':
    if len(args) != 2:
        print('pdcDeactivateMbn requires 2 args')
        sys.exit(1)
    pp.pprint(client.pdcDeactivateMbn(eval(args[0]), eval(args[1]),))

elif cmd == 'pdcGetConfiguration':
    if len(args) != 2:
        print('pdcGetConfiguration requires 2 args')
        sys.exit(1)
    pp.pprint(client.pdcGetConfiguration(eval(args[0]), eval(args[1]),))

elif cmd == 'pdcSetConfiguration':
    if len(args) != 3:
        print('pdcSetConfiguration requires 3 args')
        sys.exit(1)
    pp.pprint(client.pdcSetConfiguration(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'nvIsItemSupported':
    if len(args) != 2:
        print('nvIsItemSupported requires 2 args')
        sys.exit(1)
    pp.pprint(client.nvIsItemSupported(args[0], eval(args[1]),))

elif cmd == 'nvReadItem':
    if len(args) != 4:
        print('nvReadItem requires 4 args')
        sys.exit(1)
    pp.pprint(client.nvReadItem(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'nvSetItem':
    if len(args) != 3:
        print('nvSetItem requires 3 args')
        sys.exit(1)
    pp.pprint(client.nvSetItem(args[0], args[1], eval(args[2]),))

elif cmd == 'nvSetOtpItem':
    if len(args) != 3:
        print('nvSetOtpItem requires 3 args')
        sys.exit(1)
    pp.pprint(client.nvSetOtpItem(args[0], args[1], eval(args[2]),))

elif cmd == 'nvGetAllItems':
    if len(args) != 0:
        print('nvGetAllItems requires 0 args')
        sys.exit(1)
    pp.pprint(client.nvGetAllItems())

elif cmd == 'nvGetItemDefinition':
    if len(args) != 1:
        print('nvGetItemDefinition requires 1 args')
        sys.exit(1)
    pp.pprint(client.nvGetItemDefinition(args[0],))

elif cmd == 'efsHasAlternateFileSystem':
    if len(args) != 0:
        print('efsHasAlternateFileSystem requires 0 args')
        sys.exit(1)
    pp.pprint(client.efsHasAlternateFileSystem())

elif cmd == 'efsCreateDirectory':
    if len(args) != 2:
        print('efsCreateDirectory requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsCreateDirectory(args[0], eval(args[1]),))

elif cmd == 'efsRemoveDirectory':
    if len(args) != 2:
        print('efsRemoveDirectory requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsRemoveDirectory(args[0], eval(args[1]),))

elif cmd == 'efsRemoveTree':
    if len(args) != 2:
        print('efsRemoveTree requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsRemoveTree(args[0], eval(args[1]),))

elif cmd == 'efsGetDirectoryContents':
    if len(args) != 2:
        print('efsGetDirectoryContents requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsGetDirectoryContents(args[0], eval(args[1]),))

elif cmd == 'efsPutFile':
    if len(args) != 3:
        print('efsPutFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.efsPutFile(args[0], args[1], eval(args[2]),))

elif cmd == 'efsGetFile':
    if len(args) != 2:
        print('efsGetFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsGetFile(args[0], eval(args[1]),))

elif cmd == 'efsDeleteFile':
    if len(args) != 2:
        print('efsDeleteFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsDeleteFile(args[0], eval(args[1]),))

elif cmd == 'efsRename':
    if len(args) != 3:
        print('efsRename requires 3 args')
        sys.exit(1)
    pp.pprint(client.efsRename(args[0], args[1], eval(args[2]),))

elif cmd == 'efsPathExists':
    if len(args) != 2:
        print('efsPathExists requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsPathExists(args[0], eval(args[1]),))

elif cmd == 'efsIsDirectory':
    if len(args) != 2:
        print('efsIsDirectory requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsIsDirectory(args[0], eval(args[1]),))

elif cmd == 'efsIsFile':
    if len(args) != 2:
        print('efsIsFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsIsFile(args[0], eval(args[1]),))

elif cmd == 'efsGetFileSize':
    if len(args) != 2:
        print('efsGetFileSize requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsGetFileSize(args[0], eval(args[1]),))

elif cmd == 'efsGetAvailableSpace':
    if len(args) != 1:
        print('efsGetAvailableSpace requires 1 args')
        sys.exit(1)
    pp.pprint(client.efsGetAvailableSpace(eval(args[0]),))

elif cmd == 'efsGetFileCheckSum':
    if len(args) != 2:
        print('efsGetFileCheckSum requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsGetFileCheckSum(args[0], eval(args[1]),))

elif cmd == 'efsGetFileAttributes':
    if len(args) != 2:
        print('efsGetFileAttributes requires 2 args')
        sys.exit(1)
    pp.pprint(client.efsGetFileAttributes(args[0], eval(args[1]),))

elif cmd == 'efsIsReady':
    if len(args) != 0:
        print('efsIsReady requires 0 args')
        sys.exit(1)
    pp.pprint(client.efsIsReady())

elif cmd == 'createGoldenCopy':
    if len(args) != 2:
        print('createGoldenCopy requires 2 args')
        sys.exit(1)
    pp.pprint(client.createGoldenCopy(args[0], eval(args[1]),))

elif cmd == 'createGoldenCopyV2':
    if len(args) != 2:
        print('createGoldenCopyV2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.createGoldenCopyV2(eval(args[0]), eval(args[1]),))

elif cmd == 'createCefsCopy':
    if len(args) != 2:
        print('createCefsCopy requires 2 args')
        sys.exit(1)
    pp.pprint(client.createCefsCopy(args[0], eval(args[1]),))

elif cmd == 'createFactoryEfsCopy':
    if len(args) != 2:
        print('createFactoryEfsCopy requires 2 args')
        sys.exit(1)
    pp.pprint(client.createFactoryEfsCopy(eval(args[0]), eval(args[1]),))

elif cmd == 'requestPrl':
    if len(args) != 2:
        print('requestPrl requires 2 args')
        sys.exit(1)
    pp.pprint(client.requestPrl(eval(args[0]), eval(args[1]),))

elif cmd == 'backupPrl':
    if len(args) != 0:
        print('backupPrl requires 0 args')
        sys.exit(1)
    pp.pprint(client.backupPrl())

elif cmd == 'restorePrl':
    if len(args) != 1:
        print('restorePrl requires 1 args')
        sys.exit(1)
    pp.pprint(client.restorePrl(args[0],))

elif cmd == 'sendPrl':
    if len(args) != 3:
        print('sendPrl requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendPrl(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'forceEfsSync':
    if len(args) != 2:
        print('forceEfsSync requires 2 args')
        sys.exit(1)
    pp.pprint(client.forceEfsSync(args[0], eval(args[1]),))

elif cmd == 'getEsn':
    if len(args) != 0:
        print('getEsn requires 0 args')
        sys.exit(1)
    pp.pprint(client.getEsn())

elif cmd == 'setEsn':
    if len(args) != 1:
        print('setEsn requires 1 args')
        sys.exit(1)
    pp.pprint(client.setEsn(eval(args[0]),))

elif cmd == 'getImei':
    if len(args) != 1:
        print('getImei requires 1 args')
        sys.exit(1)
    pp.pprint(client.getImei(eval(args[0]),))

elif cmd == 'setImei':
    if len(args) != 2:
        print('setImei requires 2 args')
        sys.exit(1)
    pp.pprint(client.setImei(args[0], eval(args[1]),))

elif cmd == 'getMeid':
    if len(args) != 1:
        print('getMeid requires 1 args')
        sys.exit(1)
    pp.pprint(client.getMeid(eval(args[0]),))

elif cmd == 'setMeid':
    if len(args) != 2:
        print('setMeid requires 2 args')
        sys.exit(1)
    pp.pprint(client.setMeid(eval(args[0]), eval(args[1]),))

elif cmd == 'checkSpc':
    if len(args) != 1:
        print('checkSpc requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkSpc(args[0],))

elif cmd == 'provisionSpc':
    if len(args) != 2:
        print('provisionSpc requires 2 args')
        sys.exit(1)
    pp.pprint(client.provisionSpc(args[0], args[1],))

elif cmd == 'efsReadFromModemLog':
    if len(args) != 0:
        print('efsReadFromModemLog requires 0 args')
        sys.exit(1)
    pp.pprint(client.efsReadFromModemLog())

elif cmd == 'configureService':
    if len(args) != 1:
        print('configureService requires 1 args')
        sys.exit(1)
    pp.pprint(client.configureService(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
