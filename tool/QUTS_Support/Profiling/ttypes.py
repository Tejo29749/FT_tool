#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes

from thrift.transport import TTransport
all_structs = []


class SUBSYSTEM(object):
    ADSP = 0
    SDSP = 2
    CDSP = 3
    CDSP1 = 4
    GDSP0 = 5
    GDSP1 = 6

    _VALUES_TO_NAMES = {
        0: "ADSP",
        2: "SDSP",
        3: "CDSP",
        4: "CDSP1",
        5: "GDSP0",
        6: "GDSP1",
    }

    _NAMES_TO_VALUES = {
        "ADSP": 0,
        "SDSP": 2,
        "CDSP": 3,
        "CDSP1": 4,
        "GDSP0": 5,
        "GDSP1": 6,
    }


class METRIC_GROUP(object):
    CORE = 0
    DDR = 1
    L1 = 2
    STALLS = 3
    INS_MIX = 4
    L2 = 5
    HVX_CORE = 6
    HVX_L2 = 7
    HVX_STALLS = 8
    HVX_INS = 9
    VTCM = 10
    CLOCK = 11
    HEAP = 12
    BLC = 13
    HMT = 14
    HMX = 15
    UDMA = 16
    OVERALL = 17
    BWMON = 18

    _VALUES_TO_NAMES = {
        0: "CORE",
        1: "DDR",
        2: "L1",
        3: "STALLS",
        4: "INS_MIX",
        5: "L2",
        6: "HVX_CORE",
        7: "HVX_L2",
        8: "HVX_STALLS",
        9: "HVX_INS",
        10: "VTCM",
        11: "CLOCK",
        12: "HEAP",
        13: "BLC",
        14: "HMT",
        15: "HMX",
        16: "UDMA",
        17: "OVERALL",
        18: "BWMON",
    }

    _NAMES_TO_VALUES = {
        "CORE": 0,
        "DDR": 1,
        "L1": 2,
        "STALLS": 3,
        "INS_MIX": 4,
        "L2": 5,
        "HVX_CORE": 6,
        "HVX_L2": 7,
        "HVX_STALLS": 8,
        "HVX_INS": 9,
        "VTCM": 10,
        "CLOCK": 11,
        "HEAP": 12,
        "BLC": 13,
        "HMT": 14,
        "HMX": 15,
        "UDMA": 16,
        "OVERALL": 17,
        "BWMON": 18,
    }


class ProfilingDataType(object):
    SYSMON_PARSER = 0

    _VALUES_TO_NAMES = {
        0: "SYSMON_PARSER",
    }

    _NAMES_TO_VALUES = {
        "SYSMON_PARSER": 0,
    }


class ParserOptions(object):
    """
    Attributes:
     - Version
     - LiveStreamFlag
     - FileExtension
     - OutDirPath
     - enableFileReport

    """


    def __init__(self, Version=None, LiveStreamFlag=None, FileExtension=None, OutDirPath=None, enableFileReport=None,):
        self.Version = Version
        self.LiveStreamFlag = LiveStreamFlag
        self.FileExtension = FileExtension
        self.OutDirPath = OutDirPath
        self.enableFileReport = enableFileReport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.LiveStreamFlag = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.FileExtension = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.OutDirPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.enableFileReport = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ParserOptions')
        if self.Version is not None:
            oprot.writeFieldBegin('Version', TType.I32, 1)
            oprot.writeI32(self.Version)
            oprot.writeFieldEnd()
        if self.LiveStreamFlag is not None:
            oprot.writeFieldBegin('LiveStreamFlag', TType.BYTE, 2)
            oprot.writeByte(self.LiveStreamFlag)
            oprot.writeFieldEnd()
        if self.FileExtension is not None:
            oprot.writeFieldBegin('FileExtension', TType.STRING, 3)
            oprot.writeString(self.FileExtension.encode('utf-8') if sys.version_info[0] == 2 else self.FileExtension)
            oprot.writeFieldEnd()
        if self.OutDirPath is not None:
            oprot.writeFieldBegin('OutDirPath', TType.STRING, 4)
            oprot.writeString(self.OutDirPath.encode('utf-8') if sys.version_info[0] == 2 else self.OutDirPath)
            oprot.writeFieldEnd()
        if self.enableFileReport is not None:
            oprot.writeFieldBegin('enableFileReport', TType.BOOL, 5)
            oprot.writeBool(self.enableFileReport)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SysMonMetrics(object):
    """
    Attributes:
     - metricID
     - Value

    """


    def __init__(self, metricID=None, Value=None,):
        self.metricID = metricID
        self.Value = Value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.metricID = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.Value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SysMonMetrics')
        if self.metricID is not None:
            oprot.writeFieldBegin('metricID', TType.I64, 1)
            oprot.writeI64(self.metricID)
            oprot.writeFieldEnd()
        if self.Value is not None:
            oprot.writeFieldBegin('Value', TType.DOUBLE, 2)
            oprot.writeDouble(self.Value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class profile_packet_ext(object):
    """
    Attributes:
     - Q6Core
     - packetIdx
     - sampling_period
     - currTime
     - systick_diff
     - measuredTime
     - totalMetrics
     - sysmon_metrics
     - packetType
     - uimageFlag

    """


    def __init__(self, Q6Core=None, packetIdx=None, sampling_period=None, currTime=None, systick_diff=None, measuredTime=None, totalMetrics=None, sysmon_metrics=None, packetType=None, uimageFlag=None,):
        self.Q6Core = Q6Core
        self.packetIdx = packetIdx
        self.sampling_period = sampling_period
        self.currTime = currTime
        self.systick_diff = systick_diff
        self.measuredTime = measuredTime
        self.totalMetrics = totalMetrics
        self.sysmon_metrics = sysmon_metrics
        self.packetType = packetType
        self.uimageFlag = uimageFlag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Q6Core = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.packetIdx = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sampling_period = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.currTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.systick_diff = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.measuredTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.totalMetrics = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.sysmon_metrics = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = SysMonMetrics()
                        _elem5.read(iprot)
                        self.sysmon_metrics.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.packetType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.uimageFlag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('profile_packet_ext')
        if self.Q6Core is not None:
            oprot.writeFieldBegin('Q6Core', TType.I32, 1)
            oprot.writeI32(self.Q6Core)
            oprot.writeFieldEnd()
        if self.packetIdx is not None:
            oprot.writeFieldBegin('packetIdx', TType.I64, 2)
            oprot.writeI64(self.packetIdx)
            oprot.writeFieldEnd()
        if self.sampling_period is not None:
            oprot.writeFieldBegin('sampling_period', TType.I64, 3)
            oprot.writeI64(self.sampling_period)
            oprot.writeFieldEnd()
        if self.currTime is not None:
            oprot.writeFieldBegin('currTime', TType.DOUBLE, 4)
            oprot.writeDouble(self.currTime)
            oprot.writeFieldEnd()
        if self.systick_diff is not None:
            oprot.writeFieldBegin('systick_diff', TType.I64, 5)
            oprot.writeI64(self.systick_diff)
            oprot.writeFieldEnd()
        if self.measuredTime is not None:
            oprot.writeFieldBegin('measuredTime', TType.DOUBLE, 6)
            oprot.writeDouble(self.measuredTime)
            oprot.writeFieldEnd()
        if self.totalMetrics is not None:
            oprot.writeFieldBegin('totalMetrics', TType.I64, 7)
            oprot.writeI64(self.totalMetrics)
            oprot.writeFieldEnd()
        if self.sysmon_metrics is not None:
            oprot.writeFieldBegin('sysmon_metrics', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.sysmon_metrics))
            for iter6 in self.sysmon_metrics:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.packetType is not None:
            oprot.writeFieldBegin('packetType', TType.I32, 9)
            oprot.writeI32(self.packetType)
            oprot.writeFieldEnd()
        if self.uimageFlag is not None:
            oprot.writeFieldBegin('uimageFlag', TType.I32, 10)
            oprot.writeI32(self.uimageFlag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sysMonAvgMetric(object):
    """
    Attributes:
     - metricID
     - avgValue
     - maxValue

    """


    def __init__(self, metricID=None, avgValue=None, maxValue=None,):
        self.metricID = metricID
        self.avgValue = avgValue
        self.maxValue = maxValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.metricID = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.avgValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.maxValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sysMonAvgMetric')
        if self.metricID is not None:
            oprot.writeFieldBegin('metricID', TType.I64, 1)
            oprot.writeI64(self.metricID)
            oprot.writeFieldEnd()
        if self.avgValue is not None:
            oprot.writeFieldBegin('avgValue', TType.DOUBLE, 2)
            oprot.writeDouble(self.avgValue)
            oprot.writeFieldEnd()
        if self.maxValue is not None:
            oprot.writeFieldBegin('maxValue', TType.DOUBLE, 3)
            oprot.writeDouble(self.maxValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class avg_profile_packet(object):
    """
    Attributes:
     - totalPackets
     - Q6Core
     - startTime
     - endTime
     - totalTimeMs
     - activeTimeMs
     - idleTimeMs
     - powerCollapseTimeMs
     - totalMetrics
     - sysMonAvgMetrics

    """


    def __init__(self, totalPackets=None, Q6Core=None, startTime=None, endTime=None, totalTimeMs=None, activeTimeMs=None, idleTimeMs=None, powerCollapseTimeMs=None, totalMetrics=None, sysMonAvgMetrics=None,):
        self.totalPackets = totalPackets
        self.Q6Core = Q6Core
        self.startTime = startTime
        self.endTime = endTime
        self.totalTimeMs = totalTimeMs
        self.activeTimeMs = activeTimeMs
        self.idleTimeMs = idleTimeMs
        self.powerCollapseTimeMs = powerCollapseTimeMs
        self.totalMetrics = totalMetrics
        self.sysMonAvgMetrics = sysMonAvgMetrics

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.totalPackets = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Q6Core = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.startTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.endTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.totalTimeMs = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.activeTimeMs = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.idleTimeMs = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.powerCollapseTimeMs = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.totalMetrics = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.sysMonAvgMetrics = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = sysMonAvgMetric()
                        _elem12.read(iprot)
                        self.sysMonAvgMetrics.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('avg_profile_packet')
        if self.totalPackets is not None:
            oprot.writeFieldBegin('totalPackets', TType.I64, 1)
            oprot.writeI64(self.totalPackets)
            oprot.writeFieldEnd()
        if self.Q6Core is not None:
            oprot.writeFieldBegin('Q6Core', TType.I32, 2)
            oprot.writeI32(self.Q6Core)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.DOUBLE, 3)
            oprot.writeDouble(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.DOUBLE, 4)
            oprot.writeDouble(self.endTime)
            oprot.writeFieldEnd()
        if self.totalTimeMs is not None:
            oprot.writeFieldBegin('totalTimeMs', TType.DOUBLE, 5)
            oprot.writeDouble(self.totalTimeMs)
            oprot.writeFieldEnd()
        if self.activeTimeMs is not None:
            oprot.writeFieldBegin('activeTimeMs', TType.DOUBLE, 6)
            oprot.writeDouble(self.activeTimeMs)
            oprot.writeFieldEnd()
        if self.idleTimeMs is not None:
            oprot.writeFieldBegin('idleTimeMs', TType.DOUBLE, 7)
            oprot.writeDouble(self.idleTimeMs)
            oprot.writeFieldEnd()
        if self.powerCollapseTimeMs is not None:
            oprot.writeFieldBegin('powerCollapseTimeMs', TType.DOUBLE, 8)
            oprot.writeDouble(self.powerCollapseTimeMs)
            oprot.writeFieldEnd()
        if self.totalMetrics is not None:
            oprot.writeFieldBegin('totalMetrics', TType.I64, 9)
            oprot.writeI64(self.totalMetrics)
            oprot.writeFieldEnd()
        if self.sysMonAvgMetrics is not None:
            oprot.writeFieldBegin('sysMonAvgMetrics', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.sysMonAvgMetrics))
            for iter13 in self.sysMonAvgMetrics:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SysmonParser(object):
    """
    Attributes:
     - subsystem
     - metricGroup
     - binfile
     - parserOptions
     - binaryData

    """


    def __init__(self, subsystem=None, metricGroup=None, binfile=None, parserOptions=None, binaryData=None,):
        self.subsystem = subsystem
        self.metricGroup = metricGroup
        self.binfile = binfile
        self.parserOptions = parserOptions
        self.binaryData = binaryData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.subsystem = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.metricGroup = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.binfile = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.parserOptions = ParserOptions()
                    self.parserOptions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.binaryData = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SysmonParser')
        if self.subsystem is not None:
            oprot.writeFieldBegin('subsystem', TType.I32, 1)
            oprot.writeI32(self.subsystem)
            oprot.writeFieldEnd()
        if self.metricGroup is not None:
            oprot.writeFieldBegin('metricGroup', TType.I32, 2)
            oprot.writeI32(self.metricGroup)
            oprot.writeFieldEnd()
        if self.binfile is not None:
            oprot.writeFieldBegin('binfile', TType.STRING, 3)
            oprot.writeString(self.binfile.encode('utf-8') if sys.version_info[0] == 2 else self.binfile)
            oprot.writeFieldEnd()
        if self.parserOptions is not None:
            oprot.writeFieldBegin('parserOptions', TType.STRUCT, 4)
            self.parserOptions.write(oprot)
            oprot.writeFieldEnd()
        if self.binaryData is not None:
            oprot.writeFieldBegin('binaryData', TType.STRING, 5)
            oprot.writeString(self.binaryData.encode('utf-8') if sys.version_info[0] == 2 else self.binaryData)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingDataFilter(object):
    """
    Attributes:
     - profilingDataType
     - sysmonFilter

    """


    def __init__(self, profilingDataType=None, sysmonFilter=None,):
        self.profilingDataType = profilingDataType
        self.sysmonFilter = sysmonFilter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.profilingDataType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sysmonFilter = SysmonParser()
                    self.sysmonFilter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingDataFilter')
        if self.profilingDataType is not None:
            oprot.writeFieldBegin('profilingDataType', TType.I32, 1)
            oprot.writeI32(self.profilingDataType)
            oprot.writeFieldEnd()
        if self.sysmonFilter is not None:
            oprot.writeFieldBegin('sysmonFilter', TType.STRUCT, 2)
            self.sysmonFilter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SysmonData(object):
    """
    Attributes:
     - subsystem
     - profilePackets
     - avgProfilePacket

    """


    def __init__(self, subsystem=None, profilePackets=None, avgProfilePacket=None,):
        self.subsystem = subsystem
        self.profilePackets = profilePackets
        self.avgProfilePacket = avgProfilePacket

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.subsystem = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.profilePackets = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = profile_packet_ext()
                        _elem19.read(iprot)
                        self.profilePackets.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.avgProfilePacket = avg_profile_packet()
                    self.avgProfilePacket.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SysmonData')
        if self.subsystem is not None:
            oprot.writeFieldBegin('subsystem', TType.I32, 1)
            oprot.writeI32(self.subsystem)
            oprot.writeFieldEnd()
        if self.profilePackets is not None:
            oprot.writeFieldBegin('profilePackets', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.profilePackets))
            for iter20 in self.profilePackets:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.avgProfilePacket is not None:
            oprot.writeFieldBegin('avgProfilePacket', TType.STRUCT, 3)
            self.avgProfilePacket.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilingData(object):
    """
    Attributes:
     - sysmonData

    """


    def __init__(self, sysmonData=None,):
        self.sysmonData = sysmonData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sysmonData = SysmonData()
                    self.sysmonData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilingData')
        if self.sysmonData is not None:
            oprot.writeFieldBegin('sysmonData', TType.STRUCT, 1)
            self.sysmonData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ErrorInfo(object):
    """
    Attributes:
     - errorCode
     - errorString

    """


    def __init__(self, errorCode=None, errorString=None,):
        self.errorCode = errorCode
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ErrorInfo')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 2)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.errorCode is None:
            raise TProtocolException(message='Required field errorCode is unset!')
        if self.errorString is None:
            raise TProtocolException(message='Required field errorString is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilerParsingOptions(object):
    """
    Attributes:
     - binaryPayload
     - capabilityName

    """


    def __init__(self, binaryPayload=None, capabilityName=None,):
        self.binaryPayload = binaryPayload
        self.capabilityName = capabilityName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.binaryPayload = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilerParsingOptions')
        if self.binaryPayload is not None:
            oprot.writeFieldBegin('binaryPayload', TType.STRING, 1)
            oprot.writeString(self.binaryPayload.encode('utf-8') if sys.version_info[0] == 2 else self.binaryPayload)
            oprot.writeFieldEnd()
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 2)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilerParsedResult(object):
    """
    Attributes:
     - parsedTextJson
     - errType

    """


    def __init__(self, parsedTextJson=None, errType=None,):
        self.parsedTextJson = parsedTextJson
        self.errType = errType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parsedTextJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.errType = ErrorInfo()
                    self.errType.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilerParsedResult')
        if self.parsedTextJson is not None:
            oprot.writeFieldBegin('parsedTextJson', TType.STRING, 1)
            oprot.writeString(self.parsedTextJson.encode('utf-8') if sys.version_info[0] == 2 else self.parsedTextJson)
            oprot.writeFieldEnd()
        if self.errType is not None:
            oprot.writeFieldBegin('errType', TType.STRUCT, 2)
            self.errType.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilerSupportedIds(object):
    """
    Attributes:
     - capabilityName
     - metricIdList
     - errType

    """


    def __init__(self, capabilityName=None, metricIdList=None, errType=None,):
        self.capabilityName = capabilityName
        self.metricIdList = metricIdList
        self.errType = errType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.capabilityName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.metricIdList = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readI32()
                        self.metricIdList.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.errType = ErrorInfo()
                    self.errType.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilerSupportedIds')
        if self.capabilityName is not None:
            oprot.writeFieldBegin('capabilityName', TType.STRING, 1)
            oprot.writeString(self.capabilityName.encode('utf-8') if sys.version_info[0] == 2 else self.capabilityName)
            oprot.writeFieldEnd()
        if self.metricIdList is not None:
            oprot.writeFieldBegin('metricIdList', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.metricIdList))
            for iter27 in self.metricIdList:
                oprot.writeI32(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.errType is not None:
            oprot.writeFieldBegin('errType', TType.STRUCT, 3)
            self.errType.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ParserOptions)
ParserOptions.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Version', None, None, ),  # 1
    (2, TType.BYTE, 'LiveStreamFlag', None, None, ),  # 2
    (3, TType.STRING, 'FileExtension', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'OutDirPath', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'enableFileReport', None, None, ),  # 5
)
all_structs.append(SysMonMetrics)
SysMonMetrics.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'metricID', None, None, ),  # 1
    (2, TType.DOUBLE, 'Value', None, None, ),  # 2
)
all_structs.append(profile_packet_ext)
profile_packet_ext.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Q6Core', None, None, ),  # 1
    (2, TType.I64, 'packetIdx', None, None, ),  # 2
    (3, TType.I64, 'sampling_period', None, None, ),  # 3
    (4, TType.DOUBLE, 'currTime', None, None, ),  # 4
    (5, TType.I64, 'systick_diff', None, None, ),  # 5
    (6, TType.DOUBLE, 'measuredTime', None, None, ),  # 6
    (7, TType.I64, 'totalMetrics', None, None, ),  # 7
    (8, TType.LIST, 'sysmon_metrics', (TType.STRUCT, [SysMonMetrics, None], False), None, ),  # 8
    (9, TType.I32, 'packetType', None, None, ),  # 9
    (10, TType.I32, 'uimageFlag', None, None, ),  # 10
)
all_structs.append(sysMonAvgMetric)
sysMonAvgMetric.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'metricID', None, None, ),  # 1
    (2, TType.DOUBLE, 'avgValue', None, None, ),  # 2
    (3, TType.DOUBLE, 'maxValue', None, None, ),  # 3
)
all_structs.append(avg_profile_packet)
avg_profile_packet.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'totalPackets', None, None, ),  # 1
    (2, TType.I32, 'Q6Core', None, None, ),  # 2
    (3, TType.DOUBLE, 'startTime', None, None, ),  # 3
    (4, TType.DOUBLE, 'endTime', None, None, ),  # 4
    (5, TType.DOUBLE, 'totalTimeMs', None, None, ),  # 5
    (6, TType.DOUBLE, 'activeTimeMs', None, None, ),  # 6
    (7, TType.DOUBLE, 'idleTimeMs', None, None, ),  # 7
    (8, TType.DOUBLE, 'powerCollapseTimeMs', None, None, ),  # 8
    (9, TType.I64, 'totalMetrics', None, None, ),  # 9
    (10, TType.LIST, 'sysMonAvgMetrics', (TType.STRUCT, [sysMonAvgMetric, None], False), None, ),  # 10
)
all_structs.append(SysmonParser)
SysmonParser.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'subsystem', None, None, ),  # 1
    (2, TType.I32, 'metricGroup', None, None, ),  # 2
    (3, TType.STRING, 'binfile', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'parserOptions', [ParserOptions, None], None, ),  # 4
    (5, TType.STRING, 'binaryData', 'UTF8', None, ),  # 5
)
all_structs.append(ProfilingDataFilter)
ProfilingDataFilter.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'profilingDataType', None, None, ),  # 1
    (2, TType.STRUCT, 'sysmonFilter', [SysmonParser, None], None, ),  # 2
)
all_structs.append(SysmonData)
SysmonData.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'subsystem', None, None, ),  # 1
    (2, TType.LIST, 'profilePackets', (TType.STRUCT, [profile_packet_ext, None], False), None, ),  # 2
    (3, TType.STRUCT, 'avgProfilePacket', [avg_profile_packet, None], None, ),  # 3
)
all_structs.append(ProfilingData)
ProfilingData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sysmonData', [SysmonData, None], None, ),  # 1
)
all_structs.append(ErrorInfo)
ErrorInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'errorString', 'UTF8', None, ),  # 2
)
all_structs.append(ProfilerParsingOptions)
ProfilerParsingOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'binaryPayload', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 2
)
all_structs.append(ProfilerParsedResult)
ProfilerParsedResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parsedTextJson', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'errType', [ErrorInfo, None], None, ),  # 2
)
all_structs.append(ProfilerSupportedIds)
ProfilerSupportedIds.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'capabilityName', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'metricIdList', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRUCT, 'errType', [ErrorInfo, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs
