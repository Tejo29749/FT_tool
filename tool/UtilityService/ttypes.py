#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes
import ImageManagementService.ttypes
import DeviceConfigService.ttypes
import Profiling.ttypes

from thrift.transport import TTransport
all_structs = []


class NvParserResult(object):
    """
    Attributes:
     - nvId
     - data

    """


    def __init__(self, nvId=None, data=None,):
        self.nvId = nvId
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.nvId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.data = DeviceConfigService.ttypes.NvData()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NvParserResult')
        if self.nvId is not None:
            oprot.writeFieldBegin('nvId', TType.I32, 1)
            oprot.writeI32(self.nvId)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 2)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagUserDllTypeToPacketIdMap(object):
    """
    Attributes:
     - protocolToEntityIdMap

    """


    def __init__(self, protocolToEntityIdMap=None,):
        self.protocolToEntityIdMap = protocolToEntityIdMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.protocolToEntityIdMap = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI32()
                        _val6 = []
                        (_etype10, _size7) = iprot.readListBegin()
                        for _i11 in range(_size7):
                            _elem12 = iprot.readI32()
                            _val6.append(_elem12)
                        iprot.readListEnd()
                        self.protocolToEntityIdMap[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagUserDllTypeToPacketIdMap')
        if self.protocolToEntityIdMap is not None:
            oprot.writeFieldBegin('protocolToEntityIdMap', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.protocolToEntityIdMap))
            for kiter13, viter14 in self.protocolToEntityIdMap.items():
                oprot.writeI32(kiter13)
                oprot.writeListBegin(TType.I32, len(viter14))
                for iter15 in viter14:
                    oprot.writeI32(iter15)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserDllProtocolToPacketIdMap(object):
    """
    Attributes:
     - diagTypeIdMap
     - profSupportedIds

    """


    def __init__(self, diagTypeIdMap=None, profSupportedIds=None,):
        self.diagTypeIdMap = diagTypeIdMap
        self.profSupportedIds = profSupportedIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.diagTypeIdMap = DiagUserDllTypeToPacketIdMap()
                    self.diagTypeIdMap.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.profSupportedIds = Profiling.ttypes.ProfilerSupportedIds()
                    self.profSupportedIds.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserDllProtocolToPacketIdMap')
        if self.diagTypeIdMap is not None:
            oprot.writeFieldBegin('diagTypeIdMap', TType.STRUCT, 1)
            self.diagTypeIdMap.write(oprot)
            oprot.writeFieldEnd()
        if self.profSupportedIds is not None:
            oprot.writeFieldBegin('profSupportedIds', TType.STRUCT, 2)
            self.profSupportedIds.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlTargetListResp(object):
    """
    Attributes:
     - errorCode
     - targetList
     - errorString

    """


    def __init__(self, errorCode=None, targetList=None, errorString=None,):
        self.errorCode = errorCode
        self.targetList = targetList
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.targetList = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlTargetListResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.targetList is not None:
            oprot.writeFieldBegin('targetList', TType.STRING, 2)
            oprot.writeString(self.targetList.encode('utf-8') if sys.version_info[0] == 2 else self.targetList)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlPacketIdResp(object):
    """
    Attributes:
     - errorCode
     - packetId
     - errorString

    """


    def __init__(self, errorCode=None, packetId=None, errorString=None,):
        self.errorCode = errorCode
        self.packetId = packetId
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.packetId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlPacketIdResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetId is not None:
            oprot.writeFieldBegin('packetId', TType.I64, 2)
            oprot.writeI64(self.packetId)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlPacketVersionsResp(object):
    """
    Attributes:
     - errorCode
     - packetVersions
     - errorString

    """


    def __init__(self, errorCode=None, packetVersions=None, errorString=None,):
        self.errorCode = errorCode
        self.packetVersions = packetVersions
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.packetVersions = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = iprot.readI64()
                        self.packetVersions.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlPacketVersionsResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetVersions is not None:
            oprot.writeFieldBegin('packetVersions', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.packetVersions))
            for iter22 in self.packetVersions:
                oprot.writeI64(iter22)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlVersionRangeResp(object):
    """
    Attributes:
     - errorCode
     - minVersion
     - maxVersion
     - errorString

    """


    def __init__(self, errorCode=None, minVersion=None, maxVersion=None, errorString=None,):
        self.errorCode = errorCode
        self.minVersion = minVersion
        self.maxVersion = maxVersion
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.minVersion = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.maxVersion = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlVersionRangeResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.minVersion is not None:
            oprot.writeFieldBegin('minVersion', TType.I64, 2)
            oprot.writeI64(self.minVersion)
            oprot.writeFieldEnd()
        if self.maxVersion is not None:
            oprot.writeFieldBegin('maxVersion', TType.I64, 3)
            oprot.writeI64(self.maxVersion)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 4)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlPacketMetadataResp(object):
    """
    Attributes:
     - errorCode
     - packetMetadata
     - errorString

    """


    def __init__(self, errorCode=None, packetMetadata=None, errorString=None,):
        self.errorCode = errorCode
        self.packetMetadata = packetMetadata
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.packetMetadata = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlPacketMetadataResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.packetMetadata is not None:
            oprot.writeFieldBegin('packetMetadata', TType.STRING, 2)
            oprot.writeString(self.packetMetadata.encode('utf-8') if sys.version_info[0] == 2 else self.packetMetadata)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlHweMetaDataAsJsonResp(object):
    """
    Attributes:
     - errorCode
     - qdssHweMetadataJson
     - errorString

    """


    def __init__(self, errorCode=None, qdssHweMetadataJson=None, errorString=None,):
        self.errorCode = errorCode
        self.qdssHweMetadataJson = qdssHweMetadataJson
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.qdssHweMetadataJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlHweMetaDataAsJsonResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.qdssHweMetadataJson is not None:
            oprot.writeFieldBegin('qdssHweMetadataJson', TType.STRING, 2)
            oprot.writeString(self.qdssHweMetadataJson.encode('utf-8') if sys.version_info[0] == 2 else self.qdssHweMetadataJson)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlRegistersByTargetResp(object):
    """
    Attributes:
     - errorCode
     - registerJson
     - errorString

    """


    def __init__(self, errorCode=None, registerJson=None, errorString=None,):
        self.errorCode = errorCode
        self.registerJson = registerJson
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.registerJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlRegistersByTargetResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.registerJson is not None:
            oprot.writeFieldBegin('registerJson', TType.STRING, 2)
            oprot.writeString(self.registerJson.encode('utf-8') if sys.version_info[0] == 2 else self.registerJson)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlAtidsAsJsonResp(object):
    """
    Attributes:
     - errorCode
     - atidJson
     - errorString

    """


    def __init__(self, errorCode=None, atidJson=None, errorString=None,):
        self.errorCode = errorCode
        self.atidJson = atidJson
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.atidJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlAtidsAsJsonResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.atidJson is not None:
            oprot.writeFieldBegin('atidJson', TType.STRING, 2)
            oprot.writeString(self.atidJson.encode('utf-8') if sys.version_info[0] == 2 else self.atidJson)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssHweDecodingDataReq(object):
    """
    Attributes:
     - target
     - diagId
     - tpdaId
     - tpdaPort

    """


    def __init__(self, target=None, diagId=None, tpdaId=None, tpdaPort=None,):
        self.target = target
        self.diagId = diagId
        self.tpdaId = tpdaId
        self.tpdaPort = tpdaPort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.target = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.diagId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.tpdaId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.tpdaPort = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssHweDecodingDataReq')
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.I64, 1)
            oprot.writeI64(self.target)
            oprot.writeFieldEnd()
        if self.diagId is not None:
            oprot.writeFieldBegin('diagId', TType.I64, 2)
            oprot.writeI64(self.diagId)
            oprot.writeFieldEnd()
        if self.tpdaId is not None:
            oprot.writeFieldBegin('tpdaId', TType.I64, 3)
            oprot.writeI64(self.tpdaId)
            oprot.writeFieldEnd()
        if self.tpdaPort is not None:
            oprot.writeFieldBegin('tpdaPort', TType.I64, 4)
            oprot.writeI64(self.tpdaPort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.target is None:
            raise TProtocolException(message='Required field target is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssHweDecodingDataResp(object):
    """
    Attributes:
     - errorCode
     - hweDecodingJson
     - errorString

    """


    def __init__(self, errorCode=None, hweDecodingJson=None, errorString=None,):
        self.errorCode = errorCode
        self.hweDecodingJson = hweDecodingJson
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hweDecodingJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssHweDecodingDataResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.hweDecodingJson is not None:
            oprot.writeFieldBegin('hweDecodingJson', TType.STRING, 2)
            oprot.writeString(self.hweDecodingJson.encode('utf-8') if sys.version_info[0] == 2 else self.hweDecodingJson)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssHweFilteredDataReq(object):
    """
    Attributes:
     - target
     - subsystemMuxId
     - tpdaId
     - tpdaPort

    """


    def __init__(self, target=None, subsystemMuxId=None, tpdaId=None, tpdaPort=None,):
        self.target = target
        self.subsystemMuxId = subsystemMuxId
        self.tpdaId = tpdaId
        self.tpdaPort = tpdaPort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.target = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.subsystemMuxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.tpdaId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.tpdaPort = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssHweFilteredDataReq')
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.I64, 1)
            oprot.writeI64(self.target)
            oprot.writeFieldEnd()
        if self.subsystemMuxId is not None:
            oprot.writeFieldBegin('subsystemMuxId', TType.I64, 2)
            oprot.writeI64(self.subsystemMuxId)
            oprot.writeFieldEnd()
        if self.tpdaId is not None:
            oprot.writeFieldBegin('tpdaId', TType.I64, 3)
            oprot.writeI64(self.tpdaId)
            oprot.writeFieldEnd()
        if self.tpdaPort is not None:
            oprot.writeFieldBegin('tpdaPort', TType.I64, 4)
            oprot.writeI64(self.tpdaPort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.target is None:
            raise TProtocolException(message='Required field target is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssHweFilteredDataResp(object):
    """
    Attributes:
     - errorCode
     - hweConfigurationJson
     - errorString

    """


    def __init__(self, errorCode=None, hweConfigurationJson=None, errorString=None,):
        self.errorCode = errorCode
        self.hweConfigurationJson = hweConfigurationJson
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hweConfigurationJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssHweFilteredDataResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.hweConfigurationJson is not None:
            oprot.writeFieldBegin('hweConfigurationJson', TType.STRING, 2)
            oprot.writeString(self.hweConfigurationJson.encode('utf-8') if sys.version_info[0] == 2 else self.hweConfigurationJson)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssHweConfigurationDataReq(object):
    """
    Attributes:
     - target

    """


    def __init__(self, target=None,):
        self.target = target

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.target = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssHweConfigurationDataReq')
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.I64, 1)
            oprot.writeI64(self.target)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.target is None:
            raise TProtocolException(message='Required field target is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssHweConfigurationDataResp(object):
    """
    Attributes:
     - errorCode
     - hweConfigurationJson
     - errorString

    """


    def __init__(self, errorCode=None, hweConfigurationJson=None, errorString=None,):
        self.errorCode = errorCode
        self.hweConfigurationJson = hweConfigurationJson
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hweConfigurationJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssHweConfigurationDataResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.hweConfigurationJson is not None:
            oprot.writeFieldBegin('hweConfigurationJson', TType.STRING, 2)
            oprot.writeString(self.hweConfigurationJson.encode('utf-8') if sys.version_info[0] == 2 else self.hweConfigurationJson)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QdssQmlFtraceEventResp(object):
    """
    Attributes:
     - errorCode
     - ftraceEventJson
     - errorString

    """


    def __init__(self, errorCode=None, ftraceEventJson=None, errorString=None,):
        self.errorCode = errorCode
        self.ftraceEventJson = ftraceEventJson
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ftraceEventJson = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QdssQmlFtraceEventResp')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.ftraceEventJson is not None:
            oprot.writeFieldBegin('ftraceEventJson', TType.STRING, 2)
            oprot.writeString(self.ftraceEventJson.encode('utf-8') if sys.version_info[0] == 2 else self.ftraceEventJson)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 3)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NvParserResult)
NvParserResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'nvId', None, None, ),  # 1
    (2, TType.STRUCT, 'data', [DeviceConfigService.ttypes.NvData, None], None, ),  # 2
)
all_structs.append(DiagUserDllTypeToPacketIdMap)
DiagUserDllTypeToPacketIdMap.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'protocolToEntityIdMap', (TType.I32, None, TType.LIST, (TType.I32, None, False), False), None, ),  # 1
)
all_structs.append(UserDllProtocolToPacketIdMap)
UserDllProtocolToPacketIdMap.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'diagTypeIdMap', [DiagUserDllTypeToPacketIdMap, None], None, ),  # 1
    (2, TType.STRUCT, 'profSupportedIds', [Profiling.ttypes.ProfilerSupportedIds, None], None, ),  # 2
)
all_structs.append(QdssQmlTargetListResp)
QdssQmlTargetListResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'targetList', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssQmlPacketIdResp)
QdssQmlPacketIdResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'packetId', None, None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssQmlPacketVersionsResp)
QdssQmlPacketVersionsResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.LIST, 'packetVersions', (TType.I64, None, False), None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssQmlVersionRangeResp)
QdssQmlVersionRangeResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.I64, 'minVersion', None, None, ),  # 2
    (3, TType.I64, 'maxVersion', None, None, ),  # 3
    (4, TType.STRING, 'errorString', 'UTF8', None, ),  # 4
)
all_structs.append(QdssQmlPacketMetadataResp)
QdssQmlPacketMetadataResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'packetMetadata', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssQmlHweMetaDataAsJsonResp)
QdssQmlHweMetaDataAsJsonResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'qdssHweMetadataJson', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssQmlRegistersByTargetResp)
QdssQmlRegistersByTargetResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'registerJson', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssQmlAtidsAsJsonResp)
QdssQmlAtidsAsJsonResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'atidJson', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssHweDecodingDataReq)
QdssHweDecodingDataReq.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'target', None, None, ),  # 1
    (2, TType.I64, 'diagId', None, None, ),  # 2
    (3, TType.I64, 'tpdaId', None, None, ),  # 3
    (4, TType.I64, 'tpdaPort', None, None, ),  # 4
)
all_structs.append(QdssHweDecodingDataResp)
QdssHweDecodingDataResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'hweDecodingJson', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssHweFilteredDataReq)
QdssHweFilteredDataReq.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'target', None, None, ),  # 1
    (2, TType.I64, 'subsystemMuxId', None, None, ),  # 2
    (3, TType.I64, 'tpdaId', None, None, ),  # 3
    (4, TType.I64, 'tpdaPort', None, None, ),  # 4
)
all_structs.append(QdssHweFilteredDataResp)
QdssHweFilteredDataResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'hweConfigurationJson', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssHweConfigurationDataReq)
QdssHweConfigurationDataReq.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'target', None, None, ),  # 1
)
all_structs.append(QdssHweConfigurationDataResp)
QdssHweConfigurationDataResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'hweConfigurationJson', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
all_structs.append(QdssQmlFtraceEventResp)
QdssQmlFtraceEventResp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'ftraceEventJson', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'errorString', 'UTF8', None, ),  # 3
)
fix_spec(all_structs)
del all_structs
