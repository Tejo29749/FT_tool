#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from EudService import EudService
from EudService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ErrorType getLastError()')
    print('  i64 getDevice()')
    print('  ErrorCode initializeService()')
    print('  ErrorCode initializeServiceByProtocol(i64 protocolHandle)')
    print('  ErrorCode destroyService()')
    print('  void disconnect(i64 clientId)')
    print('  void sendCommand(EudCmdInfo eudCmdInfo)')
    print('  EudPacket sendRawRequest(string request, EudReturnConfig returnConfig, i32 timeout)')
    print('  i64 sendRawRequestAsync(string request)')
    print('  EudPeripheralType GetEudPeripheralType(i64 protocolHandle)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = EudService.Client(protocol)
transport.open()

if cmd == 'getLastError':
    if len(args) != 0:
        print('getLastError requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastError())

elif cmd == 'getDevice':
    if len(args) != 0:
        print('getDevice requires 0 args')
        sys.exit(1)
    pp.pprint(client.getDevice())

elif cmd == 'initializeService':
    if len(args) != 0:
        print('initializeService requires 0 args')
        sys.exit(1)
    pp.pprint(client.initializeService())

elif cmd == 'initializeServiceByProtocol':
    if len(args) != 1:
        print('initializeServiceByProtocol requires 1 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceByProtocol(eval(args[0]),))

elif cmd == 'destroyService':
    if len(args) != 0:
        print('destroyService requires 0 args')
        sys.exit(1)
    pp.pprint(client.destroyService())

elif cmd == 'disconnect':
    if len(args) != 1:
        print('disconnect requires 1 args')
        sys.exit(1)
    pp.pprint(client.disconnect(eval(args[0]),))

elif cmd == 'sendCommand':
    if len(args) != 1:
        print('sendCommand requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendCommand(eval(args[0]),))

elif cmd == 'sendRawRequest':
    if len(args) != 3:
        print('sendRawRequest requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendRawRequest(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'sendRawRequestAsync':
    if len(args) != 1:
        print('sendRawRequestAsync requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendRawRequestAsync(args[0],))

elif cmd == 'GetEudPeripheralType':
    if len(args) != 1:
        print('GetEudPeripheralType requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetEudPeripheralType(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
