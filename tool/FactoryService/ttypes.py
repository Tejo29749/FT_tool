#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import Common.ttypes
import DeviceManager.ttypes
import ImageManagementService.ttypes

from thrift.transport import TTransport


class SubscriptionType(object):
    TYPE_0 = 0
    TYPE_1 = 1

    _VALUES_TO_NAMES = {
        0: "TYPE_0",
        1: "TYPE_1",
    }

    _NAMES_TO_VALUES = {
        "TYPE_0": 0,
        "TYPE_1": 1,
    }


class WcnssMacLocation(object):
    NV_ITEM = 0
    AP_PERSIST = 1

    _VALUES_TO_NAMES = {
        0: "NV_ITEM",
        1: "AP_PERSIST",
    }

    _NAMES_TO_VALUES = {
        "NV_ITEM": 0,
        "AP_PERSIST": 1,
    }


class WcnssTechnology(object):
    BLUETOOTH = 0
    WLAN = 1

    _VALUES_TO_NAMES = {
        0: "BLUETOOTH",
        1: "WLAN",
    }

    _NAMES_TO_VALUES = {
        "BLUETOOTH": 0,
        "WLAN": 1,
    }


class WcnssChipType(object):
    WCN36xx = 0
    QCA639x = 1
    WCN39xx = 2

    _VALUES_TO_NAMES = {
        0: "WCN36xx",
        1: "QCA639x",
        2: "WCN39xx",
    }

    _NAMES_TO_VALUES = {
        "WCN36xx": 0,
        "QCA639x": 1,
        "WCN39xx": 2,
    }


class Slot(object):
    SLOT_0 = 0
    SLOT_1 = 1

    _VALUES_TO_NAMES = {
        0: "SLOT_0",
        1: "SLOT_1",
    }

    _NAMES_TO_VALUES = {
        "SLOT_0": 0,
        "SLOT_1": 1,
    }


class SubscriptionId(object):
    SUB0 = -1
    SUB1 = 1
    SUB2 = 2
    SUB3 = 3
    SUB4 = 4

    _VALUES_TO_NAMES = {
        -1: "SUB0",
        1: "SUB1",
        2: "SUB2",
        3: "SUB3",
        4: "SUB4",
    }

    _NAMES_TO_VALUES = {
        "SUB0": -1,
        "SUB1": 1,
        "SUB2": 2,
        "SUB3": 3,
        "SUB4": 4,
    }


class SimlockSlotPolicy(object):
    SAME_ON_ALL_SLOTS = 0
    UNIQUE_FOR_EACH_SLOT = 1
    LOCK_ONLY_SLOT_1 = 2
    VALID_CARD_MUST_ON_SLOT_1 = 3
    VALID_CARD_MUST_ON_A_SLOT = 4
    MASTER_SLOT_1 = 5
    BLOCK_ALL_SLOTS_IF_SLOT_1_EXPIRED = 6
    WAIT_FOR_FULL_SERVICE_ON_SLOT_1 = 7
    BLOCK_ALL_SLOTS_IF_ALL_VALID_SLOTS_EXPIRED = 8
    WAIT_FOR_FULL_SERVICE_ON_ANY_VALID_SLOT = 9
    WAIT_FOR_FULL_SERVICE_ON_ANY_VALID_SLOT_OR_IMSI_MATCH = 10
    VALID_CARD_MUST_ON_ALL_SLOTS = 11
    WAIT_FOR_FULL_SERVICE_ON_SLOT1_OR_IMSI_MATCH = 12

    _VALUES_TO_NAMES = {
        0: "SAME_ON_ALL_SLOTS",
        1: "UNIQUE_FOR_EACH_SLOT",
        2: "LOCK_ONLY_SLOT_1",
        3: "VALID_CARD_MUST_ON_SLOT_1",
        4: "VALID_CARD_MUST_ON_A_SLOT",
        5: "MASTER_SLOT_1",
        6: "BLOCK_ALL_SLOTS_IF_SLOT_1_EXPIRED",
        7: "WAIT_FOR_FULL_SERVICE_ON_SLOT_1",
        8: "BLOCK_ALL_SLOTS_IF_ALL_VALID_SLOTS_EXPIRED",
        9: "WAIT_FOR_FULL_SERVICE_ON_ANY_VALID_SLOT",
        10: "WAIT_FOR_FULL_SERVICE_ON_ANY_VALID_SLOT_OR_IMSI_MATCH",
        11: "VALID_CARD_MUST_ON_ALL_SLOTS",
        12: "WAIT_FOR_FULL_SERVICE_ON_SLOT1_OR_IMSI_MATCH",
    }

    _NAMES_TO_VALUES = {
        "SAME_ON_ALL_SLOTS": 0,
        "UNIQUE_FOR_EACH_SLOT": 1,
        "LOCK_ONLY_SLOT_1": 2,
        "VALID_CARD_MUST_ON_SLOT_1": 3,
        "VALID_CARD_MUST_ON_A_SLOT": 4,
        "MASTER_SLOT_1": 5,
        "BLOCK_ALL_SLOTS_IF_SLOT_1_EXPIRED": 6,
        "WAIT_FOR_FULL_SERVICE_ON_SLOT_1": 7,
        "BLOCK_ALL_SLOTS_IF_ALL_VALID_SLOTS_EXPIRED": 8,
        "WAIT_FOR_FULL_SERVICE_ON_ANY_VALID_SLOT": 9,
        "WAIT_FOR_FULL_SERVICE_ON_ANY_VALID_SLOT_OR_IMSI_MATCH": 10,
        "VALID_CARD_MUST_ON_ALL_SLOTS": 11,
        "WAIT_FOR_FULL_SERVICE_ON_SLOT1_OR_IMSI_MATCH": 12,
    }


class SimlockSubscriptionPolicy(object):
    INDEPENDENT = 0
    VALID_3GPP_REQUIRED = 1
    VALID_3GPP2_REQUIRED = 2
    VALID_BOTH_REQUIRED = 3
    VALID_3GPP_OR_3GPP2_REQUIRED = 4

    _VALUES_TO_NAMES = {
        0: "INDEPENDENT",
        1: "VALID_3GPP_REQUIRED",
        2: "VALID_3GPP2_REQUIRED",
        3: "VALID_BOTH_REQUIRED",
        4: "VALID_3GPP_OR_3GPP2_REQUIRED",
    }

    _NAMES_TO_VALUES = {
        "INDEPENDENT": 0,
        "VALID_3GPP_REQUIRED": 1,
        "VALID_3GPP2_REQUIRED": 2,
        "VALID_BOTH_REQUIRED": 3,
        "VALID_3GPP_OR_3GPP2_REQUIRED": 4,
    }


class SimlockStatus(object):
    INVALID_CODE = -1
    SUCCESS = 0
    GENERIC_ERROR = 1
    INCORRECT_KEY = 2
    INCORRECT_PARAMS = 3
    MEMORY_ERROR_HEAP_EXHAUSTED = 4
    MAX_RETRIES_REACHED = 5
    INVALID_STATE = 6
    UNSUPPORTED = 7
    INVALID_LOCK_DATA = 8
    CONFLICTING_LOCK_DATA = 9

    _VALUES_TO_NAMES = {
        -1: "INVALID_CODE",
        0: "SUCCESS",
        1: "GENERIC_ERROR",
        2: "INCORRECT_KEY",
        3: "INCORRECT_PARAMS",
        4: "MEMORY_ERROR_HEAP_EXHAUSTED",
        5: "MAX_RETRIES_REACHED",
        6: "INVALID_STATE",
        7: "UNSUPPORTED",
        8: "INVALID_LOCK_DATA",
        9: "CONFLICTING_LOCK_DATA",
    }

    _NAMES_TO_VALUES = {
        "INVALID_CODE": -1,
        "SUCCESS": 0,
        "GENERIC_ERROR": 1,
        "INCORRECT_KEY": 2,
        "INCORRECT_PARAMS": 3,
        "MEMORY_ERROR_HEAP_EXHAUSTED": 4,
        "MAX_RETRIES_REACHED": 5,
        "INVALID_STATE": 6,
        "UNSUPPORTED": 7,
        "INVALID_LOCK_DATA": 8,
        "CONFLICTING_LOCK_DATA": 9,
    }


class SimlockXmlValuePriority(object):
    VALUE = 1
    VALUE_RANGED = 2

    _VALUES_TO_NAMES = {
        1: "VALUE",
        2: "VALUE_RANGED",
    }

    _NAMES_TO_VALUES = {
        "VALUE": 1,
        "VALUE_RANGED": 2,
    }


class SimlockXmlPaired(object):
    NO = 0
    MCC_MNC = 1
    IMSI6_IMSI7 = 2
    GID1_GID2 = 4

    _VALUES_TO_NAMES = {
        0: "NO",
        1: "MCC_MNC",
        2: "IMSI6_IMSI7",
        4: "GID1_GID2",
    }

    _NAMES_TO_VALUES = {
        "NO": 0,
        "MCC_MNC": 1,
        "IMSI6_IMSI7": 2,
        "GID1_GID2": 4,
    }


class SimlockBlackList(object):
    DISABLE = 0
    ENABLE = 1

    _VALUES_TO_NAMES = {
        0: "DISABLE",
        1: "ENABLE",
    }

    _NAMES_TO_VALUES = {
        "DISABLE": 0,
        "ENABLE": 1,
    }


class SimlockAutoLock(object):
    DISABLE = 0
    ENABLE = 1

    _VALUES_TO_NAMES = {
        0: "DISABLE",
        1: "ENABLE",
    }

    _NAMES_TO_VALUES = {
        "DISABLE": 0,
        "ENABLE": 1,
    }


class SimlockSlot(object):
    SLOT_1 = 1
    SLOT_2 = 2
    SLOT_3 = 3
    SLOT_4 = 4

    _VALUES_TO_NAMES = {
        1: "SLOT_1",
        2: "SLOT_2",
        3: "SLOT_3",
        4: "SLOT_4",
    }

    _NAMES_TO_VALUES = {
        "SLOT_1": 1,
        "SLOT_2": 2,
        "SLOT_3": 3,
        "SLOT_4": 4,
    }


class SimlockCategory(object):
    NW_3GPP = 0
    NS_3GPP = 1
    SP_3GPP = 2
    CP_3GPP = 3
    SIM_3GPP = 4
    NW_TYPE1_3GPP2 = 5
    NW_TYPE2_3GPP2 = 6
    HRPD_3GPP2 = 7
    SP_3GPP2 = 8
    CP_3GPP2 = 9
    RUIM_3GPP2 = 10
    SP_EXT_3GPP = 11
    CP_EXT_3GPP = 12
    SPN_3GPP = 13
    SP_EHPLMN_3GPP = 14
    ICCID_3GPP = 15
    IMPI_3GPP = 16
    NS_SP_3GPP = 17

    _VALUES_TO_NAMES = {
        0: "NW_3GPP",
        1: "NS_3GPP",
        2: "SP_3GPP",
        3: "CP_3GPP",
        4: "SIM_3GPP",
        5: "NW_TYPE1_3GPP2",
        6: "NW_TYPE2_3GPP2",
        7: "HRPD_3GPP2",
        8: "SP_3GPP2",
        9: "CP_3GPP2",
        10: "RUIM_3GPP2",
        11: "SP_EXT_3GPP",
        12: "CP_EXT_3GPP",
        13: "SPN_3GPP",
        14: "SP_EHPLMN_3GPP",
        15: "ICCID_3GPP",
        16: "IMPI_3GPP",
        17: "NS_SP_3GPP",
    }

    _NAMES_TO_VALUES = {
        "NW_3GPP": 0,
        "NS_3GPP": 1,
        "SP_3GPP": 2,
        "CP_3GPP": 3,
        "SIM_3GPP": 4,
        "NW_TYPE1_3GPP2": 5,
        "NW_TYPE2_3GPP2": 6,
        "HRPD_3GPP2": 7,
        "SP_3GPP2": 8,
        "CP_3GPP2": 9,
        "RUIM_3GPP2": 10,
        "SP_EXT_3GPP": 11,
        "CP_EXT_3GPP": 12,
        "SPN_3GPP": 13,
        "SP_EHPLMN_3GPP": 14,
        "ICCID_3GPP": 15,
        "IMPI_3GPP": 16,
        "NS_SP_3GPP": 17,
    }


class SimlockType(object):
    WHITE = 0
    BLACK = 1

    _VALUES_TO_NAMES = {
        0: "WHITE",
        1: "BLACK",
    }

    _NAMES_TO_VALUES = {
        "WHITE": 0,
        "BLACK": 1,
    }


class SimlockCategoryStatus(object):
    UNLOCKED = 0
    LOCKED = 1

    _VALUES_TO_NAMES = {
        0: "UNLOCKED",
        1: "LOCKED",
    }

    _NAMES_TO_VALUES = {
        "UNLOCKED": 0,
        "LOCKED": 1,
    }


class WcnssOptions(object):
    """
    Attributes:
     - wcnssTechnology
     - wcnssChipType
     - wcnssMacLocation
     - devicePath
     - hostPath
     - macAddress
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'wcnssTechnology', None, None, ),  # 1
        (2, TType.I32, 'wcnssChipType', None, None, ),  # 2
        (3, TType.I32, 'wcnssMacLocation', None, None, ),  # 3
        (4, TType.STRING, 'devicePath', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'hostPath', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'macAddress', 'UTF8', None, ),  # 6
    )

    def __init__(self, wcnssTechnology=None, wcnssChipType=None, wcnssMacLocation=None, devicePath=None, hostPath=None, macAddress=None,):
        self.wcnssTechnology = wcnssTechnology
        self.wcnssChipType = wcnssChipType
        self.wcnssMacLocation = wcnssMacLocation
        self.devicePath = devicePath
        self.hostPath = hostPath
        self.macAddress = macAddress

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.wcnssTechnology = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.wcnssChipType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.wcnssMacLocation = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.devicePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.hostPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.macAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('WcnssOptions')
        if self.wcnssTechnology is not None:
            oprot.writeFieldBegin('wcnssTechnology', TType.I32, 1)
            oprot.writeI32(self.wcnssTechnology)
            oprot.writeFieldEnd()
        if self.wcnssChipType is not None:
            oprot.writeFieldBegin('wcnssChipType', TType.I32, 2)
            oprot.writeI32(self.wcnssChipType)
            oprot.writeFieldEnd()
        if self.wcnssMacLocation is not None:
            oprot.writeFieldBegin('wcnssMacLocation', TType.I32, 3)
            oprot.writeI32(self.wcnssMacLocation)
            oprot.writeFieldEnd()
        if self.devicePath is not None:
            oprot.writeFieldBegin('devicePath', TType.STRING, 4)
            oprot.writeString(self.devicePath.encode('utf-8') if sys.version_info[0] == 2 else self.devicePath)
            oprot.writeFieldEnd()
        if self.hostPath is not None:
            oprot.writeFieldBegin('hostPath', TType.STRING, 5)
            oprot.writeString(self.hostPath.encode('utf-8') if sys.version_info[0] == 2 else self.hostPath)
            oprot.writeFieldEnd()
        if self.macAddress is not None:
            oprot.writeFieldBegin('macAddress', TType.STRING, 6)
            oprot.writeString(self.macAddress.encode('utf-8') if sys.version_info[0] == 2 else self.macAddress)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.wcnssTechnology is None:
            raise TProtocolException(message='Required field wcnssTechnology is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ImeiResponse(object):
    """
    Attributes:
     - errorType
     - tac
     - fac
     - snr
     - svn
     - imei
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'tac', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'fac', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'snr', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'svn', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'imei', 'UTF8', None, ),  # 6
    )

    def __init__(self, errorType=None, tac=None, fac=None, snr=None, svn=None, imei=None,):
        self.errorType = errorType
        self.tac = tac
        self.fac = fac
        self.snr = snr
        self.svn = svn
        self.imei = imei

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.snr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.svn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.imei = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ImeiResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.tac is not None:
            oprot.writeFieldBegin('tac', TType.STRING, 2)
            oprot.writeString(self.tac.encode('utf-8') if sys.version_info[0] == 2 else self.tac)
            oprot.writeFieldEnd()
        if self.fac is not None:
            oprot.writeFieldBegin('fac', TType.STRING, 3)
            oprot.writeString(self.fac.encode('utf-8') if sys.version_info[0] == 2 else self.fac)
            oprot.writeFieldEnd()
        if self.snr is not None:
            oprot.writeFieldBegin('snr', TType.STRING, 4)
            oprot.writeString(self.snr.encode('utf-8') if sys.version_info[0] == 2 else self.snr)
            oprot.writeFieldEnd()
        if self.svn is not None:
            oprot.writeFieldBegin('svn', TType.STRING, 5)
            oprot.writeString(self.svn.encode('utf-8') if sys.version_info[0] == 2 else self.svn)
            oprot.writeFieldEnd()
        if self.imei is not None:
            oprot.writeFieldBegin('imei', TType.STRING, 6)
            oprot.writeString(self.imei.encode('utf-8') if sys.version_info[0] == 2 else self.imei)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MeidResponse(object):
    """
    Attributes:
     - errorType
     - rr
     - mac
     - snr
     - meid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'rr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'mac', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'snr', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'meid', 'UTF8', None, ),  # 5
    )

    def __init__(self, errorType=None, rr=None, mac=None, snr=None, meid=None,):
        self.errorType = errorType
        self.rr = rr
        self.mac = mac
        self.snr = snr
        self.meid = meid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.rr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.snr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.meid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MeidResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.rr is not None:
            oprot.writeFieldBegin('rr', TType.STRING, 2)
            oprot.writeString(self.rr.encode('utf-8') if sys.version_info[0] == 2 else self.rr)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 3)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.snr is not None:
            oprot.writeFieldBegin('snr', TType.STRING, 4)
            oprot.writeString(self.snr.encode('utf-8') if sys.version_info[0] == 2 else self.snr)
            oprot.writeFieldEnd()
        if self.meid is not None:
            oprot.writeFieldBegin('meid', TType.STRING, 5)
            oprot.writeString(self.meid.encode('utf-8') if sys.version_info[0] == 2 else self.meid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FlattenResponse(object):
    """
    Attributes:
     - errorType
     - flatBuild
     - deviceProgrammer
     - rawXmls
     - patchXmls
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'flatBuild', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'deviceProgrammer', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'rawXmls', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'patchXmls', 'UTF8', None, ),  # 5
    )

    def __init__(self, errorType=None, flatBuild=None, deviceProgrammer=None, rawXmls=None, patchXmls=None,):
        self.errorType = errorType
        self.flatBuild = flatBuild
        self.deviceProgrammer = deviceProgrammer
        self.rawXmls = rawXmls
        self.patchXmls = patchXmls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.flatBuild = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.deviceProgrammer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.rawXmls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.patchXmls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FlattenResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.flatBuild is not None:
            oprot.writeFieldBegin('flatBuild', TType.STRING, 2)
            oprot.writeString(self.flatBuild.encode('utf-8') if sys.version_info[0] == 2 else self.flatBuild)
            oprot.writeFieldEnd()
        if self.deviceProgrammer is not None:
            oprot.writeFieldBegin('deviceProgrammer', TType.STRING, 3)
            oprot.writeString(self.deviceProgrammer.encode('utf-8') if sys.version_info[0] == 2 else self.deviceProgrammer)
            oprot.writeFieldEnd()
        if self.rawXmls is not None:
            oprot.writeFieldBegin('rawXmls', TType.STRING, 4)
            oprot.writeString(self.rawXmls.encode('utf-8') if sys.version_info[0] == 2 else self.rawXmls)
            oprot.writeFieldEnd()
        if self.patchXmls is not None:
            oprot.writeFieldBegin('patchXmls', TType.STRING, 5)
            oprot.writeString(self.patchXmls.encode('utf-8') if sys.version_info[0] == 2 else self.patchXmls)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BuildResponse(object):
    """
    Attributes:
     - errorType
     - build
     - deviceProgrammer
     - rawXmls
     - patchXmls
     - chainedDigestPath
     - singedDigestPath
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'build', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'deviceProgrammer', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'rawXmls', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'patchXmls', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'chainedDigestPath', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'singedDigestPath', 'UTF8', None, ),  # 7
    )

    def __init__(self, errorType=None, build=None, deviceProgrammer=None, rawXmls=None, patchXmls=None, chainedDigestPath=None, singedDigestPath=None,):
        self.errorType = errorType
        self.build = build
        self.deviceProgrammer = deviceProgrammer
        self.rawXmls = rawXmls
        self.patchXmls = patchXmls
        self.chainedDigestPath = chainedDigestPath
        self.singedDigestPath = singedDigestPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.build = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.deviceProgrammer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.rawXmls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.patchXmls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.chainedDigestPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.singedDigestPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('BuildResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.build is not None:
            oprot.writeFieldBegin('build', TType.STRING, 2)
            oprot.writeString(self.build.encode('utf-8') if sys.version_info[0] == 2 else self.build)
            oprot.writeFieldEnd()
        if self.deviceProgrammer is not None:
            oprot.writeFieldBegin('deviceProgrammer', TType.STRING, 3)
            oprot.writeString(self.deviceProgrammer.encode('utf-8') if sys.version_info[0] == 2 else self.deviceProgrammer)
            oprot.writeFieldEnd()
        if self.rawXmls is not None:
            oprot.writeFieldBegin('rawXmls', TType.STRING, 4)
            oprot.writeString(self.rawXmls.encode('utf-8') if sys.version_info[0] == 2 else self.rawXmls)
            oprot.writeFieldEnd()
        if self.patchXmls is not None:
            oprot.writeFieldBegin('patchXmls', TType.STRING, 5)
            oprot.writeString(self.patchXmls.encode('utf-8') if sys.version_info[0] == 2 else self.patchXmls)
            oprot.writeFieldEnd()
        if self.chainedDigestPath is not None:
            oprot.writeFieldBegin('chainedDigestPath', TType.STRING, 6)
            oprot.writeString(self.chainedDigestPath.encode('utf-8') if sys.version_info[0] == 2 else self.chainedDigestPath)
            oprot.writeFieldEnd()
        if self.singedDigestPath is not None:
            oprot.writeFieldBegin('singedDigestPath', TType.STRING, 7)
            oprot.writeString(self.singedDigestPath.encode('utf-8') if sys.version_info[0] == 2 else self.singedDigestPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DownloadBuildOptions(object):
    """
    Attributes:
     - buildPath
     - memoryType
     - validationMode
     - productFlavour
     - deviceProgrammer
     - erasePartition
     - resetDevice
     - skipSahara
     - readImages
     - readImagePath
     - remoteEfsPath
     - chainedDigestPath
     - singedDigestPath
     - rawXmls
     - patchXmls
     - slot
     - useMetaImages
     - maxPayload
     - ufsProvisioningPath
     - preservationOption
     - partitionIndexList
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'buildPath', 'UTF8', None, ),  # 1
        (2, TType.I32, 'memoryType', None, None, ),  # 2
        (3, TType.I32, 'validationMode', None, None, ),  # 3
        (4, TType.STRING, 'productFlavour', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'deviceProgrammer', 'UTF8', None, ),  # 5
        (6, TType.BOOL, 'erasePartition', None, None, ),  # 6
        (7, TType.BOOL, 'resetDevice', None, None, ),  # 7
        (8, TType.BOOL, 'skipSahara', None, None, ),  # 8
        (9, TType.BOOL, 'readImages', None, None, ),  # 9
        (10, TType.STRING, 'readImagePath', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'remoteEfsPath', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'chainedDigestPath', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'singedDigestPath', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'rawXmls', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'patchXmls', 'UTF8', None, ),  # 15
        (16, TType.I32, 'slot', None, 0, ),  # 16
        (17, TType.BOOL, 'useMetaImages', None, None, ),  # 17
        (18, TType.I32, 'maxPayload', None, None, ),  # 18
        (19, TType.STRING, 'ufsProvisioningPath', 'UTF8', None, ),  # 19
        (20, TType.STRUCT, 'preservationOption', (ImageManagementService.ttypes.PreservationOption, ImageManagementService.ttypes.PreservationOption.thrift_spec), None, ),  # 20
        (21, TType.LIST, 'partitionIndexList', (TType.I32, None, False), None, ),  # 21
    )

    def __init__(self, buildPath=None, memoryType=None, validationMode=None, productFlavour=None, deviceProgrammer=None, erasePartition=None, resetDevice=None, skipSahara=None, readImages=None, readImagePath=None, remoteEfsPath=None, chainedDigestPath=None, singedDigestPath=None, rawXmls=None, patchXmls=None, slot=thrift_spec[16][4], useMetaImages=None, maxPayload=None, ufsProvisioningPath=None, preservationOption=None, partitionIndexList=None,):
        self.buildPath = buildPath
        self.memoryType = memoryType
        self.validationMode = validationMode
        self.productFlavour = productFlavour
        self.deviceProgrammer = deviceProgrammer
        self.erasePartition = erasePartition
        self.resetDevice = resetDevice
        self.skipSahara = skipSahara
        self.readImages = readImages
        self.readImagePath = readImagePath
        self.remoteEfsPath = remoteEfsPath
        self.chainedDigestPath = chainedDigestPath
        self.singedDigestPath = singedDigestPath
        self.rawXmls = rawXmls
        self.patchXmls = patchXmls
        self.slot = slot
        self.useMetaImages = useMetaImages
        self.maxPayload = maxPayload
        self.ufsProvisioningPath = ufsProvisioningPath
        self.preservationOption = preservationOption
        self.partitionIndexList = partitionIndexList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.buildPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.memoryType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.validationMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.productFlavour = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.deviceProgrammer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.erasePartition = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.resetDevice = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.skipSahara = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.readImages = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.readImagePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.remoteEfsPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.chainedDigestPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.singedDigestPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.rawXmls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.patchXmls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.slot = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.useMetaImages = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.maxPayload = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.ufsProvisioningPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.preservationOption = ImageManagementService.ttypes.PreservationOption()
                    self.preservationOption.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.partitionIndexList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.partitionIndexList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DownloadBuildOptions')
        if self.buildPath is not None:
            oprot.writeFieldBegin('buildPath', TType.STRING, 1)
            oprot.writeString(self.buildPath.encode('utf-8') if sys.version_info[0] == 2 else self.buildPath)
            oprot.writeFieldEnd()
        if self.memoryType is not None:
            oprot.writeFieldBegin('memoryType', TType.I32, 2)
            oprot.writeI32(self.memoryType)
            oprot.writeFieldEnd()
        if self.validationMode is not None:
            oprot.writeFieldBegin('validationMode', TType.I32, 3)
            oprot.writeI32(self.validationMode)
            oprot.writeFieldEnd()
        if self.productFlavour is not None:
            oprot.writeFieldBegin('productFlavour', TType.STRING, 4)
            oprot.writeString(self.productFlavour.encode('utf-8') if sys.version_info[0] == 2 else self.productFlavour)
            oprot.writeFieldEnd()
        if self.deviceProgrammer is not None:
            oprot.writeFieldBegin('deviceProgrammer', TType.STRING, 5)
            oprot.writeString(self.deviceProgrammer.encode('utf-8') if sys.version_info[0] == 2 else self.deviceProgrammer)
            oprot.writeFieldEnd()
        if self.erasePartition is not None:
            oprot.writeFieldBegin('erasePartition', TType.BOOL, 6)
            oprot.writeBool(self.erasePartition)
            oprot.writeFieldEnd()
        if self.resetDevice is not None:
            oprot.writeFieldBegin('resetDevice', TType.BOOL, 7)
            oprot.writeBool(self.resetDevice)
            oprot.writeFieldEnd()
        if self.skipSahara is not None:
            oprot.writeFieldBegin('skipSahara', TType.BOOL, 8)
            oprot.writeBool(self.skipSahara)
            oprot.writeFieldEnd()
        if self.readImages is not None:
            oprot.writeFieldBegin('readImages', TType.BOOL, 9)
            oprot.writeBool(self.readImages)
            oprot.writeFieldEnd()
        if self.readImagePath is not None:
            oprot.writeFieldBegin('readImagePath', TType.STRING, 10)
            oprot.writeString(self.readImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.readImagePath)
            oprot.writeFieldEnd()
        if self.remoteEfsPath is not None:
            oprot.writeFieldBegin('remoteEfsPath', TType.STRING, 11)
            oprot.writeString(self.remoteEfsPath.encode('utf-8') if sys.version_info[0] == 2 else self.remoteEfsPath)
            oprot.writeFieldEnd()
        if self.chainedDigestPath is not None:
            oprot.writeFieldBegin('chainedDigestPath', TType.STRING, 12)
            oprot.writeString(self.chainedDigestPath.encode('utf-8') if sys.version_info[0] == 2 else self.chainedDigestPath)
            oprot.writeFieldEnd()
        if self.singedDigestPath is not None:
            oprot.writeFieldBegin('singedDigestPath', TType.STRING, 13)
            oprot.writeString(self.singedDigestPath.encode('utf-8') if sys.version_info[0] == 2 else self.singedDigestPath)
            oprot.writeFieldEnd()
        if self.rawXmls is not None:
            oprot.writeFieldBegin('rawXmls', TType.STRING, 14)
            oprot.writeString(self.rawXmls.encode('utf-8') if sys.version_info[0] == 2 else self.rawXmls)
            oprot.writeFieldEnd()
        if self.patchXmls is not None:
            oprot.writeFieldBegin('patchXmls', TType.STRING, 15)
            oprot.writeString(self.patchXmls.encode('utf-8') if sys.version_info[0] == 2 else self.patchXmls)
            oprot.writeFieldEnd()
        if self.slot is not None:
            oprot.writeFieldBegin('slot', TType.I32, 16)
            oprot.writeI32(self.slot)
            oprot.writeFieldEnd()
        if self.useMetaImages is not None:
            oprot.writeFieldBegin('useMetaImages', TType.BOOL, 17)
            oprot.writeBool(self.useMetaImages)
            oprot.writeFieldEnd()
        if self.maxPayload is not None:
            oprot.writeFieldBegin('maxPayload', TType.I32, 18)
            oprot.writeI32(self.maxPayload)
            oprot.writeFieldEnd()
        if self.ufsProvisioningPath is not None:
            oprot.writeFieldBegin('ufsProvisioningPath', TType.STRING, 19)
            oprot.writeString(self.ufsProvisioningPath.encode('utf-8') if sys.version_info[0] == 2 else self.ufsProvisioningPath)
            oprot.writeFieldEnd()
        if self.preservationOption is not None:
            oprot.writeFieldBegin('preservationOption', TType.STRUCT, 20)
            self.preservationOption.write(oprot)
            oprot.writeFieldEnd()
        if self.partitionIndexList is not None:
            oprot.writeFieldBegin('partitionIndexList', TType.LIST, 21)
            oprot.writeListBegin(TType.I32, len(self.partitionIndexList))
            for iter6 in self.partitionIndexList:
                oprot.writeI32(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.buildPath is None:
            raise TProtocolException(message='Required field buildPath is unset!')
        if self.memoryType is None:
            raise TProtocolException(message='Required field memoryType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockLockInfo(object):
    """
    Attributes:
     - simlockCategory
     - simlockBlackList
     - simlockCategoryStatus
     - maxRetries
     - currRetries
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'simlockCategory', None, None, ),  # 1
        (2, TType.I32, 'simlockBlackList', None, None, ),  # 2
        (3, TType.I32, 'simlockCategoryStatus', None, None, ),  # 3
        (4, TType.I32, 'maxRetries', None, None, ),  # 4
        (5, TType.I32, 'currRetries', None, None, ),  # 5
    )

    def __init__(self, simlockCategory=None, simlockBlackList=None, simlockCategoryStatus=None, maxRetries=None, currRetries=None,):
        self.simlockCategory = simlockCategory
        self.simlockBlackList = simlockBlackList
        self.simlockCategoryStatus = simlockCategoryStatus
        self.maxRetries = maxRetries
        self.currRetries = currRetries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.simlockCategory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.simlockBlackList = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.simlockCategoryStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.maxRetries = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.currRetries = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockLockInfo')
        if self.simlockCategory is not None:
            oprot.writeFieldBegin('simlockCategory', TType.I32, 1)
            oprot.writeI32(self.simlockCategory)
            oprot.writeFieldEnd()
        if self.simlockBlackList is not None:
            oprot.writeFieldBegin('simlockBlackList', TType.I32, 2)
            oprot.writeI32(self.simlockBlackList)
            oprot.writeFieldEnd()
        if self.simlockCategoryStatus is not None:
            oprot.writeFieldBegin('simlockCategoryStatus', TType.I32, 3)
            oprot.writeI32(self.simlockCategoryStatus)
            oprot.writeFieldEnd()
        if self.maxRetries is not None:
            oprot.writeFieldBegin('maxRetries', TType.I32, 4)
            oprot.writeI32(self.maxRetries)
            oprot.writeFieldEnd()
        if self.currRetries is not None:
            oprot.writeFieldBegin('currRetries', TType.I32, 5)
            oprot.writeI32(self.currRetries)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockErrorType(object):
    """
    Attributes:
     - errorCode
     - errorString
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'errorCode', None, None, ),  # 1
        (2, TType.STRING, 'errorString', 'UTF8', None, ),  # 2
    )

    def __init__(self, errorCode=None, errorString=None,):
        self.errorCode = errorCode
        self.errorString = errorString

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorString = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockErrorType')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorString is not None:
            oprot.writeFieldBegin('errorString', TType.STRING, 2)
            oprot.writeString(self.errorString.encode('utf-8') if sys.version_info[0] == 2 else self.errorString)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockDataConfiguration(object):
    """
    Attributes:
     - mcc
     - mnc
     - msin
     - irmcode
     - ehplmnMcc
     - ehplmnMnc
     - imsi6
     - imsi7
     - spn
     - iccid
     - gid1List
     - gid2List
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mcc', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'mnc', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'msin', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'irmcode', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'ehplmnMcc', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'ehplmnMnc', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'imsi6', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'imsi7', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'spn', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'iccid', 'UTF8', None, ),  # 10
        (11, TType.LIST, 'gid1List', (TType.BYTE, None, False), None, ),  # 11
        (12, TType.LIST, 'gid2List', (TType.BYTE, None, False), None, ),  # 12
    )

    def __init__(self, mcc=None, mnc=None, msin=None, irmcode=None, ehplmnMcc=None, ehplmnMnc=None, imsi6=None, imsi7=None, spn=None, iccid=None, gid1List=None, gid2List=None,):
        self.mcc = mcc
        self.mnc = mnc
        self.msin = msin
        self.irmcode = irmcode
        self.ehplmnMcc = ehplmnMcc
        self.ehplmnMnc = ehplmnMnc
        self.imsi6 = imsi6
        self.imsi7 = imsi7
        self.spn = spn
        self.iccid = iccid
        self.gid1List = gid1List
        self.gid2List = gid2List

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mcc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mnc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.msin = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.irmcode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ehplmnMcc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ehplmnMnc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.imsi6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.imsi7 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.spn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.iccid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.gid1List = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readByte()
                        self.gid1List.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.gid2List = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readByte()
                        self.gid2List.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockDataConfiguration')
        if self.mcc is not None:
            oprot.writeFieldBegin('mcc', TType.STRING, 1)
            oprot.writeString(self.mcc.encode('utf-8') if sys.version_info[0] == 2 else self.mcc)
            oprot.writeFieldEnd()
        if self.mnc is not None:
            oprot.writeFieldBegin('mnc', TType.STRING, 2)
            oprot.writeString(self.mnc.encode('utf-8') if sys.version_info[0] == 2 else self.mnc)
            oprot.writeFieldEnd()
        if self.msin is not None:
            oprot.writeFieldBegin('msin', TType.STRING, 3)
            oprot.writeString(self.msin.encode('utf-8') if sys.version_info[0] == 2 else self.msin)
            oprot.writeFieldEnd()
        if self.irmcode is not None:
            oprot.writeFieldBegin('irmcode', TType.STRING, 4)
            oprot.writeString(self.irmcode.encode('utf-8') if sys.version_info[0] == 2 else self.irmcode)
            oprot.writeFieldEnd()
        if self.ehplmnMcc is not None:
            oprot.writeFieldBegin('ehplmnMcc', TType.STRING, 5)
            oprot.writeString(self.ehplmnMcc.encode('utf-8') if sys.version_info[0] == 2 else self.ehplmnMcc)
            oprot.writeFieldEnd()
        if self.ehplmnMnc is not None:
            oprot.writeFieldBegin('ehplmnMnc', TType.STRING, 6)
            oprot.writeString(self.ehplmnMnc.encode('utf-8') if sys.version_info[0] == 2 else self.ehplmnMnc)
            oprot.writeFieldEnd()
        if self.imsi6 is not None:
            oprot.writeFieldBegin('imsi6', TType.STRING, 7)
            oprot.writeString(self.imsi6.encode('utf-8') if sys.version_info[0] == 2 else self.imsi6)
            oprot.writeFieldEnd()
        if self.imsi7 is not None:
            oprot.writeFieldBegin('imsi7', TType.STRING, 8)
            oprot.writeString(self.imsi7.encode('utf-8') if sys.version_info[0] == 2 else self.imsi7)
            oprot.writeFieldEnd()
        if self.spn is not None:
            oprot.writeFieldBegin('spn', TType.STRING, 9)
            oprot.writeString(self.spn.encode('utf-8') if sys.version_info[0] == 2 else self.spn)
            oprot.writeFieldEnd()
        if self.iccid is not None:
            oprot.writeFieldBegin('iccid', TType.STRING, 10)
            oprot.writeString(self.iccid.encode('utf-8') if sys.version_info[0] == 2 else self.iccid)
            oprot.writeFieldEnd()
        if self.gid1List is not None:
            oprot.writeFieldBegin('gid1List', TType.LIST, 11)
            oprot.writeListBegin(TType.BYTE, len(self.gid1List))
            for iter19 in self.gid1List:
                oprot.writeByte(iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gid2List is not None:
            oprot.writeFieldBegin('gid2List', TType.LIST, 12)
            oprot.writeListBegin(TType.BYTE, len(self.gid2List))
            for iter20 in self.gid2List:
                oprot.writeByte(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockDataConfigurationExt(object):
    """
    Attributes:
     - simlockType
     - mcc
     - mnc
     - msin
     - irmcode
     - ehplmnMcc
     - ehplmnMnc
     - imsi6
     - imsi7
     - spn
     - iccid
     - gid1List
     - gid2List
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'simlockType', None, None, ),  # 1
        (2, TType.STRING, 'mcc', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'mnc', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'msin', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'irmcode', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'ehplmnMcc', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'ehplmnMnc', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'imsi6', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'imsi7', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'spn', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'iccid', 'UTF8', None, ),  # 11
        (12, TType.LIST, 'gid1List', (TType.BYTE, None, False), None, ),  # 12
        (13, TType.LIST, 'gid2List', (TType.BYTE, None, False), None, ),  # 13
    )

    def __init__(self, simlockType=None, mcc=None, mnc=None, msin=None, irmcode=None, ehplmnMcc=None, ehplmnMnc=None, imsi6=None, imsi7=None, spn=None, iccid=None, gid1List=None, gid2List=None,):
        self.simlockType = simlockType
        self.mcc = mcc
        self.mnc = mnc
        self.msin = msin
        self.irmcode = irmcode
        self.ehplmnMcc = ehplmnMcc
        self.ehplmnMnc = ehplmnMnc
        self.imsi6 = imsi6
        self.imsi7 = imsi7
        self.spn = spn
        self.iccid = iccid
        self.gid1List = gid1List
        self.gid2List = gid2List

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.simlockType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mcc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mnc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.msin = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.irmcode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ehplmnMcc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.ehplmnMnc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.imsi6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.imsi7 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.spn = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.iccid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.gid1List = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readByte()
                        self.gid1List.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.gid2List = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = iprot.readByte()
                        self.gid2List.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockDataConfigurationExt')
        if self.simlockType is not None:
            oprot.writeFieldBegin('simlockType', TType.I32, 1)
            oprot.writeI32(self.simlockType)
            oprot.writeFieldEnd()
        if self.mcc is not None:
            oprot.writeFieldBegin('mcc', TType.STRING, 2)
            oprot.writeString(self.mcc.encode('utf-8') if sys.version_info[0] == 2 else self.mcc)
            oprot.writeFieldEnd()
        if self.mnc is not None:
            oprot.writeFieldBegin('mnc', TType.STRING, 3)
            oprot.writeString(self.mnc.encode('utf-8') if sys.version_info[0] == 2 else self.mnc)
            oprot.writeFieldEnd()
        if self.msin is not None:
            oprot.writeFieldBegin('msin', TType.STRING, 4)
            oprot.writeString(self.msin.encode('utf-8') if sys.version_info[0] == 2 else self.msin)
            oprot.writeFieldEnd()
        if self.irmcode is not None:
            oprot.writeFieldBegin('irmcode', TType.STRING, 5)
            oprot.writeString(self.irmcode.encode('utf-8') if sys.version_info[0] == 2 else self.irmcode)
            oprot.writeFieldEnd()
        if self.ehplmnMcc is not None:
            oprot.writeFieldBegin('ehplmnMcc', TType.STRING, 6)
            oprot.writeString(self.ehplmnMcc.encode('utf-8') if sys.version_info[0] == 2 else self.ehplmnMcc)
            oprot.writeFieldEnd()
        if self.ehplmnMnc is not None:
            oprot.writeFieldBegin('ehplmnMnc', TType.STRING, 7)
            oprot.writeString(self.ehplmnMnc.encode('utf-8') if sys.version_info[0] == 2 else self.ehplmnMnc)
            oprot.writeFieldEnd()
        if self.imsi6 is not None:
            oprot.writeFieldBegin('imsi6', TType.STRING, 8)
            oprot.writeString(self.imsi6.encode('utf-8') if sys.version_info[0] == 2 else self.imsi6)
            oprot.writeFieldEnd()
        if self.imsi7 is not None:
            oprot.writeFieldBegin('imsi7', TType.STRING, 9)
            oprot.writeString(self.imsi7.encode('utf-8') if sys.version_info[0] == 2 else self.imsi7)
            oprot.writeFieldEnd()
        if self.spn is not None:
            oprot.writeFieldBegin('spn', TType.STRING, 10)
            oprot.writeString(self.spn.encode('utf-8') if sys.version_info[0] == 2 else self.spn)
            oprot.writeFieldEnd()
        if self.iccid is not None:
            oprot.writeFieldBegin('iccid', TType.STRING, 11)
            oprot.writeString(self.iccid.encode('utf-8') if sys.version_info[0] == 2 else self.iccid)
            oprot.writeFieldEnd()
        if self.gid1List is not None:
            oprot.writeFieldBegin('gid1List', TType.LIST, 12)
            oprot.writeListBegin(TType.BYTE, len(self.gid1List))
            for iter33 in self.gid1List:
                oprot.writeByte(iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gid2List is not None:
            oprot.writeFieldBegin('gid2List', TType.LIST, 13)
            oprot.writeListBegin(TType.BYTE, len(self.gid2List))
            for iter34 in self.gid2List:
                oprot.writeByte(iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockLockResponse(object):
    """
    Attributes:
     - errorType
     - simlockErrorType
     - simlockSlotPolicy
     - simlockSubscriptionPolicy
     - simlockSlotWithLockInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'simlockErrorType', (SimlockErrorType, SimlockErrorType.thrift_spec), None, ),  # 2
        (3, TType.I32, 'simlockSlotPolicy', None, None, ),  # 3
        (4, TType.I32, 'simlockSubscriptionPolicy', None, None, ),  # 4
        (5, TType.MAP, 'simlockSlotWithLockInfo', (TType.I32, None, TType.LIST, (TType.STRUCT, (SimlockLockInfo, SimlockLockInfo.thrift_spec), False), False), None, ),  # 5
    )

    def __init__(self, errorType=None, simlockErrorType=None, simlockSlotPolicy=None, simlockSubscriptionPolicy=None, simlockSlotWithLockInfo=None,):
        self.errorType = errorType
        self.simlockErrorType = simlockErrorType
        self.simlockSlotPolicy = simlockSlotPolicy
        self.simlockSubscriptionPolicy = simlockSubscriptionPolicy
        self.simlockSlotWithLockInfo = simlockSlotWithLockInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.simlockErrorType = SimlockErrorType()
                    self.simlockErrorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.simlockSlotPolicy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.simlockSubscriptionPolicy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.simlockSlotWithLockInfo = {}
                    (_ktype36, _vtype37, _size35) = iprot.readMapBegin()
                    for _i39 in range(_size35):
                        _key40 = iprot.readI32()
                        _val41 = []
                        (_etype45, _size42) = iprot.readListBegin()
                        for _i46 in range(_size42):
                            _elem47 = SimlockLockInfo()
                            _elem47.read(iprot)
                            _val41.append(_elem47)
                        iprot.readListEnd()
                        self.simlockSlotWithLockInfo[_key40] = _val41
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockLockResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockErrorType is not None:
            oprot.writeFieldBegin('simlockErrorType', TType.STRUCT, 2)
            self.simlockErrorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockSlotPolicy is not None:
            oprot.writeFieldBegin('simlockSlotPolicy', TType.I32, 3)
            oprot.writeI32(self.simlockSlotPolicy)
            oprot.writeFieldEnd()
        if self.simlockSubscriptionPolicy is not None:
            oprot.writeFieldBegin('simlockSubscriptionPolicy', TType.I32, 4)
            oprot.writeI32(self.simlockSubscriptionPolicy)
            oprot.writeFieldEnd()
        if self.simlockSlotWithLockInfo is not None:
            oprot.writeFieldBegin('simlockSlotWithLockInfo', TType.MAP, 5)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.simlockSlotWithLockInfo))
            for kiter48, viter49 in self.simlockSlotWithLockInfo.items():
                oprot.writeI32(kiter48)
                oprot.writeListBegin(TType.STRUCT, len(viter49))
                for iter50 in viter49:
                    iter50.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockCommonResponse(object):
    """
    Attributes:
     - errorType
     - simlockErrorType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'simlockErrorType', (SimlockErrorType, SimlockErrorType.thrift_spec), None, ),  # 2
    )

    def __init__(self, errorType=None, simlockErrorType=None,):
        self.errorType = errorType
        self.simlockErrorType = simlockErrorType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.simlockErrorType = SimlockErrorType()
                    self.simlockErrorType.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockCommonResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockErrorType is not None:
            oprot.writeFieldBegin('simlockErrorType', TType.STRUCT, 2)
            self.simlockErrorType.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockUnlockResponse(object):
    """
    Attributes:
     - errorType
     - simlockErrorType
     - numOfRetriesAttempted
     - numOfRetriesAllowed
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'simlockErrorType', (SimlockErrorType, SimlockErrorType.thrift_spec), None, ),  # 2
        (3, TType.I32, 'numOfRetriesAttempted', None, None, ),  # 3
        (4, TType.I32, 'numOfRetriesAllowed', None, None, ),  # 4
    )

    def __init__(self, errorType=None, simlockErrorType=None, numOfRetriesAttempted=None, numOfRetriesAllowed=None,):
        self.errorType = errorType
        self.simlockErrorType = simlockErrorType
        self.numOfRetriesAttempted = numOfRetriesAttempted
        self.numOfRetriesAllowed = numOfRetriesAllowed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.simlockErrorType = SimlockErrorType()
                    self.simlockErrorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numOfRetriesAttempted = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.numOfRetriesAllowed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockUnlockResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockErrorType is not None:
            oprot.writeFieldBegin('simlockErrorType', TType.STRUCT, 2)
            self.simlockErrorType.write(oprot)
            oprot.writeFieldEnd()
        if self.numOfRetriesAttempted is not None:
            oprot.writeFieldBegin('numOfRetriesAttempted', TType.I32, 3)
            oprot.writeI32(self.numOfRetriesAttempted)
            oprot.writeFieldEnd()
        if self.numOfRetriesAllowed is not None:
            oprot.writeFieldBegin('numOfRetriesAllowed', TType.I32, 4)
            oprot.writeI32(self.numOfRetriesAllowed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockCategoryDataResponse(object):
    """
    Attributes:
     - errorType
     - simlockErrorType
     - simlockDataConfigurations
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'simlockErrorType', (SimlockErrorType, SimlockErrorType.thrift_spec), None, ),  # 2
        (3, TType.LIST, 'simlockDataConfigurations', (TType.STRUCT, (SimlockDataConfiguration, SimlockDataConfiguration.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, errorType=None, simlockErrorType=None, simlockDataConfigurations=None,):
        self.errorType = errorType
        self.simlockErrorType = simlockErrorType
        self.simlockDataConfigurations = simlockDataConfigurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.simlockErrorType = SimlockErrorType()
                    self.simlockErrorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.simlockDataConfigurations = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = SimlockDataConfiguration()
                        _elem56.read(iprot)
                        self.simlockDataConfigurations.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockCategoryDataResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockErrorType is not None:
            oprot.writeFieldBegin('simlockErrorType', TType.STRUCT, 2)
            self.simlockErrorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockDataConfigurations is not None:
            oprot.writeFieldBegin('simlockDataConfigurations', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.simlockDataConfigurations))
            for iter57 in self.simlockDataConfigurations:
                iter57.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockCategoryDataByteResponse(object):
    """
    Attributes:
     - errorType
     - simlockErrorType
     - simlockDataByteConfigurations
     - numOfCodes
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'simlockErrorType', (SimlockErrorType, SimlockErrorType.thrift_spec), None, ),  # 2
        (3, TType.LIST, 'simlockDataByteConfigurations', (TType.BYTE, None, False), None, ),  # 3
        (4, TType.BYTE, 'numOfCodes', None, None, ),  # 4
    )

    def __init__(self, errorType=None, simlockErrorType=None, simlockDataByteConfigurations=None, numOfCodes=None,):
        self.errorType = errorType
        self.simlockErrorType = simlockErrorType
        self.simlockDataByteConfigurations = simlockDataByteConfigurations
        self.numOfCodes = numOfCodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.simlockErrorType = SimlockErrorType()
                    self.simlockErrorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.simlockDataByteConfigurations = []
                    (_etype61, _size58) = iprot.readListBegin()
                    for _i62 in range(_size58):
                        _elem63 = iprot.readByte()
                        self.simlockDataByteConfigurations.append(_elem63)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.numOfCodes = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockCategoryDataByteResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockErrorType is not None:
            oprot.writeFieldBegin('simlockErrorType', TType.STRUCT, 2)
            self.simlockErrorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockDataByteConfigurations is not None:
            oprot.writeFieldBegin('simlockDataByteConfigurations', TType.LIST, 3)
            oprot.writeListBegin(TType.BYTE, len(self.simlockDataByteConfigurations))
            for iter64 in self.simlockDataByteConfigurations:
                oprot.writeByte(iter64)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.numOfCodes is not None:
            oprot.writeFieldBegin('numOfCodes', TType.BYTE, 4)
            oprot.writeByte(self.numOfCodes)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockCategoryDataExtResponse(object):
    """
    Attributes:
     - errorType
     - simlockErrorType
     - simlockDataConfigurationExts
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'errorType', (Common.ttypes.ErrorType, Common.ttypes.ErrorType.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'simlockErrorType', (SimlockErrorType, SimlockErrorType.thrift_spec), None, ),  # 2
        (3, TType.LIST, 'simlockDataConfigurationExts', (TType.STRUCT, (SimlockDataConfigurationExt, SimlockDataConfigurationExt.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, errorType=None, simlockErrorType=None, simlockDataConfigurationExts=None,):
        self.errorType = errorType
        self.simlockErrorType = simlockErrorType
        self.simlockDataConfigurationExts = simlockDataConfigurationExts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.errorType = Common.ttypes.ErrorType()
                    self.errorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.simlockErrorType = SimlockErrorType()
                    self.simlockErrorType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.simlockDataConfigurationExts = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = SimlockDataConfigurationExt()
                        _elem70.read(iprot)
                        self.simlockDataConfigurationExts.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockCategoryDataExtResponse')
        if self.errorType is not None:
            oprot.writeFieldBegin('errorType', TType.STRUCT, 1)
            self.errorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockErrorType is not None:
            oprot.writeFieldBegin('simlockErrorType', TType.STRUCT, 2)
            self.simlockErrorType.write(oprot)
            oprot.writeFieldEnd()
        if self.simlockDataConfigurationExts is not None:
            oprot.writeFieldBegin('simlockDataConfigurationExts', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.simlockDataConfigurationExts))
            for iter71 in self.simlockDataConfigurationExts:
                iter71.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimlockOptions(object):
    """
    Attributes:
     - simlockSlot
     - simlockSlotPolicy
     - SimlockSubscriptionPolicy
     - simlockCategory
     - simlockDataConfigurations
     - simlockAutoLock
     - simlockBlackList
     - simlockXmlPaired
     - simlockXmlValuePriority
     - ckData
     - hckData
     - saltData
     - numOfRetries
     - numOfIterations
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'simlockSlot', None, None, ),  # 1
        (2, TType.I32, 'simlockSlotPolicy', None, None, ),  # 2
        (3, TType.I32, 'SimlockSubscriptionPolicy', None, None, ),  # 3
        (4, TType.I32, 'simlockCategory', None, None, ),  # 4
        (5, TType.LIST, 'simlockDataConfigurations', (TType.STRUCT, (SimlockDataConfiguration, SimlockDataConfiguration.thrift_spec), False), None, ),  # 5
        (6, TType.I32, 'simlockAutoLock', None, None, ),  # 6
        (7, TType.I32, 'simlockBlackList', None, None, ),  # 7
        (8, TType.I32, 'simlockXmlPaired', None, None, ),  # 8
        (9, TType.I32, 'simlockXmlValuePriority', None, None, ),  # 9
        (10, TType.STRING, 'ckData', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'hckData', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'saltData', 'UTF8', None, ),  # 12
        (13, TType.I32, 'numOfRetries', None, None, ),  # 13
        (14, TType.I32, 'numOfIterations', None, None, ),  # 14
    )

    def __init__(self, simlockSlot=None, simlockSlotPolicy=None, SimlockSubscriptionPolicy=None, simlockCategory=None, simlockDataConfigurations=None, simlockAutoLock=None, simlockBlackList=None, simlockXmlPaired=None, simlockXmlValuePriority=None, ckData=None, hckData=None, saltData=None, numOfRetries=None, numOfIterations=None,):
        self.simlockSlot = simlockSlot
        self.simlockSlotPolicy = simlockSlotPolicy
        self.SimlockSubscriptionPolicy = SimlockSubscriptionPolicy
        self.simlockCategory = simlockCategory
        self.simlockDataConfigurations = simlockDataConfigurations
        self.simlockAutoLock = simlockAutoLock
        self.simlockBlackList = simlockBlackList
        self.simlockXmlPaired = simlockXmlPaired
        self.simlockXmlValuePriority = simlockXmlValuePriority
        self.ckData = ckData
        self.hckData = hckData
        self.saltData = saltData
        self.numOfRetries = numOfRetries
        self.numOfIterations = numOfIterations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.simlockSlot = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.simlockSlotPolicy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.SimlockSubscriptionPolicy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.simlockCategory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.simlockDataConfigurations = []
                    (_etype75, _size72) = iprot.readListBegin()
                    for _i76 in range(_size72):
                        _elem77 = SimlockDataConfiguration()
                        _elem77.read(iprot)
                        self.simlockDataConfigurations.append(_elem77)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.simlockAutoLock = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.simlockBlackList = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.simlockXmlPaired = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.simlockXmlValuePriority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.ckData = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.hckData = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.saltData = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.numOfRetries = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.numOfIterations = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('SimlockOptions')
        if self.simlockSlot is not None:
            oprot.writeFieldBegin('simlockSlot', TType.I32, 1)
            oprot.writeI32(self.simlockSlot)
            oprot.writeFieldEnd()
        if self.simlockSlotPolicy is not None:
            oprot.writeFieldBegin('simlockSlotPolicy', TType.I32, 2)
            oprot.writeI32(self.simlockSlotPolicy)
            oprot.writeFieldEnd()
        if self.SimlockSubscriptionPolicy is not None:
            oprot.writeFieldBegin('SimlockSubscriptionPolicy', TType.I32, 3)
            oprot.writeI32(self.SimlockSubscriptionPolicy)
            oprot.writeFieldEnd()
        if self.simlockCategory is not None:
            oprot.writeFieldBegin('simlockCategory', TType.I32, 4)
            oprot.writeI32(self.simlockCategory)
            oprot.writeFieldEnd()
        if self.simlockDataConfigurations is not None:
            oprot.writeFieldBegin('simlockDataConfigurations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.simlockDataConfigurations))
            for iter78 in self.simlockDataConfigurations:
                iter78.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.simlockAutoLock is not None:
            oprot.writeFieldBegin('simlockAutoLock', TType.I32, 6)
            oprot.writeI32(self.simlockAutoLock)
            oprot.writeFieldEnd()
        if self.simlockBlackList is not None:
            oprot.writeFieldBegin('simlockBlackList', TType.I32, 7)
            oprot.writeI32(self.simlockBlackList)
            oprot.writeFieldEnd()
        if self.simlockXmlPaired is not None:
            oprot.writeFieldBegin('simlockXmlPaired', TType.I32, 8)
            oprot.writeI32(self.simlockXmlPaired)
            oprot.writeFieldEnd()
        if self.simlockXmlValuePriority is not None:
            oprot.writeFieldBegin('simlockXmlValuePriority', TType.I32, 9)
            oprot.writeI32(self.simlockXmlValuePriority)
            oprot.writeFieldEnd()
        if self.ckData is not None:
            oprot.writeFieldBegin('ckData', TType.STRING, 10)
            oprot.writeString(self.ckData.encode('utf-8') if sys.version_info[0] == 2 else self.ckData)
            oprot.writeFieldEnd()
        if self.hckData is not None:
            oprot.writeFieldBegin('hckData', TType.STRING, 11)
            oprot.writeString(self.hckData.encode('utf-8') if sys.version_info[0] == 2 else self.hckData)
            oprot.writeFieldEnd()
        if self.saltData is not None:
            oprot.writeFieldBegin('saltData', TType.STRING, 12)
            oprot.writeString(self.saltData.encode('utf-8') if sys.version_info[0] == 2 else self.saltData)
            oprot.writeFieldEnd()
        if self.numOfRetries is not None:
            oprot.writeFieldBegin('numOfRetries', TType.I32, 13)
            oprot.writeI32(self.numOfRetries)
            oprot.writeFieldEnd()
        if self.numOfIterations is not None:
            oprot.writeFieldBegin('numOfIterations', TType.I32, 14)
            oprot.writeI32(self.numOfIterations)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
