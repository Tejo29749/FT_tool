#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes

from thrift.transport import TTransport
all_structs = []


class Subsystem(object):
    MPSS = 2098
    APP = 553
    LPASS = 3615
    SLPI = 6705
    CDSP = 9253
    NPU = 9764
    AUDIO = 103
    SENSOR = 104
    WLAN = 107
    CHARGER = 119

    _VALUES_TO_NAMES = {
        2098: "MPSS",
        553: "APP",
        3615: "LPASS",
        6705: "SLPI",
        9253: "CDSP",
        9764: "NPU",
        103: "AUDIO",
        104: "SENSOR",
        107: "WLAN",
        119: "CHARGER",
    }

    _NAMES_TO_VALUES = {
        "MPSS": 2098,
        "APP": 553,
        "LPASS": 3615,
        "SLPI": 6705,
        "CDSP": 9253,
        "NPU": 9764,
        "AUDIO": 103,
        "SENSOR": 104,
        "WLAN": 107,
        "CHARGER": 119,
    }


class HealthReportConfigureStatus(object):
    INVALID_STATUS = -1
    SUCCESS = 0
    UNABLE_TO_GENERATE_REQUESTED_HEALTH_REPORT = 1
    INVALID_TIMER_UNIT = 2
    ERROR_SETTING_TIMER = 3
    TIMER_UPDATED_BUT_TIMER_NOT_ENABLED_DUE_TO_LOG_MASK = 4

    _VALUES_TO_NAMES = {
        -1: "INVALID_STATUS",
        0: "SUCCESS",
        1: "UNABLE_TO_GENERATE_REQUESTED_HEALTH_REPORT",
        2: "INVALID_TIMER_UNIT",
        3: "ERROR_SETTING_TIMER",
        4: "TIMER_UPDATED_BUT_TIMER_NOT_ENABLED_DUE_TO_LOG_MASK",
    }

    _NAMES_TO_VALUES = {
        "INVALID_STATUS": -1,
        "SUCCESS": 0,
        "UNABLE_TO_GENERATE_REQUESTED_HEALTH_REPORT": 1,
        "INVALID_TIMER_UNIT": 2,
        "ERROR_SETTING_TIMER": 3,
        "TIMER_UPDATED_BUT_TIMER_NOT_ENABLED_DUE_TO_LOG_MASK": 4,
    }


class DiagConnectionOptions(object):
    """
    Attributes:
     - protocolHandle
     - openQdssPort
     - enableDefaultQdssConfiguration
     - enableHdlcOnly
     - enableMbnDownload

    """


    def __init__(self, protocolHandle=None, openQdssPort=None, enableDefaultQdssConfiguration=None, enableHdlcOnly=None, enableMbnDownload=None,):
        self.protocolHandle = protocolHandle
        self.openQdssPort = openQdssPort
        self.enableDefaultQdssConfiguration = enableDefaultQdssConfiguration
        self.enableHdlcOnly = enableHdlcOnly
        self.enableMbnDownload = enableMbnDownload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.protocolHandle = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.openQdssPort = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.enableDefaultQdssConfiguration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.enableHdlcOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.enableMbnDownload = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagConnectionOptions')
        if self.protocolHandle is not None:
            oprot.writeFieldBegin('protocolHandle', TType.I64, 1)
            oprot.writeI64(self.protocolHandle)
            oprot.writeFieldEnd()
        if self.openQdssPort is not None:
            oprot.writeFieldBegin('openQdssPort', TType.BOOL, 2)
            oprot.writeBool(self.openQdssPort)
            oprot.writeFieldEnd()
        if self.enableDefaultQdssConfiguration is not None:
            oprot.writeFieldBegin('enableDefaultQdssConfiguration', TType.BOOL, 3)
            oprot.writeBool(self.enableDefaultQdssConfiguration)
            oprot.writeFieldEnd()
        if self.enableHdlcOnly is not None:
            oprot.writeFieldBegin('enableHdlcOnly', TType.BOOL, 4)
            oprot.writeBool(self.enableHdlcOnly)
            oprot.writeFieldEnd()
        if self.enableMbnDownload is not None:
            oprot.writeFieldBegin('enableMbnDownload', TType.BOOL, 5)
            oprot.writeBool(self.enableMbnDownload)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataQueuePacket(object):
    """
    Attributes:
     - diagPacket
     - annotationPacket

    """


    def __init__(self, diagPacket=None, annotationPacket=None,):
        self.diagPacket = diagPacket
        self.annotationPacket = annotationPacket

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.diagPacket = Common.ttypes.DiagPacket()
                    self.diagPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.annotationPacket = Common.ttypes.AnnotationPacket()
                    self.annotationPacket.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataQueuePacket')
        if self.diagPacket is not None:
            oprot.writeFieldBegin('diagPacket', TType.STRUCT, 1)
            self.diagPacket.write(oprot)
            oprot.writeFieldEnd()
        if self.annotationPacket is not None:
            oprot.writeFieldBegin('annotationPacket', TType.STRUCT, 2)
            self.annotationPacket.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AttestationParams(object):
    """
    Attributes:
     - outputFolder
     - nonce
     - token

    """


    def __init__(self, outputFolder=None, nonce=None, token=None,):
        self.outputFolder = outputFolder
        self.nonce = nonce
        self.token = token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.outputFolder = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nonce = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AttestationParams')
        if self.outputFolder is not None:
            oprot.writeFieldBegin('outputFolder', TType.STRING, 1)
            oprot.writeString(self.outputFolder.encode('utf-8') if sys.version_info[0] == 2 else self.outputFolder)
            oprot.writeFieldEnd()
        if self.nonce is not None:
            oprot.writeFieldBegin('nonce', TType.STRING, 2)
            oprot.writeString(self.nonce.encode('utf-8') if sys.version_info[0] == 2 else self.nonce)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 3)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InstallLicenseParams(object):
    """
    Attributes:
     - path

    """


    def __init__(self, path=None,):
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InstallLicenseParams')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RemoveLicenseParams(object):
    """
    Attributes:
     - licenseSerialNumber

    """


    def __init__(self, licenseSerialNumber=None,):
        self.licenseSerialNumber = licenseSerialNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.licenseSerialNumber = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RemoveLicenseParams')
        if self.licenseSerialNumber is not None:
            oprot.writeFieldBegin('licenseSerialNumber', TType.STRING, 1)
            oprot.writeString(self.licenseSerialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.licenseSerialNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoggingMaskOptions(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoggingMaskOptions')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SetHypervisorConfiguration(object):
    """
    Attributes:
     - defaultDiagid

    """


    def __init__(self, defaultDiagid=None,):
        self.defaultDiagid = defaultDiagid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.defaultDiagid = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetHypervisorConfiguration')
        if self.defaultDiagid is not None:
            oprot.writeFieldBegin('defaultDiagid', TType.BYTE, 1)
            oprot.writeByte(self.defaultDiagid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommandHypervisorConfiguration(object):
    """
    Attributes:
     - diagIds
     - processorNames

    """


    def __init__(self, diagIds=None, processorNames=None,):
        self.diagIds = diagIds
        self.processorNames = processorNames

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.diagIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readByte()
                        self.diagIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.processorNames = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.processorNames.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CommandHypervisorConfiguration')
        if self.diagIds is not None:
            oprot.writeFieldBegin('diagIds', TType.LIST, 1)
            oprot.writeListBegin(TType.BYTE, len(self.diagIds))
            for iter12 in self.diagIds:
                oprot.writeByte(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.processorNames is not None:
            oprot.writeFieldBegin('processorNames', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.processorNames))
            for iter13 in self.processorNames:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommandRawRequest(object):
    """
    Attributes:
     - request

    """


    def __init__(self, request=None,):
        self.request = request

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.request = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CommandRawRequest')
        if self.request is not None:
            oprot.writeFieldBegin('request', TType.STRING, 1)
            oprot.writeBinary(self.request)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommandRequest(object):
    """
    Attributes:
     - requestType
     - requestIdOrName
     - fieldList

    """


    def __init__(self, requestType=None, requestIdOrName=None, fieldList=None,):
        self.requestType = requestType
        self.requestIdOrName = requestIdOrName
        self.fieldList = fieldList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requestType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestIdOrName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fieldList = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CommandRequest')
        if self.requestType is not None:
            oprot.writeFieldBegin('requestType', TType.I32, 1)
            oprot.writeI32(self.requestType)
            oprot.writeFieldEnd()
        if self.requestIdOrName is not None:
            oprot.writeFieldBegin('requestIdOrName', TType.STRING, 2)
            oprot.writeString(self.requestIdOrName.encode('utf-8') if sys.version_info[0] == 2 else self.requestIdOrName)
            oprot.writeFieldEnd()
        if self.fieldList is not None:
            oprot.writeFieldBegin('fieldList', TType.STRING, 3)
            oprot.writeString(self.fieldList.encode('utf-8') if sys.version_info[0] == 2 else self.fieldList)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommandOptions(object):
    """
    Attributes:
     - returnConfig
     - timeout
     - commandHypervisorConfiguration

    """


    def __init__(self, returnConfig=None, timeout=None, commandHypervisorConfiguration=None,):
        self.returnConfig = returnConfig
        self.timeout = timeout
        self.commandHypervisorConfiguration = commandHypervisorConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.returnConfig = Common.ttypes.DiagReturns()
                    self.returnConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.commandHypervisorConfiguration = CommandHypervisorConfiguration()
                    self.commandHypervisorConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CommandOptions')
        if self.returnConfig is not None:
            oprot.writeFieldBegin('returnConfig', TType.STRUCT, 1)
            self.returnConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 2)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.commandHypervisorConfiguration is not None:
            oprot.writeFieldBegin('commandHypervisorConfiguration', TType.STRUCT, 3)
            self.commandHypervisorConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagIdSyncCommandResponse(object):
    """
    Attributes:
     - diagId
     - diagpacket

    """


    def __init__(self, diagId=None, diagpacket=None,):
        self.diagId = diagId
        self.diagpacket = diagpacket

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.diagId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.diagpacket = Common.ttypes.DiagPacket()
                    self.diagpacket.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagIdSyncCommandResponse')
        if self.diagId is not None:
            oprot.writeFieldBegin('diagId', TType.I32, 1)
            oprot.writeI32(self.diagId)
            oprot.writeFieldEnd()
        if self.diagpacket is not None:
            oprot.writeFieldBegin('diagpacket', TType.STRUCT, 2)
            self.diagpacket.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiagIdAsyncCommandResponse(object):
    """
    Attributes:
     - diagId
     - transactionId

    """


    def __init__(self, diagId=None, transactionId=None,):
        self.diagId = diagId
        self.transactionId = transactionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.diagId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.transactionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiagIdAsyncCommandResponse')
        if self.diagId is not None:
            oprot.writeFieldBegin('diagId', TType.I32, 1)
            oprot.writeI32(self.diagId)
            oprot.writeFieldEnd()
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.I64, 2)
            oprot.writeI64(self.transactionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DiagConnectionOptions)
DiagConnectionOptions.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'protocolHandle', None, None, ),  # 1
    (2, TType.BOOL, 'openQdssPort', None, None, ),  # 2
    (3, TType.BOOL, 'enableDefaultQdssConfiguration', None, None, ),  # 3
    (4, TType.BOOL, 'enableHdlcOnly', None, None, ),  # 4
    (5, TType.BOOL, 'enableMbnDownload', None, None, ),  # 5
)
all_structs.append(DataQueuePacket)
DataQueuePacket.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'diagPacket', [Common.ttypes.DiagPacket, None], None, ),  # 1
    (2, TType.STRUCT, 'annotationPacket', [Common.ttypes.AnnotationPacket, None], None, ),  # 2
)
all_structs.append(AttestationParams)
AttestationParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'outputFolder', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nonce', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'token', 'UTF8', None, ),  # 3
)
all_structs.append(InstallLicenseParams)
InstallLicenseParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
)
all_structs.append(RemoveLicenseParams)
RemoveLicenseParams.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'licenseSerialNumber', 'UTF8', None, ),  # 1
)
all_structs.append(LoggingMaskOptions)
LoggingMaskOptions.thrift_spec = (
)
all_structs.append(SetHypervisorConfiguration)
SetHypervisorConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'defaultDiagid', None, None, ),  # 1
)
all_structs.append(CommandHypervisorConfiguration)
CommandHypervisorConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'diagIds', (TType.BYTE, None, False), None, ),  # 1
    (2, TType.LIST, 'processorNames', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(CommandRawRequest)
CommandRawRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'request', 'BINARY', None, ),  # 1
)
all_structs.append(CommandRequest)
CommandRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requestType', None, None, ),  # 1
    (2, TType.STRING, 'requestIdOrName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'fieldList', 'UTF8', None, ),  # 3
)
all_structs.append(CommandOptions)
CommandOptions.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'returnConfig', [Common.ttypes.DiagReturns, None], None, ),  # 1
    (2, TType.I32, 'timeout', None, None, ),  # 2
    (3, TType.STRUCT, 'commandHypervisorConfiguration', [CommandHypervisorConfiguration, None], None, ),  # 3
)
all_structs.append(DiagIdSyncCommandResponse)
DiagIdSyncCommandResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'diagId', None, None, ),  # 1
    (2, TType.STRUCT, 'diagpacket', [Common.ttypes.DiagPacket, None], None, ),  # 2
)
all_structs.append(DiagIdAsyncCommandResponse)
DiagIdAsyncCommandResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'diagId', None, None, ),  # 1
    (2, TType.I64, 'transactionId', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
