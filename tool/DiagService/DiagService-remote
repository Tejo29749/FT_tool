#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from DiagService import DiagService
from DiagService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ErrorType getLastError()')
    print('  i64 getDevice()')
    print('  ErrorCode initializeService()')
    print('  ErrorCode initializeServiceByProtocol(i64 protocolHandle)')
    print('  ErrorCode initializeServiceWithOptions(DiagConnectionOptions diagConnectionOptions)')
    print('  ErrorCode destroyService()')
    print('  DiagPacket sendRawRequest(string request, DiagReturns returnConfig, i32 timeout)')
    print('  i64 sendRawRequestAsync(string request)')
    print('  DiagPacket sendRequest(DiagPacketType requestType, string requestIdOrName, string fieldList, DiagReturns returnConfig, i32 timeout)')
    print('  i64 sendRequestAsync(DiagPacketType requestType, string requestIdOrName, string fieldList)')
    print('  DiagPacket getResponseAsync(i64 transactionId, DiagReturns returnConfig, i32 timeout)')
    print('   getAllResponsesAsync(i64 transactionId, DiagReturns returnConfig, i32 timeout)')
    print('  ErrorCode createDataQueue(string queueName, DiagPacketFilter filter, DiagReturnConfig returnConfig)')
    print('  ErrorCode createDataQueueWithAnnotations(string queueName, DiagPacketFilter filter, AnnotationPacketFilter annotationsFilter, DiagReturnConfig returnConfig)')
    print('  ErrorCode removeDataQueue(string queueName)')
    print('  ErrorCode clearDataQueue(string queueName)')
    print('   getDataQueueItems(string queueName, i32 count, i32 timeout)')
    print('   getDataQueueItemsWithAnnotations(string queueName, i32 count, i32 timeout)')
    print('  ErrorCode addDataQueueFilter(string queueName, DiagPacketFilter filter)')
    print('  ErrorCode removeDataQueueFilter(string queueName, DiagPacketFilter filter)')
    print('  ErrorCode setLoggingMask(string maskFileContent, LogMaskFormat format)')
    print('  QShrink4DownloadState getQShrinkState()')
    print('  void loadQShrinkFile(string pathName)')
    print('  ErrorCode setWcdmaProtocolRevision(WcdmaProtocolRevision revision)')
    print('  ErrorCode setCdmaProtocolRevision(CdmaProtocolRevision revision)')
    print('  ErrorCode setPilotInc(i16 pilotInc)')
    print('  ErrorCode setLoggingMaskFromFilter(DiagPacketFilter filter)')
    print('  DiagPacketFilter getLoggingMask(LoggingMaskOptions loggingMaskOptions)')
    print('  HealthReportConfigureStatus resetHealthReportCounters(Subsystem subsystem)')
    print('  HealthReportConfigureStatus setHealthReportTimer(Subsystem subsystem, i32 timer)')
    print('  ErrorCode generateAttestationReport(AttestationParams attestationParams)')
    print('  ErrorCode installLicense(InstallLicenseParams installParams)')
    print('  ErrorCode removeLicense(RemoveLicenseParams removeParams)')
    print('  ErrorCode enableRestrictedLogLicenseInstall(bool enable)')
    print('  RestrictedLogLicenseStatus getRestrictedLogLicenseStatus()')
    print('  HypervisorConfiguration getHypervisorConfiguration()')
    print('   sendRawRequestWithOptions(CommandRawRequest commandRawRequest, CommandOptions commandOptions)')
    print('   sendRawRequestAsyncWithOptions(CommandRawRequest commandRawRequest, CommandOptions commandOptions)')
    print('   sendRequestWithOptions(CommandRequest commandRequest, CommandOptions commandOptions)')
    print('   sendRequestAsyncWithOptions(CommandRequest commandRequest, CommandOptions commandOptions)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = DiagService.Client(protocol)
transport.open()

if cmd == 'getLastError':
    if len(args) != 0:
        print('getLastError requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastError())

elif cmd == 'getDevice':
    if len(args) != 0:
        print('getDevice requires 0 args')
        sys.exit(1)
    pp.pprint(client.getDevice())

elif cmd == 'initializeService':
    if len(args) != 0:
        print('initializeService requires 0 args')
        sys.exit(1)
    pp.pprint(client.initializeService())

elif cmd == 'initializeServiceByProtocol':
    if len(args) != 1:
        print('initializeServiceByProtocol requires 1 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceByProtocol(eval(args[0]),))

elif cmd == 'initializeServiceWithOptions':
    if len(args) != 1:
        print('initializeServiceWithOptions requires 1 args')
        sys.exit(1)
    pp.pprint(client.initializeServiceWithOptions(eval(args[0]),))

elif cmd == 'destroyService':
    if len(args) != 0:
        print('destroyService requires 0 args')
        sys.exit(1)
    pp.pprint(client.destroyService())

elif cmd == 'sendRawRequest':
    if len(args) != 3:
        print('sendRawRequest requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendRawRequest(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'sendRawRequestAsync':
    if len(args) != 1:
        print('sendRawRequestAsync requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendRawRequestAsync(args[0],))

elif cmd == 'sendRequest':
    if len(args) != 5:
        print('sendRequest requires 5 args')
        sys.exit(1)
    pp.pprint(client.sendRequest(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'sendRequestAsync':
    if len(args) != 3:
        print('sendRequestAsync requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendRequestAsync(eval(args[0]), args[1], args[2],))

elif cmd == 'getResponseAsync':
    if len(args) != 3:
        print('getResponseAsync requires 3 args')
        sys.exit(1)
    pp.pprint(client.getResponseAsync(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAllResponsesAsync':
    if len(args) != 3:
        print('getAllResponsesAsync requires 3 args')
        sys.exit(1)
    pp.pprint(client.getAllResponsesAsync(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'createDataQueue':
    if len(args) != 3:
        print('createDataQueue requires 3 args')
        sys.exit(1)
    pp.pprint(client.createDataQueue(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'createDataQueueWithAnnotations':
    if len(args) != 4:
        print('createDataQueueWithAnnotations requires 4 args')
        sys.exit(1)
    pp.pprint(client.createDataQueueWithAnnotations(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'removeDataQueue':
    if len(args) != 1:
        print('removeDataQueue requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeDataQueue(args[0],))

elif cmd == 'clearDataQueue':
    if len(args) != 1:
        print('clearDataQueue requires 1 args')
        sys.exit(1)
    pp.pprint(client.clearDataQueue(args[0],))

elif cmd == 'getDataQueueItems':
    if len(args) != 3:
        print('getDataQueueItems requires 3 args')
        sys.exit(1)
    pp.pprint(client.getDataQueueItems(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getDataQueueItemsWithAnnotations':
    if len(args) != 3:
        print('getDataQueueItemsWithAnnotations requires 3 args')
        sys.exit(1)
    pp.pprint(client.getDataQueueItemsWithAnnotations(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'addDataQueueFilter':
    if len(args) != 2:
        print('addDataQueueFilter requires 2 args')
        sys.exit(1)
    pp.pprint(client.addDataQueueFilter(args[0], eval(args[1]),))

elif cmd == 'removeDataQueueFilter':
    if len(args) != 2:
        print('removeDataQueueFilter requires 2 args')
        sys.exit(1)
    pp.pprint(client.removeDataQueueFilter(args[0], eval(args[1]),))

elif cmd == 'setLoggingMask':
    if len(args) != 2:
        print('setLoggingMask requires 2 args')
        sys.exit(1)
    pp.pprint(client.setLoggingMask(args[0], eval(args[1]),))

elif cmd == 'getQShrinkState':
    if len(args) != 0:
        print('getQShrinkState requires 0 args')
        sys.exit(1)
    pp.pprint(client.getQShrinkState())

elif cmd == 'loadQShrinkFile':
    if len(args) != 1:
        print('loadQShrinkFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.loadQShrinkFile(args[0],))

elif cmd == 'setWcdmaProtocolRevision':
    if len(args) != 1:
        print('setWcdmaProtocolRevision requires 1 args')
        sys.exit(1)
    pp.pprint(client.setWcdmaProtocolRevision(eval(args[0]),))

elif cmd == 'setCdmaProtocolRevision':
    if len(args) != 1:
        print('setCdmaProtocolRevision requires 1 args')
        sys.exit(1)
    pp.pprint(client.setCdmaProtocolRevision(eval(args[0]),))

elif cmd == 'setPilotInc':
    if len(args) != 1:
        print('setPilotInc requires 1 args')
        sys.exit(1)
    pp.pprint(client.setPilotInc(eval(args[0]),))

elif cmd == 'setLoggingMaskFromFilter':
    if len(args) != 1:
        print('setLoggingMaskFromFilter requires 1 args')
        sys.exit(1)
    pp.pprint(client.setLoggingMaskFromFilter(eval(args[0]),))

elif cmd == 'getLoggingMask':
    if len(args) != 1:
        print('getLoggingMask requires 1 args')
        sys.exit(1)
    pp.pprint(client.getLoggingMask(eval(args[0]),))

elif cmd == 'resetHealthReportCounters':
    if len(args) != 1:
        print('resetHealthReportCounters requires 1 args')
        sys.exit(1)
    pp.pprint(client.resetHealthReportCounters(eval(args[0]),))

elif cmd == 'setHealthReportTimer':
    if len(args) != 2:
        print('setHealthReportTimer requires 2 args')
        sys.exit(1)
    pp.pprint(client.setHealthReportTimer(eval(args[0]), eval(args[1]),))

elif cmd == 'generateAttestationReport':
    if len(args) != 1:
        print('generateAttestationReport requires 1 args')
        sys.exit(1)
    pp.pprint(client.generateAttestationReport(eval(args[0]),))

elif cmd == 'installLicense':
    if len(args) != 1:
        print('installLicense requires 1 args')
        sys.exit(1)
    pp.pprint(client.installLicense(eval(args[0]),))

elif cmd == 'removeLicense':
    if len(args) != 1:
        print('removeLicense requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeLicense(eval(args[0]),))

elif cmd == 'enableRestrictedLogLicenseInstall':
    if len(args) != 1:
        print('enableRestrictedLogLicenseInstall requires 1 args')
        sys.exit(1)
    pp.pprint(client.enableRestrictedLogLicenseInstall(eval(args[0]),))

elif cmd == 'getRestrictedLogLicenseStatus':
    if len(args) != 0:
        print('getRestrictedLogLicenseStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRestrictedLogLicenseStatus())

elif cmd == 'getHypervisorConfiguration':
    if len(args) != 0:
        print('getHypervisorConfiguration requires 0 args')
        sys.exit(1)
    pp.pprint(client.getHypervisorConfiguration())

elif cmd == 'sendRawRequestWithOptions':
    if len(args) != 2:
        print('sendRawRequestWithOptions requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendRawRequestWithOptions(eval(args[0]), eval(args[1]),))

elif cmd == 'sendRawRequestAsyncWithOptions':
    if len(args) != 2:
        print('sendRawRequestAsyncWithOptions requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendRawRequestAsyncWithOptions(eval(args[0]), eval(args[1]),))

elif cmd == 'sendRequestWithOptions':
    if len(args) != 2:
        print('sendRequestWithOptions requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendRequestWithOptions(eval(args[0]), eval(args[1]),))

elif cmd == 'sendRequestAsyncWithOptions':
    if len(args) != 2:
        print('sendRequestAsyncWithOptions requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendRequestAsyncWithOptions(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
